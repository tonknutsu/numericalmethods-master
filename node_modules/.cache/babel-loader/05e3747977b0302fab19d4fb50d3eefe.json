{"ast":null,"code":"/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\nvar nerdamer = function (imports) {\n  \"use strict\"; //version ====================================================================== \n\n  var version = '1.1.2'; //inits ========================================================================\n\n  var _ = new Parser(); //nerdamer's parser\n  //import bigInt\n\n\n  var bigInt = imports.bigInt;\n  var bigDec = imports.bigDec; //set the precision to js precision\n\n  bigDec.set({\n    precision: 250\n  });\n  var Groups = {}; //container of pregenerated primes\n\n  var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083]; //Settings ===================================================================== \n\n  var CUSTOM_OPERATORS = {};\n  var Settings = {\n    //the max number up to which to cache primes. Making this too high causes performance issues\n    init_primes: 1000,\n    exclude: [],\n    //If you don't care about division by zero for example then this can be set to true. \n    //Has some nasty side effects so choose carefully.\n    suppress_errors: false,\n    //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n    //cos(9) for convenience but parse to number will always try to return a number if set to true. \n    PARSE2NUMBER: false,\n    //this flag forces the a clone to be returned when add, subtract, etc... is called\n    SAFE: false,\n    //the symbol to use for imaginary symbols\n    IMAGINARY: 'i',\n    //the modules used to link numeric function holders\n    FUNCTION_MODULES: [Math],\n    //Allow certain characters\n    ALLOW_CHARS: ['π'],\n    //Allow nerdamer to convert multi-character variables\n    USE_MULTICHARACTER_VARS: true,\n    //Allow changing of power operator\n    POWER_OPERATOR: '^',\n    //The variable validation regex\n    //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n    VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n    //Aliases\n    ALIASES: {\n      'π': 'pi',\n      '∞': 'Infinity'\n    },\n    POSITIVE_MULTIPLIERS: false,\n    //Cached items\n    CACHE: {},\n    //Print out warnings or not\n    SILENCE_WARNINGS: false,\n    //Precision\n    PRECISION: 80,\n    //function mappings\n    VECTOR: 'vector',\n    PARENTHESIS: 'parens',\n    SQRT: 'sqrt',\n    ABS: 'abs',\n    FACTORIAL: 'factorial',\n    DOUBLEFACTORIAL: 'dfactorial',\n    //reference pi and e\n    LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' + '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n    LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' + '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n    PI: Math.PI,\n    E: Math.E,\n    LOG: 'log',\n    LOG10: 'log10',\n    LOG10_LATEX: 'log_{10}',\n    MAX_EXP: 200000\n  };\n\n  (function () {\n    Settings.CACHE.roots = {};\n    var x = 40,\n        y = 40;\n\n    for (var i = 2; i <= x; i++) {\n      for (var j = 2; j <= y; j++) {\n        var nthpow = bigInt(i).pow(j);\n        Settings.CACHE.roots[nthpow + '-' + j] = i;\n      }\n    }\n  })(); //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n  //The groups that help with organizing during parsing. Note that for FN is still a function even \n  //when it's raised to a symbol, which typically results in an EX\n\n\n  var N = Groups.N = 1,\n      // A number\n  P = Groups.P = 2,\n      // A number with a rational power e.g. 2^(3/5). \n  S = Groups.S = 3,\n      // A single variable e.g. x. \n  EX = Groups.EX = 4,\n      // An exponential\n  FN = Groups.FN = 5,\n      // A function\n  PL = Groups.PL = 6,\n      // A symbol/expression having same name with different powers e.g. 1/x + x^2\n  CB = Groups.CB = 7,\n      // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n  CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n  var CONST_HASH = Settings.CONST_HASH = '#';\n  var PARENTHESIS = Settings.PARENTHESIS;\n  var SQRT = Settings.SQRT;\n  var ABS = Settings.ABS;\n  var FACTORIAL = Settings.FACTORIAL;\n  var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL; //the storage container \"memory\" for parsed expressions\n\n  var EXPRESSIONS = []; //variables\n\n  var VARS = {}; //the container used to store all the reserved functions\n\n  var RESERVED = [];\n  var WARNINGS = [];\n  /**\n   * Use this when errors are suppressible\n   * @param {String} msg\n   * @param {object} ErrorObj \n   */\n\n  var err = function (msg, ErrorObj) {\n    if (!Settings.suppress_errors) {\n      if (ErrorObj) throw new ErrorObj(msg);else throw new Error(msg);\n    }\n  }; //Utils ======================================================================== \n\n\n  var customError = function (name) {\n    var E = function (message) {\n      this.name = name;\n      this.message = message !== undefined ? message : '';\n      var error = new Error(this.message);\n      error.name = this.name;\n      this.stack = error.stack;\n    }; //create an empty error\n\n\n    E.prototype = Object.create(Error.prototype);\n    return E;\n  };\n  /**\n   * Checks to see if value is one of nerdamer's reserved names\n   * @param {String} value\n   * @return boolean\n   */\n\n\n  var isReserved = function (value) {\n    return RESERVED.indexOf(value) !== -1;\n  };\n  /**\n   * Checks to see that all symbols in array are the same\n   * @param {Symbol[]} arr\n   * @returns {bool}\n   */\n\n\n  var allSame = function (arr) {\n    var last = arr[0];\n\n    for (var i = 1, l = arr.length; i < l; i++) if (!arr[i].equals(last)) return false;\n\n    return true;\n  };\n  /**\n   * Used to pass warnings or low severity errors about the library\n   * @param msg\n   */\n\n\n  var warn = function (msg) {\n    WARNINGS.push(msg);\n\n    if (Settings.SHOW_WARNINGS && console && console.warn) {\n      console.warn(msg);\n    }\n  };\n  /**\n   * Enforces rule: \"must start with a letter or underscore and \n   * can have any number of underscores, letters, and numbers thereafter.\"\n   * @param name The name of the symbol being checked\n   * @param {String} typ - The type of symbols that's being validated\n   * @throws {Exception}  - Throws an exception on fail\n   */\n\n\n  var validateName = function (name, typ) {\n    typ = typ || 'variable';\n    if (Settings.ALLOW_CHARS.indexOf(name) !== -1) return;\n    var regex = Settings.VALIDATION_REGEX;\n\n    if (!regex.test(name)) {\n      throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n    }\n  };\n  /**\n   * Convert number from scientific format to decimal format\n   * @param {Number} num\n   */\n\n\n  var scientificToDecimal = function (num) {\n    var nsign = Math.sign(num); //remove the sign\n\n    num = Math.abs(num); //if the number is in scientific notation remove it\n\n    if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n      var zero = '0',\n          parts = String(num).toLowerCase().split('e'),\n          //split into coeff and exponent\n      e = parts.pop(),\n          //store the exponential part\n      l = Math.abs(e),\n          //get the number of zeros\n      sign = e / l,\n          coeff_array = parts[0].split('.');\n\n      if (sign === -1) {\n        l = l - coeff_array[0].length;\n\n        if (l < 0) {\n          num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n        } else {\n          num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n        }\n      } else {\n        var dec = coeff_array[1];\n        if (dec) l = l - dec.length;\n\n        if (l < 0) {\n          num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n        } else {\n          num = coeff_array.join('') + new Array(l + 1).join(zero);\n        }\n      }\n    }\n\n    return nsign < 0 ? '-' + num : num;\n  };\n  /**\n   * Checks if number is a prime number\n   * @param {Number} n - the number to be checked\n   */\n\n\n  var isPrime = function (n) {\n    var q = Math.floor(Math.sqrt(n));\n\n    for (var i = 2; i <= q; i++) {\n      if (n % i === 0) return false;\n    }\n\n    return true;\n  };\n  /**\n   * Checks if n is a number\n   * @param {any} n \n   */\n\n\n  var isNumber = function (n) {\n    return /^\\d+\\.?\\d*$/.test(n);\n  };\n  /**\n   * Checks to see if an array contains only numeric values\n   * @param {Array} arr \n   */\n\n\n  var allNumeric = function (arr) {\n    for (var i = 0; i < arr.length; i++) if (!isNumber(arr[i])) return false;\n\n    return true;\n  };\n  /**\n   * Checks to see if a number or Symbol is a fraction\n   * @param {Number|Symbol} num\n   * @returns {boolean}\n   */\n\n\n  var isFraction = function (num) {\n    if (isSymbol(num)) return isFraction(num.multiplier.toDecimal());\n    return num % 1 !== 0;\n  };\n  /**\n   * Checks to see if the object provided is a Symbol\n   * @param {Object} obj\n   */\n\n\n  var isSymbol = function (obj) {\n    return obj instanceof Symbol;\n  };\n  /**\n   * Checks to see if the object provided is an Expression\n   * @param {Object} obj\n   */\n\n\n  var isExpression = function (obj) {\n    return obj instanceof Expression;\n  };\n  /**\n   * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n   * names are then returned in alphabetical order.\n   * @param {Symbol} obj\n   * @param {Boolean} poly \n   * @param {Object} vars - An object containing the variables. Do not pass this in as it generated \n   * automatically. In the future this will be a Collector object.\n   * @returns {String[]} - An array containing variable names\n   */\n\n\n  var variables = function (obj, poly, vars) {\n    vars = vars || {\n      c: [],\n      add: function (value) {\n        if (this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);\n      }\n    };\n\n    if (isSymbol(obj)) {\n      var group = obj.group,\n          prevgroup = obj.previousGroup;\n      if (group === EX) variables(obj.power, poly, vars);\n\n      if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n        for (var x in obj.symbols) {\n          variables(obj.symbols[x], poly, vars);\n        }\n      } else if (group === S || prevgroup === S) {\n        //very crude needs fixing. TODO\n        if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY)) vars.add(obj.value);\n      } else if (group === PL || prevgroup === PL) {\n        variables(firstObject(obj.symbols), poly, vars);\n      } else if (group === EX) {\n        if (!isNaN(obj.value)) vars.add(obj.value);\n        variables(obj.power, poly, vars);\n      } else if (group === FN && !poly) {\n        for (var i = 0; i < obj.args.length; i++) {\n          variables(obj.args[i], poly, vars);\n        }\n      }\n    }\n\n    return vars.c.sort();\n  };\n  /**\n   * Returns the sum of an array\n   * @param {Array} arr\n   * @returns {Symbol}\n   */\n\n\n  var arraySum = function (arr) {\n    var sum = new Symbol(0);\n    arr.map(function (x) {\n      sum = _.add(sum, x);\n    });\n    return sum;\n  };\n  /**\n   * Separates out the variables into terms of variabls. \n   * e.g. x+y+x*y+sqrt(2)+pi returns \n   * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n   * @param {type} symbol\n   * @param {type} o\n   * @returns {undefined}\n   * @throws {Error} for expontentials\n   */\n\n\n  var separate = function (symbol, o) {\n    symbol = _.expand(symbol);\n    o = o || {};\n\n    var insert = function (key, sym) {\n      if (!o[key]) o[key] = new Symbol(0);\n      o[key] = _.add(o[key], sym.clone());\n    };\n\n    symbol.each(function (x) {\n      if (x.isConstant('all')) insert('constants', x);else if (x.group === S) {\n        insert(x.value, x);\n      } else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n        separate(x.args[0]);\n      } else if (x.group === EX || x.group === FN) {\n        throw new Error('Unable to separate. Term cannot be a function!');\n      } else {\n        insert(variables(x).join(' '), x);\n      }\n    });\n    return o;\n  };\n  /**\n   * Fills holes in an array with zero symbol or generates one with n zeroes\n   * @param {Array} arr \n   * @param {Number} n \n   */\n\n\n  var fillHoles = function (arr, n) {\n    n = n || arr.length;\n\n    for (var i = 0; i < n; i++) {\n      var sym = arr[i];\n      if (!sym) arr[i] = new Symbol(0);\n    }\n\n    return arr;\n  };\n  /**\n   * \n   * Checks to see if the object provided is a Vector\n   * @param {Object} obj\n   */\n\n\n  var isVector = function (obj) {\n    return obj instanceof Vector;\n  };\n  /**\n   * Checks to see if the object provided is a Matrix\n   * @param {Object} obj\n   */\n\n\n  var isMatrix = function (obj) {\n    return obj instanceof Matrix;\n  };\n\n  var isSet = function (obj) {\n    return obj instanceof Set;\n  };\n  /**\n   * Checks to see if a symbol is in group N\n   * @param {Symbol} symbol\n   */\n\n\n  var isNumericSymbol = function (symbol) {\n    return symbol.group === N || symbol.group === P;\n  };\n  /**\n   * Checks to see if a symbol is a variable with no multiplier nor power\n   * @param {Symbol} symbol\n   */\n\n\n  var isVariableSymbol = function (symbol) {\n    return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n  };\n  /**\n   * Checks to see if the object provided is an Array\n   * @param {Object} arr\n   */\n\n\n  var isArray = function (arr) {\n    return Array.isArray(arr);\n  };\n  /**\n   * Checks to see if a number is an integer\n   * @param {Number} num\n   */\n\n\n  var isInt = function (num) {\n    return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n  };\n  /**\n   * @param {Number|Symbol} obj\n   * @returns {boolean}\n   */\n\n\n  var isNegative = function (obj) {\n    if (isSymbol(obj)) {\n      obj = obj.multiplier;\n    }\n\n    return obj.lessThan(0);\n  };\n  /**\n   * Safely stringify object\n   * @param o\n   */\n\n\n  var stringify = function (o) {\n    if (!o) return o;\n    return String(o);\n  };\n  /**\n   * @param {String} str\n   * @returns {String} - returns a formatted string surrounded by brackets\n   */\n\n\n  var inBrackets = function (str) {\n    return '(' + str + ')';\n  };\n  /**\n   * A helper function to replace parts of string\n   * @param {String} str - The original string\n   * @param {Integer} from - The starting index\n   * @param {Integer} to - The ending index\n   * @param {String} with_str - The replacement string\n   * @returns {String} - A formatted string\n   */\n\n\n  var stringReplace = function (str, from, to, with_str) {\n    return str.substr(0, from) + with_str + str.substr(to, str.length);\n  };\n  /**\n   * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n   * @param {Object} obj\n   * @returns {boolean}\n   */\n\n\n  var customType = function (obj) {\n    return obj !== undefined && obj.custom;\n  };\n  /**\n   * Checks to see if numbers are both negative or are both positive\n   * @param {Number} a\n   * @param {Number} b\n   * @returns {boolean}\n   */\n\n\n  var sameSign = function (a, b) {\n    return a < 0 === b < 0;\n  };\n  /**\n   * A helper function to replace multiple occurences in a string. Takes multiple arguments\n   * @example format('{0} nice, {0} sweet', 'something')\n   * //returns 'something nice, something sweet'\n   */\n\n\n  var format = function () {\n    var args = [].slice.call(arguments),\n        str = args.shift();\n    var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n      var arg = args[index];\n      return typeof arg === 'function' ? arg() : arg;\n    });\n    return new_str;\n  };\n  /**\n   * Generates an array with values within a range. Multiplies by a step if provided\n   * @param {Number} start\n   * @param {Number} end\n   * @param {Number} step\n   */\n\n\n  var range = function (start, end, step) {\n    var arr = [];\n    step = step || 1;\n\n    for (var i = start; i <= end; i++) arr.push(i * step);\n\n    return arr;\n  };\n  /**\n   * Returns an array of all the keys in an array\n   * @param {Object} obj\n   * @returns {Array}\n   */\n\n\n  var keys = Object.keys;\n  /**\n   * Returns the first encountered item in an object. Items do not have a fixed order in objects \n   * so only use if you need any first random or if there's only one item in the object\n   * @param {Object} obj\n   * @param {String} key Return this key as first object\n   * @param {Boolean} both\n   * @returns {*}\n   */\n\n  var firstObject = function (obj, key, both) {\n    for (var x in obj) break;\n\n    if (key) return x;\n    if (both) return {\n      key: x,\n      obj: obj[x]\n    };\n    return obj[x];\n  };\n  /**\n   * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n   * @param {Symbol} sym1\n   * @param {Symbol} sym2\n   * @param {String[]} vars - an optional array of variables to use\n   * @returns {bool}\n   */\n\n\n  var compare = function (sym1, sym2, vars) {\n    var n = 5; //a random number between 1 and 5 is good enough\n\n    var scope = {}; // scope object with random numbers generated using vars\n\n    var comparison;\n\n    for (var i = 0; i < vars.length; i++) scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n\n    block('PARSE2NUMBER', function () {\n      comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n    });\n    return comparison;\n  };\n  /**\n   * Is used to set a user defined function using the function assign operator\n   * @param {String} name\n   * @param {String[]} params_array\n   * @param {String} body\n   * @returns {Boolean}\n   */\n\n\n  var setFunction = function (name, params_array, body) {\n    validateName(name);\n\n    if (!isReserved(name)) {\n      params_array = params_array || variables(_.parse(body));\n      _.functions[name] = [_.mapped_function, params_array.length, {\n        name: name,\n        params: params_array,\n        body: body\n      }];\n      return body;\n    }\n\n    return null;\n  };\n  /**\n   * Returns the minimum number in an array\n   * @param {Array} arr\n   * @returns {Number} \n   */\n\n\n  var arrayMax = function (arr) {\n    return Math.max.apply(undefined, arr);\n  };\n  /**\n   * Returns the maximum number in an array\n   * @param {Array} arr\n   * @returns {Number} \n   */\n\n\n  var arrayMin = function (arr) {\n    return Math.min.apply(undefined, arr);\n  };\n  /**\n   * Clones array with clonable items\n   * @param {Array} arr\n   * @returns {Array}\n   */\n\n\n  var arrayClone = function (arr) {\n    var new_array = [],\n        l = arr.length;\n\n    for (var i = 0; i < l; i++) new_array[i] = arr[i].clone();\n\n    return new_array;\n  };\n  /**\n   * Fills numbers between array values\n   * @param {Numbers[]} arr\n   * @param {Integer} slices\n   */\n\n\n  var arrayAddSlices = function (arr, slices) {\n    slices = slices || 20;\n    var retval = [];\n    var c, delta, e;\n    retval.push(arr[0]); //push the beginning\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      c = arr[i];\n      delta = arr[i + 1] - c; //get the difference\n\n      e = delta / slices; //chop it up in the desired number of slices\n\n      for (var j = 0; j < slices; j++) {\n        c += e; //add the mesh to the last slice\n\n        retval.push(c);\n      }\n    }\n\n    return retval;\n  };\n  /**\n  * Gets nth roots of a number\n  * @param {Symbol} symbol\n  * @returns {Vector}\n  */\n\n\n  var nroots = function (symbol) {\n    var a, b;\n\n    if (symbol.group === FN && symbol.fname === '') {\n      a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n      b = _.parse(symbol.power);\n    } else if (symbol.group === P) {\n      a = _.parse(symbol.value);\n      b = _.parse(symbol.power);\n    }\n\n    if (a && b && a.group === N && b.group === N && a.multiplier.isNegative()) {\n      var _roots = [];\n      var parts = Symbol.toPolarFormArray(evaluate(symbol));\n      var r = parts[0]; //var r = _.parse(a).abs().toString();\n      //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n\n      var x = _.arg(a);\n\n      var n = b.multiplier.den.toString();\n      var p = b.multiplier.num.toString();\n      var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n      for (var i = 0; i < n; i++) {\n        var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n\n        _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n      }\n\n      return Vector.fromArray(_roots);\n    } else if (symbol.isConstant(true, true)) {\n      var sign = symbol.sign();\n      var x = evaluate(symbol.abs());\n\n      var root = _.sqrt(x);\n\n      var _roots = [root.clone(), root.negate()];\n      if (sign < 0) _roots = _roots.map(function (x) {\n        return _.multiply(x, Symbol.imaginary());\n      });\n    } else {\n      _roots = [_.parse(symbol)];\n    }\n\n    return Vector.fromArray(_roots);\n  };\n  /**\n   * Sorts and array given 2 parameters\n   * @param {String} a\n   * @param {String} b\n   */\n\n\n  var comboSort = function (a, b) {\n    var l = a.length,\n        combined = []; //the linker\n\n    for (var i = 0; i < a.length; i++) {\n      combined.push([a[i], b[i]]); //create the map\n    }\n\n    combined.sort(function (x, y) {\n      return x[0] - y[0];\n    });\n    var na = [],\n        nb = [];\n\n    for (i = 0; i < l; i++) {\n      na.push(combined[i][0]);\n      nb.push(combined[i][1]);\n    }\n\n    return [na, nb];\n  };\n  /**\n   * TODO: Pick a more descriptive name and better description\n   * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n   * Example a*x^2+b wrt x\n   * @param {Symbol} fn\n   * @param {String} wrt\n   * @param {bool} as_obj\n   */\n\n\n  var decompose_fn = function (fn, wrt, as_obj) {\n    wrt = String(wrt); //convert to string\n\n    var ax, a, x, b;\n\n    if (fn.group === CP) {\n      var t = _.expand(fn.clone()).stripVar(wrt);\n\n      ax = _.subtract(fn.clone(), t.clone());\n      b = t;\n    } else ax = fn.clone();\n\n    a = ax.stripVar(wrt);\n    x = _.divide(ax.clone(), a.clone());\n    b = b || new Symbol(0);\n    if (as_obj) return {\n      a: a,\n      x: x,\n      ax: ax,\n      b: b\n    };\n    return [a, x, ax, b];\n  };\n  /**\n   * Rounds a number up to x decimal places\n   * @param {Number} x\n   * @param {Number} s\n   */\n\n\n  var nround = function (x, s) {\n    if (isInt(x)) {\n      if (x >= Number.MAX_VALUE) return x.toString();\n      return Number(x);\n    }\n\n    s = typeof s === 'undefined' ? 14 : s;\n    return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n  };\n  /**\n   * Is used for u-substitution. Gets a suitable u for substitution. If for\n   * instance a is used in the symbol then it keeps going down the line until\n   * one is found that's not in use. If all letters are taken then it\n   * starts appending numbers. \n   * IMPORTANT! It assumes that the substitution will be undone\n   * beore the user gets to interact with the object again.\n   * @param {Symbol} symbol\n   */\n\n\n  var getU = function (symbol) {\n    //start with u\n    var u = 'u',\n        //start with u\n    v = u,\n        //init with u\n    c = 0,\n        //postfix number\n    vars = variables(symbol); //make sure this variable isn't reserved and isn't in the variable list\n\n    while (!(RESERVED.indexOf(v) === -1 && vars.indexOf(v) === -1)) v = u + c++; //get an empty slot. It seems easier to just push but the\n    //problem is that we may have some which are created by clearU\n\n\n    for (var i = 0, l = RESERVED.length; i <= l; i++) //reserved cannot equals false or 0 so we can safely check for a falsy type\n    if (!RESERVED[i]) {\n      RESERVED[i] = v; //reserve the variable\n\n      break;\n    }\n\n    return v;\n  };\n  /**\n   * Clears the u variable so it's no longer reserved\n   * @param {String} u\n   */\n\n\n  var clearU = function (u) {\n    var indx = RESERVED.indexOf(u);\n    if (indx !== -1) RESERVED[indx] = undefined;\n  };\n  /**\n   * Loops through each item in object and calls function with item as param\n   * @param {Object|Array} obj\n   * @param {Function} fn \n   */\n\n\n  var each = function (obj, fn) {\n    if (isArray(obj)) {\n      var l = obj.length;\n\n      for (var i = 0; i < l; i++) fn.call(obj, i);\n    } else {\n      for (var x in obj) if (obj.hasOwnProperty(x)) fn.call(obj, x);\n    }\n  };\n  /**\n   * Checks to see if a number is an even number\n   * @param {Number} num\n   * @returns {boolean}\n   */\n\n\n  var even = function (num) {\n    return num % 2 === 0;\n  };\n  /**\n   * Checks to see if a fraction is divisible by 2\n   * @param {Number} num\n   * @returns {boolean}\n   */\n\n\n  var evenFraction = function (num) {\n    return 1 / (num % 1) % 2 === 0;\n  };\n  /**\n   * Strips duplicates out of an array\n   * @param {Array} arr\n   */\n\n\n  var arrayUnique = function (arr) {\n    var l = arr.length,\n        a = [];\n\n    for (var i = 0; i < l; i++) {\n      var item = arr[i];\n      if (a.indexOf(item) === -1) a.push(item);\n    }\n\n    return a;\n  };\n  /**\n   * Removes duplicates from an array. Returns a new array\n   * @param {Array} arr\n   * @param {Function} condition\n   */\n\n\n  var removeDuplicates = function (arr, condition) {\n    var conditionType = typeof condition;\n\n    if (conditionType !== 'function' || conditionType === 'undefined') {\n      condition = function (a, b) {\n        return a === b;\n      };\n    }\n\n    var seen = [];\n\n    while (arr.length) {\n      var a = arr[0]; //only one element left so we're done\n\n      if (arr.length === 1) {\n        seen.push(a);\n        break;\n      }\n\n      var temp = [];\n      seen.push(a); //we already scanned these\n\n      for (var i = 1; i < arr.length; i++) {\n        var b = arr[i]; //if the number is outside the specified tolerance\n\n        if (!condition(a, b)) temp.push(b);\n      } //start over with the remainder\n\n\n      arr = temp;\n    }\n\n    return seen;\n  };\n  /**\n   * Reserves the names in an object so they cannot be used as function names\n   * @param {Object} obj\n   */\n\n\n  var reserveNames = function (obj) {\n    var add = function (item) {\n      if (RESERVED.indexOf(item) === -1) RESERVED.push(item);\n    };\n\n    if (typeof obj === 'string') add(obj);else {\n      each(obj, function (x) {\n        add(x);\n      });\n    }\n  };\n  /**\n   * Removes an item from either an array or an object. If the object is an array, the index must be \n   * specified after the array. If it's an object then the key must be specified\n   * @param {Object|Array} obj\n   * @param {Integer} indexOrKey\n   */\n\n\n  var remove = function (obj, indexOrKey) {\n    var result;\n\n    if (isArray(obj)) {\n      result = obj.splice(indexOrKey, 1)[0];\n    } else {\n      result = obj[indexOrKey];\n      delete obj[indexOrKey];\n    }\n\n    return result;\n  };\n  /**\n   * Creates a temporary block in which one of the global settings is temporarily modified while\n   * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n   * answer for a period you would set PARSE2NUMBER to true in the block.\n   * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n   * @param {String} setting - The setting being accessed\n   * @param {Function} f \n   * @param {boolean} opt - The value of the setting in the block\n   * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\n   */\n\n\n  var block = function (setting, f, opt, obj) {\n    var current_setting = Settings[setting];\n    Settings[setting] = opt === undefined ? true : !!opt;\n    var retval = f.call(obj);\n    Settings[setting] = current_setting;\n    return retval;\n  };\n  /**\n   * provide a mechanism for accessing functions directly. Not yet complete!!! \n   * Some functions will return undefined. This can maybe just remove the \n   * function object at some point when all functions are eventually \n   * housed in the global function object. Returns ALL parser available \n   * functions. Parser.functions may not contain all functions\n   */\n\n\n  var importFunctions = function () {\n    var o = {};\n\n    for (var x in _.functions) o[x] = _.functions[x][0];\n\n    return o;\n  };\n  /**\n   * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n   * @param {Array|object} obj\n   */\n\n\n  var arguments2Array = function (obj) {\n    return [].slice.call(obj);\n  };\n  /**\n   * Returns the coefficients of a symbol\n   * @param {Symbol} symbol\n   * @param {Symbol} wrt\n   */\n\n\n  var getCoeffs = function (symbol, wrt) {\n    var coeffs = []; //we loop through the symbols and stick them in their respective \n    //containers e.g. y*x^2 goes to index 2\n\n    symbol.each(function (term) {\n      if (term.contains(wrt)) {\n        //we want only the coefficient which in this case will be everything but the variable\n        //e.g. a*b*x -> a*b if the variable to solve for is x\n        var coeff = term.stripVar(wrt),\n            x = _.divide(term.clone(), coeff.clone()),\n            p = x.power.toDecimal();\n      } else {\n        coeff = term;\n        p = 0;\n      }\n\n      var e = coeffs[p]; //if it exists just add it to it\n\n      coeffs[p] = e ? _.add(e, coeff) : coeff;\n    }, true);\n\n    for (var i = 0; i < coeffs.length; i++) if (!coeffs[i]) coeffs[i] = new Symbol(0); //fill the holes\n\n\n    return coeffs;\n  };\n  /**\n   * As the name states. It forces evaluation of the expression \n   * @param {Symbol} symbol\n   * @param {Symbol} o\n   */\n\n\n  var evaluate = function (symbol, o) {\n    return block('PARSE2NUMBER', function () {\n      return _.parse(symbol, o);\n    }, true);\n  };\n  /**\n   * Converts an array to a vector. Consider moving this to Vector.fromArray\n   * @param {String[]|String|Symbol|Number|Number[]} x \n   */\n\n\n  var convertToVector = function (x) {\n    if (isArray(x)) {\n      var vector = new Vector([]);\n\n      for (var i = 0; i < x.length; i++) vector.elements.push(convertToVector(x[i]));\n\n      return vector;\n    } //Ensure that a nerdamer ready object is returned\n\n\n    if (!isSymbol(x)) return _.parse(x);\n    return x;\n  };\n  /**\n   * Generates prime numbers up to a specified number\n   * @param {Number} upto \n   */\n\n\n  var generatePrimes = function (upto) {\n    //get the last prime in the array\n    var last_prime = PRIMES[PRIMES.length - 1] || 2; //no need to check if we've already encountered the number. Just check the cache.\n\n    for (var i = last_prime; i < upto; i++) {\n      if (isPrime(i)) PRIMES.push(i);\n    }\n  };\n  /**\n   * Checks to see if all arguments are numbers\n   * @param {object} args\n   */\n\n\n  var allNumbers = function (args) {\n    for (var i = 0; i < args.length; i++) if (args[i].group !== N) return false;\n\n    return true;\n  };\n  /*\n   * Checks if all arguments aren't just all number but if they\n   * are constants as well e.g. pi, e.\n   * @param {object} args \n   */\n\n\n  var allConstants = function (args) {\n    for (var i = 0; i < args.length; i++) {\n      if (args[i].isPi() || args[i].isE()) continue;\n      if (!args[i].isConstant(true)) return false;\n    }\n\n    return true;\n  }; //Exceptions ===================================================================\n  //Is thrown for division by zero\n\n\n  var DivisionByZero = customError('DivisionByZero'); //Is throw if an error occured during parsing\n\n  var ParseError = customError('ParseError'); //Is thrown if the expression results in undefined\n\n  var UndefinedError = customError('UndefinedError'); //Is throw if a function exceeds x amount of iterations\n\n  var MaximumIterationsReached = customError('MaximumIterationsReached'); //Is thrown if the parser receives an incorrect type\n\n  var NerdamerTypeError = customError('NerdamerTypeError'); //Is thrown if bracket parity is not correct\n\n  var ParityError = customError('ParityError'); //Is thrown if an unexpectd or incorrect operator is encountered\n\n  var OperatorError = customError('OperatorError'); //Is thrown if an index is out of range.\n\n  var OutOfRangeError = customError('OutOfRangeError'); //Is thrown if dimensions are incorrect. Mostly for matrices\n\n  var DimensionError = customError('DimensionError'); //Is thrown if variable name violates naming rule\n\n  var InvalidVariableNameError = customError('InvalidVariableNameError'); //Is thrown if the limits of the library are exceeded for a function\n  //This can be that the function become unstable passed a value\n\n  var ValueLimitExceededError = customError('ValueLimitExceededError'); //Is throw if the value is an incorrect LH or RH value\n\n  var NerdamerValueError = customError('NerdamerValueError'); //Is throw if the value is an incorrect LH or RH value\n\n  var SolveError = customError('SolveError');\n  var exceptions = {\n    DivisionByZero: DivisionByZero,\n    ParseError: ParseError,\n    UndefinedError: UndefinedError,\n    MaximumIterationsReached: MaximumIterationsReached,\n    NerdamerTypeError: NerdamerTypeError,\n    ParityError: ParityError,\n    OperatorError: OperatorError,\n    OutOfRangeError: OutOfRangeError,\n    DimensionError: DimensionError,\n    InvalidVariableNameError: InvalidVariableNameError,\n    ValueLimitExceededError: ValueLimitExceededError,\n    NerdamerValueError: NerdamerValueError,\n    SolveError: SolveError\n  }; //Big ========================================================================== \n\n  var Big = {\n    cos: function (x) {\n      return new Symbol(bigDec.cos(x.multiplier.toDecimal()));\n    },\n    sin: function (x) {\n      return new Symbol(bigDec.sin(x.multiplier.toDecimal()));\n    }\n  }; //Math2 ======================================================================== \n  //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n  //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the \n  //functions within are pretty self-explanatory.\n  //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n\n  var Math2 = {\n    csc: function (x) {\n      return 1 / Math.sin(x);\n    },\n    sec: function (x) {\n      return 1 / Math.cos(x);\n    },\n    cot: function (x) {\n      return 1 / Math.tan(x);\n    },\n    acsc: function (x) {\n      return Math.asin(1 / x);\n    },\n    asec: function (x) {\n      return Math.acos(1 / x);\n    },\n    acot: function (x) {\n      return Math.PI / 2 - Math.atan(x);\n    },\n    // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n    erf: function (x) {\n      var t = 1 / (1 + 0.5 * Math.abs(x));\n      var result = 1 - t * Math.exp(-x * x - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n      return x >= 0 ? result : -result;\n    },\n    diff: function (f) {\n      var h = 0.001;\n\n      var derivative = function (x) {\n        return (f(x + h) - f(x - h)) / (2 * h);\n      };\n\n      return derivative;\n    },\n    median: function (...values) {\n      values.sort(function (a, b) {\n        return a - b;\n      });\n      var half = Math.floor(values.length / 2);\n      if (values.length % 2) return values[half];\n      return (values[half - 1] + values[half]) / 2.0;\n    },\n\n    /*\n     * Reverses continued fraction calculation\n     * @param {obj} contd\n     * @returns {Number}\n     */\n    fromContinued: function (contd) {\n      var arr = contd.fractions.slice();\n      var e = 1 / arr.pop();\n\n      for (var i = 0, l = arr.length; i < l; i++) {\n        e = 1 / (arr.pop() + e);\n      }\n\n      return contd.sign * (contd.whole + e);\n    },\n\n    /*\n     * Calculates continued fractions\n     * @param {Number} n\n     * @param {Number} x The number of places\n     * @returns {Number}\n     */\n    continuedFraction: function (n, x) {\n      x = x || 20;\n      var sign = Math.sign(n);\n      /*store the sign*/\n\n      var absn = Math.abs(n);\n      /*get the absolute value of the number*/\n\n      var whole = Math.floor(absn);\n      /*get the whole*/\n\n      var ni = absn - whole;\n      /*subtract the whole*/\n\n      var c = 0;\n      /*the counter to keep track of iterations*/\n\n      var done = false;\n      var epsilon = 1e-14;\n      var max = 1e7;\n      var e, w;\n      var retval = {\n        whole: whole,\n        sign: sign,\n        fractions: []\n      };\n      /*start calculating*/\n\n      while (!done && ni !== 0) {\n        /*invert and get the whole*/\n        e = 1 / ni;\n        w = Math.floor(e);\n\n        if (w > max) {\n          /*this signals that we may have already gone too far*/\n          var d = Math2.fromContinued(retval) - n;\n          if (d <= Number.EPSILON) break;\n        }\n        /*add to result*/\n\n\n        retval.fractions.push(w);\n        /*move the ni to the decimal*/\n\n        ni = e - w;\n        /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n\n        if (ni <= epsilon || c >= x - 1) done = true;\n        c++;\n      }\n      /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n\n\n      var idx = retval.fractions.length - 1;\n\n      if (retval.fractions[idx] === 1) {\n        retval.fractions.pop();\n        /*increase the last one by one*/\n\n        retval.fractions[--idx]++;\n      }\n\n      return retval;\n    },\n    bigpow: function (n, p) {\n      if (!(n instanceof Frac)) n = Frac.create(n);\n      if (!(p instanceof Frac)) p = Frac.create(p);\n      var retval = new Frac(0);\n\n      if (p.isInteger()) {\n        retval.num = n.num.pow(p.toString());\n        retval.den = n.den.pow(p.toString());\n      } else {\n        var num = Frac.create(Math.pow(n.num, p.num));\n        var den = Frac.create(Math.pow(n.den, p.num));\n        retval.num = Math2.nthroot(num, p.den.toString());\n        retval.den = Math2.nthroot(den, p.den);\n      }\n\n      return retval;\n    },\n    //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n    gamma: function (z) {\n      var g = 7;\n      var C = [0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];\n      if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));else {\n        z -= 1;\n        var x = C[0];\n\n        for (var i = 1; i < g + 2; i++) x += C[i] / (z + i);\n\n        var t = z + g + 0.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n      }\n    },\n    //factorial\n    bigfactorial: function (x) {\n      var retval = new bigInt(1);\n\n      for (var i = 2; i <= x; i++) retval = retval.times(i);\n\n      return new Frac(retval);\n    },\n    //https://en.wikipedia.org/wiki/Logarithm#Calculation\n    bigLog: function (x) {\n      varn\n      if (CACHE[x]) {\n        return Frac.quick.apply(null, CACHE[x].split('/'));\n      }\n\n      x = new Frac(x);\n      var n = 80;\n      var retval = new Frac(0);\n      var a = x.subtract(new Frac(1));\n      var b = x.add(new Frac(1));\n\n      for (var i = 0; i < n; i++) {\n        var t = new Frac(2 * i + 1);\n        var k = Math2.bigpow(a.divide(b), t);\n        var r = t.clone().invert().multiply(k);\n        retval = retval.add(r);\n      }\n\n      return retval.multiply(new Frac(2));\n    },\n    //the factorial function but using the big library instead\n    factorial: function (x) {\n      var is_int = x % 1 === 0;\n      /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n\n      if (is_int && x < 0) return NaN;\n      if (!is_int) return Math2.gamma(x + 1);\n      var retval = 1;\n\n      for (var i = 2; i <= x; i++) retval = retval * i;\n\n      return retval;\n    },\n    //double factorial\n    //http://mathworld.wolfram.com/DoubleFactorial.html\n    dfactorial: function (x) {\n      if (isInt(x)) {\n        var even = x % 2 === 0;\n        /* If x = even then n = x/2 else n = (x-1)/2*/\n\n        var n = even ? x / 2 : (x + 1) / 2;\n        /*the return value*/\n\n        var r = new Frac(1);\n        /*start the loop*/\n\n        if (even) for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)));else for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n      } else {\n        /*Not yet extended to bigNum*/\n        r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n      }\n      /*done*/\n\n\n      return r;\n    },\n    GCD: function () {\n      var args = arrayUnique([].slice.call(arguments).map(function (x) {\n        return Math.abs(x);\n      })).sort(),\n          a = Math.abs(args.shift()),\n          n = args.length;\n\n      while (n-- > 0) {\n        var b = Math.abs(args.shift());\n\n        while (true) {\n          a %= b;\n\n          if (a === 0) {\n            a = b;\n            break;\n          }\n\n          b %= a;\n          if (b === 0) break;\n          ;\n        }\n      }\n\n      return a;\n    },\n    QGCD: function () {\n      var args = [].slice.call(arguments);\n      var a = args[0];\n\n      for (var i = 1; i < args.length; i++) {\n        var b = args[i];\n        var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n        a = b.gcd(a);\n        if (sign < 0) a.negate();\n      }\n\n      return a;\n    },\n    LCM: function (a, b) {\n      return a * b / Math2.GCD(a, b);\n    },\n    //pow but with the handling of negative numbers\n    //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n    pow: function (b, e) {\n      if (b < 0) {\n        if (Math.abs(e) < 1) {\n          /*nth root of a negative number is imaginary when n is even*/\n          if (1 / e % 2 === 0) return NaN;\n          return -Math.pow(Math.abs(b), e);\n        }\n      }\n\n      return Math.pow(b, e);\n    },\n    factor: function (n) {\n      n = Number(n);\n      var sign = Math.sign(n);\n      /*store the sign*/\n\n      /*move the number to absolute value*/\n\n      n = Math.abs(n);\n      var ifactors = Math2.ifactor(n);\n      var factors = new Symbol();\n      factors.symbols = {};\n      factors.group = CB;\n\n      for (var x in ifactors) {\n        var factor = new Symbol(1);\n        factor.group = P;\n        /*cheat a little*/\n\n        factor.value = x;\n        factor.power = new Symbol(ifactors[x]);\n        factors.symbols[x] = factor;\n      }\n\n      factors.updateHash();\n\n      if (n === 1) {\n        factors = new Symbol(n);\n      }\n      /*put back the sign*/\n\n\n      if (sign < 0) factors.negate();\n      return factors;\n    },\n\n    /**\n     * Uses trial division\n     * @param {Integer} n - the number being factored\n     * @param {object} factors -  the factors object\n     * @returns {object}\n     */\n    sfactor: function (n, factors) {\n      factors = factors || {};\n      var r = Math.floor(Math.sqrt(n));\n      var lcprime = PRIMES[PRIMES.length - 1];\n      /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n\n      /*takes too long*/\n\n      if (r > lcprime && n < 1e6) generatePrimes(r);\n      var l = PRIMES.length;\n\n      for (var i = 0; i < l; i++) {\n        var prime = PRIMES[i];\n        /*trial division*/\n\n        while (n % prime === 0) {\n          n = n / prime;\n          factors[prime] = (factors[prime] || 0) + 1;\n        }\n      }\n\n      if (n > 1) factors[n] = 1;\n      return factors;\n    },\n\n    /**\n     * Pollard's rho\n     * @param {Integer} n\n     * @returns {object}\n     */\n    ifactor: function (n) {\n      n = String(n);\n      if (n === '0') return {\n        '0': 1\n      };\n      n = new bigInt(n);\n      /*convert to bigInt for safety*/\n\n      var sign = n.sign ? -1 : 1;\n      n = n.abs();\n      var factors = {};\n      /*factor object being returned.*/\n\n      if (n.lt('65536')) {\n        /*less than 2^16 just use trial division*/\n        factors = Math2.sfactor(n, factors);\n      } else {\n        var add = function (e) {\n          if (!e.isPrime()) {\n            factors = Math2.sfactor(e, factors);\n          } else factors[e] = (factors[e] || 0) + 1;\n        };\n\n        while (!n.abs().equals(1)) {\n          if (n.isPrime()) {\n            add(n);\n            break;\n          } else {\n            function rho(c) {\n              var xf = new bigInt(c),\n                  cz = 2,\n                  x = new bigInt(c),\n                  factor = new bigInt(1);\n\n              while (factor.equals(1)) {\n                for (var i = 0; i <= cz && factor.equals(1); i++) {\n                  x = x.pow(2).add(1).mod(n);\n                  factor = bigInt.gcd(x.minus(xf).abs(), n);\n                }\n\n                cz = cz * 2;\n                xf = x;\n              }\n\n              if (factor.equals(n)) {\n                return rho(c + 1);\n              }\n\n              return factor;\n            }\n\n            var factor = rho(2);\n            add(factor);\n            /*divide out the factor*/\n\n            n = n.divide(factor);\n          }\n        }\n      }\n      /*put the sign back*/\n\n\n      if (sign === -1) {\n        var sm = arrayMin(keys(factors));\n        /*/get the smallest number*/\n\n        factors['-' + sm] = factors[sm];\n        delete factors[sm];\n      }\n\n      return factors;\n    },\n    //factors a number into rectangular box. If sides are primes that this will be\n    //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n    boxfactor: function (n, max) {\n      max = max || 200; //stop after this number of iterations\n\n      var c,\n          r,\n          d = Math.floor(5 / 12 * n),\n          //the divisor\n      i = 0,\n          //number of iterations\n      safety = false;\n\n      while (true) {\n        c = Math.floor(n / d);\n        r = n % d;\n        if (r === 0) break; //we're done\n\n        if (safety) return [n, 1];\n        d = Math.max(r, d - r);\n        i++;\n        safety = i > max;\n      }\n\n      return [c, d, i];\n    },\n    fib: function (n) {\n      var sign = Math.sign(n);\n      n = Math.abs(n);\n      sign = even(n) ? sign : Math.abs(sign);\n      var a = 0,\n          b = 1,\n          f = 1;\n\n      for (var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n      }\n\n      return f * sign;\n    },\n    mod: function (x, y) {\n      return x % y;\n    },\n    //http://mathworld.wolfram.com/IntegerPart.html\n    integer_part: function (x) {\n      var sign = Math.sign(x);\n      return sign * Math.floor(Math.abs(x));\n    },\n    simpson: function (f, a, b, step) {\n      var get_value = function (f, x, side) {\n        var v = f(x);\n        var d = 0.000000000001;\n\n        if (isNaN(v)) {\n          v = f(side === 1 ? x + d : x - d);\n        }\n\n        return v;\n      };\n\n      step = step || 0.0001; //calculate the number of intervals\n\n      var n = Math.abs(Math.floor((b - a) / step)); //simpson's rule requires an even number of intervals. If it's not then add 1\n\n      if (n % 2 !== 0) n++; //get the interval size\n\n      var dx = (b - a) / n; //get x0\n\n      var retval = get_value(f, a, 1); //get the middle part 4x1+2x2+4x3 ...\n      //but first set a flag to see if it's even or odd. \n      //The first one is odd so we start there\n\n      var even = false; //get x1\n\n      var xi = a + dx; //the coefficient\n\n      var c, k; //https://en.wikipedia.org/wiki/Simpson%27s_rule\n\n      for (var i = 1; i < n; i++) {\n        c = even ? 2 : 4;\n        k = c * get_value(f, xi, 1);\n        retval += k; //flip the even flag\n\n        even = !even; //increment xi\n\n        xi += dx;\n      } //add xn\n\n\n      return (retval + get_value(f, xi, 2)) * (dx / 3);\n    },\n\n    /**\n     * https://github.com/scijs/integrate-adaptive-simpson\n     * @param {Function} f - the function being integrated\n     * @param {Number} a - lower bound\n     * @param {Number} b - upper bound\n     * @param {Number} tol - step width\n     * @param {Number} maxdepth\n     * @returns {Number}\n     */\n    num_integrate: function (f, a, b, tol, maxdepth) {\n      if (maxdepth < 0) throw new Error('max depth cannot be negative');\n      /* This algorithm adapted from pseudocode in:*/\n\n      /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n\n      function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n        if (state.nanEncountered) {\n          return NaN;\n        }\n\n        var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n        h = b - a;\n        f1 = f(a + h * 0.25);\n        f2 = f(b - h * 0.25);\n        /* Simple check for NaN:*/\n\n        if (isNaN(f1)) {\n          state.nanEncountered = true;\n          return;\n        }\n        /* Simple check for NaN:*/\n\n\n        if (isNaN(f2)) {\n          state.nanEncountered = true;\n          return;\n        }\n\n        sl = h * (fa + 4 * f1 + fm) / 12;\n        sr = h * (fm + 4 * f2 + fb) / 12;\n        s2 = sl + sr;\n        err = (s2 - V0) / 15;\n\n        if (state.maxDepthCount > 1000 * maxdepth) {\n          return;\n        }\n\n        if (depth > maxdepth) {\n          state.maxDepthCount++;\n          return s2 + err;\n        } else if (Math.abs(err) < tol) {\n          return s2 + err;\n        } else {\n          m = a + h * 0.5;\n          V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n          if (isNaN(V1)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n\n          V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n          if (isNaN(V2)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n\n          return V1 + V2;\n        }\n      }\n\n      function integrate(f, a, b, tol, maxdepth) {\n        var state = {\n          maxDepthCount: 0,\n          nanEncountered: false\n        };\n\n        if (tol === undefined) {\n          tol = 1e-9;\n        }\n\n        if (maxdepth === undefined) {\n          /*Issue #458 - This was lowered because of performance issues. */\n\n          /*This was suspected from before but is now confirmed with this issue*/\n          maxdepth = 45;\n        }\n\n        var fa = f(a);\n        var fm = f(0.5 * (a + b));\n        var fb = f(b);\n        var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n        var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n        if (state.maxDepthCount > 0) {\n          warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n        }\n\n        if (state.nanEncountered) {\n          throw new Error('Function does not converge over interval!');\n        }\n\n        return result;\n      }\n\n      var retval;\n\n      try {\n        retval = integrate(f, a, b, tol, maxdepth);\n      } catch (e) {\n        /*fallback to non-adaptive*/\n        return Math2.simpson(f, a, b);\n      }\n\n      return nround(retval, 12);\n    },\n    //https://en.wikipedia.org/wiki/Trigonometric_integral\n    //CosineIntegral\n    Ci: function (x) {\n      var n = 20,\n\n      /*roughly Euler–Mascheroni*/\n      g = 0.5772156649015329,\n          sum = 0;\n\n      for (var i = 1; i < n; i++) {\n        /*cache 2n*/\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2) / (n2 * Math2.factorial(n2));\n      }\n\n      return Math.log(x) + g + sum;\n    },\n\n    /*SineIntegral*/\n    Si: function (x) {\n      var n = 20,\n          sum = 0;\n\n      for (var i = 0; i < n; i++) {\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2 + 1) / ((n2 + 1) * Math2.factorial(n2 + 1));\n      }\n\n      return sum;\n    },\n\n    /*ExponentialIntegral*/\n    Ei: function (x) {\n      if (Number(x) === 0) return -Infinity;\n      var n = 30,\n          g = 0.5772156649015328606,\n\n      /*roughly Euler–Mascheroni*/\n      sum = 0;\n\n      for (var i = 1; i < n; i++) {\n        sum += Math.pow(x, i) / (i * Math2.factorial(i));\n      }\n\n      return g + Math.abs(Math.log(x)) + sum;\n    },\n\n    /*Hyperbolic Sine Integral*/\n\n    /*http://mathworld.wolfram.com/Shi.html*/\n    Shi: function (x) {\n      var n = 30,\n          sum = 0,\n          k,\n          t;\n\n      for (var i = 0; i < n; i++) {\n        k = 2 * i;\n        t = k + 1;\n        sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n      }\n\n      return sum;\n    },\n\n    /*the cosine integral function*/\n    Chi: function (x) {\n      var dx, g, f;\n      dx = 0.001;\n      g = 0.5772156649015328606;\n\n      f = function (t) {\n        return (Math.cosh(t) - 1) / t;\n      };\n\n      return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n    },\n\n    /*the log integral*/\n    Li: function (x) {\n      return Math2.Ei(Math2.bigLog(x));\n    },\n\n    /*the gamma incomplete function*/\n    gamma_incomplete: function (n, x) {\n      var t = n - 1,\n          sum = 0,\n          x = x || 0;\n\n      for (var i = 0; i < t; i++) {\n        sum += Math.pow(x, i) / Math2.factorial(i);\n      }\n\n      return Math2.factorial(t) * Math.exp(-x) * sum;\n    },\n\n    /*\n     * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\n     * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\n     * if x > 0 then 1\n     * if x == 0 then 1/2\n     * if x < 0 then 0\n     */\n    step: function (x) {\n      if (x > 0) return 1;\n      if (x < 0) return 0;\n      return 0.5;\n    },\n\n    /*\n     * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n     * Specification : http://mathworld.wolfram.com/RectangleFunction.html\n     * if |x| > 1/2 then 0\n     * if |x| == 1/2 then 1/2\n     * if |x| < 1/2 then 1\n     */\n    rect: function (x) {\n      var x = Math.abs(x);\n      if (x === 0.5) return x;\n      if (x > 0.5) return 0;\n      return 1;\n    },\n\n    /*\n     * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\n     * Specification : http://mathworld.wolfram.com/SincFunction.html\n     * if x == 0 then 1\n     * otherwise sin(x)/x\n     */\n    sinc: function (x) {\n      if (x.equals(0)) return 1;\n      return Math.sin(x) / x;\n    },\n\n    /*\n     * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n     * Specification : http://mathworld.wolfram.com/TriangleFunction.html\n     * if |x| >= 1 then 0\n     * if |x| < then 1-|x|\n     */\n    tri: function (x) {\n      x = Math.abs(x);\n      if (x >= 1) return 0;\n      return 1 - x;\n    },\n    //https://en.wikipedia.org/wiki/Nth_root_algorithm\n    nthroot: function (A, n) {\n      /*make sure the input is of type Frac*/\n      if (!(A instanceof Frac)) A = new Frac(A.toString());\n      if (!(n instanceof Frac)) n = new Frac(n.toString());\n      if (n.equals(1)) return A;\n      /*begin algorithm*/\n\n      var xk = A.divide(new Frac(2));\n      /*x0*/\n\n      var e = new Frac(1e-15);\n      var dk, dk0, d0;\n      var a = n.clone().invert(),\n          b = n.subtract(new Frac(1));\n\n      do {\n        var powb = Math2.bigpow(xk, b);\n        var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n        dk = Frac.create(dk_dec);\n        if (d0) break;\n        xk = xk.add(dk);\n        /*check to see if there's no change from the last xk*/\n\n        var dk_dec = dk.toDecimal();\n        d0 = dk0 ? dk0 === dk_dec : false;\n        dk0 = dk_dec;\n      } while (dk.abs().gte(e));\n\n      return xk;\n    },\n\n    /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n\n    /*Just the square root function but big :)*/\n    sqrt: function (n) {\n      if (!(n instanceof Frac)) n = new Frac(n);\n      var xn, d, ld, same_delta;\n      var c = 0;\n      /*counter*/\n\n      var done = false;\n      var delta = new Frac(1e-20);\n      xn = n.divide(new Frac(2));\n      var safety = 1000;\n\n      do {\n        /*break if we're not converging*/\n        if (c > safety) throw new Error('Unable to calculate square root for ' + n);\n        xn = xn.add(n.divide(xn)).divide(new Frac(2));\n        xn = new Frac(xn.decimal(30));\n        /*get the difference from the true square*/\n\n        d = n.subtract(xn.multiply(xn));\n        /*if the square of the calculated number is close enough to the number*/\n\n        /*we're getting the square root or the last delta was the same as the new delta*/\n\n        /*then we're done*/\n\n        same_delta = ld ? ld.equals(d) : false;\n        if (d.clone().abs().lessThan(delta) || same_delta) done = true;\n        /*store the calculated delta*/\n\n        ld = d;\n        c++;\n        /*increase the counter*/\n      } while (!done);\n\n      return xn;\n    }\n  }; //link the Math2 object to Settings.FUNCTION_MODULES\n\n  Settings.FUNCTION_MODULES.push(Math2);\n  reserveNames(Math2); //reserve the names in Math2\n  //Polyfills ==================================================================== \n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n\n  Math.sign = Math.sign || function (x) {\n    x = +x; // convert to a number\n\n    if (x === 0 || isNaN(x)) {\n      return x;\n    }\n\n    return x > 0 ? 1 : -1;\n  };\n\n  Math.cosh = Math.cosh || function (x) {\n    var y = Math.exp(x);\n    return (y + 1 / y) / 2;\n  };\n\n  Math.sech = Math.sech || function (x) {\n    return 1 / Math.cosh(x);\n  };\n\n  Math.csch = Math.csch || function (x) {\n    return 1 / Math.sinh(x);\n  };\n\n  Math.coth = Math.coth || function (x) {\n    return 1 / Math.tanh(x);\n  };\n\n  Math.sinh = Math.sinh || function (x) {\n    var y = Math.exp(x);\n    return (y - 1 / y) / 2;\n  };\n\n  Math.tanh = Math.tanh || function (x) {\n    if (x === Infinity) {\n      return 1;\n    } else if (x === -Infinity) {\n      return -1;\n    } else {\n      var y = Math.exp(2 * x);\n      return (y - 1) / (y + 1);\n    }\n  };\n\n  Math.asinh = Math.asinh || function (x) {\n    if (x === -Infinity) {\n      return x;\n    } else {\n      return Math.log(x + Math.sqrt(x * x + 1));\n    }\n  };\n\n  Math.acosh = Math.acosh || function (x) {\n    return Math.log(x + Math.sqrt(x * x - 1));\n  };\n\n  Math.atanh = Math.atanh || function (x) {\n    return Math.log((1 + x) / (1 - x)) / 2;\n  };\n\n  Math.log10 = Math.log10 || function (x) {\n    return Math.log(x) * Math.LOG10E;\n  };\n\n  Math.trunc = Math.trunc || function (x) {\n    if (isNaN(x)) {\n      return NaN;\n    }\n\n    if (x > 0) {\n      return Math.floor(x);\n    }\n\n    return Math.ceil(x);\n  }; //Global functions ============================================================= \n\n  /**\n   * This method will return a hash or a text representation of a Symbol, Matrix, or Vector. \n   * If all else fails it *assumes* the object has a toString method and will call that.\n   * \n   * @param {Object} obj\n   * @param {String} option get is as a hash \n   * @param {int} useGroup\n   * @returns {String}\n   */\n\n\n  function text(obj, option, useGroup) {\n    var asHash = option === 'hash',\n        //whether to wrap numbers in brackets\n    wrapCondition = undefined,\n        opt = asHash ? undefined : option;\n\n    function toString(obj) {\n      switch (option) {\n        case 'decimals':\n        case 'decimal':\n          wrapCondition = wrapCondition || function (str) {\n            return false;\n          };\n\n          return obj.valueOf();\n\n        case 'recurring':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf(\"'\") !== -1;\n          };\n\n          var str = obj.toString(); //verify that the string is actually a fraction\n\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n          var parts = frac[0].split('/');\n          var negative = false;\n          var m = Number(parts[0]);\n\n          if (m < 0) {\n            m = -m;\n            negative = true;\n          }\n\n          var n = Number(parts[1]);\n          if (!n) n = 1; //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n\n          var quotient = Math.floor(m / n),\n              c = 10 * (m - quotient * n);\n          quotient = quotient.toString() + \".\";\n\n          while (c && c < n) {\n            c *= 10;\n            quotient += \"0\";\n          }\n\n          var digits = \"\",\n              passed = [],\n              i = 0;\n\n          while (true) {\n            if (typeof passed[c] !== 'undefined') {\n              var prefix = digits.slice(0, passed[c]),\n                  cycle = digits.slice(passed[c]),\n                  result = quotient + prefix + \"'\" + cycle + \"'\";\n              return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n            }\n\n            var q = Math.floor(c / n),\n                r = c - q * n;\n            passed[c] = i;\n            digits += q.toString();\n            i += 1;\n            c = 10 * r;\n          }\n\n        case 'mixed':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n\n          var str = obj.toString(); //verify that the string is actually a fraction\n\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n          var parts = frac[0].split('/');\n          var numer = new bigInt(parts[0]);\n          var denom = new bigInt(parts[1]);\n          if (denom.equals(0)) denom = new bigInt(1); //return the quotient plus the remainder\n\n          var divmod = numer.divmod(denom);\n          var quotient = divmod.quotient;\n          var remainder = divmod.remainder;\n          var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n          return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : remainder.toString() + '/' + parts[1]);\n\n        default:\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n\n          return obj.toString();\n      }\n    } //if the object is a symbol\n\n\n    if (isSymbol(obj)) {\n      var multiplier = '',\n          power = '',\n          sign = '',\n          group = obj.group || useGroup,\n          value = obj.value; //if the value is to be used as a hash then the power and multiplier need to be suppressed\n\n      if (!asHash) {\n        //use asDecimal to get the object back as a decimal\n        var om = toString(obj.multiplier);\n\n        if (om == '-1') {\n          sign = '-';\n          om = '1';\n        } //only add the multiplier if it's not 1\n\n\n        if (om != '1') multiplier = om; //use asDecimal to get the object back as a decimal\n\n        var p = obj.power ? toString(obj.power) : ''; //only add the multiplier \n\n        if (p != '1') {\n          //is it a symbol\n          if (isSymbol(p)) {\n            power = text(p, opt);\n          } else {\n            power = p;\n          }\n        }\n      }\n\n      switch (group) {\n        case N:\n          multiplier = ''; //if it's numerical then all we need is the multiplier\n\n          value = obj.multiplier == '-1' ? '1' : toString(obj.multiplier);\n          power = '';\n          break;\n\n        case PL:\n          value = obj.collectSymbols(text, opt).join('+').replace(/\\+\\-/g, '-');\n          break;\n\n        case CP:\n          value = obj.collectSymbols(text, opt).join('+').replace(/\\+\\-/g, '-');\n          break;\n\n        case CB:\n          value = obj.collectSymbols(function (symbol) {\n            var g = symbol.group; //both groups will already be in brackets if their power is greater than 1\n            //so skip it.\n\n            if ((g === PL || g === CP) && symbol.power.equals(1) && symbol.multiplier.equals(1)) {\n              return inBrackets(text(symbol, opt));\n            }\n\n            return text(symbol, opt);\n          }).join('*');\n          break;\n\n        case EX:\n          var pg = obj.previousGroup,\n              pwg = obj.power.group; //PL are the exception. It's simpler to just collect and set the value\n\n          if (pg === PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n\n          if (!(pg === N || pg === S || pg === FN) && !asHash) {\n            value = inBrackets(value);\n          }\n\n          if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n            power = inBrackets(power);\n          }\n\n          break;\n      }\n\n      if (group === FN) {\n        value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n          return text(symbol, opt);\n        }).join(','));\n      } //TODO: Needs to be more efficient. Maybe. \n\n\n      if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n        var a = text(obj.args[0]);\n        var b = text(obj.args[1]);\n        if (obj.args[0].isComposite()) //preserve the brackets\n          a = inBrackets(a);\n        if (obj.args[1].isComposite()) //preserve the brackets\n          b = inBrackets(b);\n        value = a + CUSTOM_OPERATORS[obj.fname] + b;\n      } //wrap the power since / is less than ^\n      //TODO: introduce method call isSimple\n\n\n      if (power && group !== EX && wrapCondition(power)) {\n        power = inBrackets(power);\n      } //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n      //by a multiplier and have to be in brackets to preserve the order of precedence\n\n\n      if ((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-') || (group === CB || group === CP || group === PL) && power && power != '1' || !asHash && group === P && value == -1 || obj.fname === PARENTHESIS) {\n        value = inBrackets(value);\n      }\n\n      var c = sign + multiplier;\n      if (multiplier && wrapCondition(multiplier)) c = inBrackets(c);\n      if (power < 0) power = inBrackets(power);\n      if (multiplier) c = c + '*';\n      if (power) power = Settings.POWER_OPERATOR + power; //this needs serious rethinking. Must fix\n\n      if (group === EX && value.charAt(0) === '-') value = inBrackets(value);\n      var cv = c + value;\n      if (obj.parens) cv = inBrackets(cv);\n      return cv + power;\n    } else if (isVector(obj)) {\n      var l = obj.elements.length,\n          c = [];\n\n      for (var i = 0; i < l; i++) c.push(obj.elements[i].text(option));\n\n      return '[' + c.join(',') + ']';\n    } else {\n      try {\n        return obj.toString();\n      } catch (e) {\n        return '';\n      }\n    }\n  }\n  /**\n   * Calculates prime factors for a number\n   * @param {int} num\n   * @returns {Array}\n   */\n\n\n  function primeFactors(num) {\n    if (isPrime(num)) return [num];\n    var l = num,\n        i = 1,\n        factors = [],\n        epsilon = 2.2204460492503130808472633361816E-16;\n\n    while (i < l) {\n      var quotient = num / i;\n      var whole = Math.floor(quotient);\n      var remainder = quotient - whole;\n\n      if (remainder <= epsilon && i > 1) {\n        if (PRIMES.indexOf(i) !== -1) PRIMES[i] = i;\n        factors.push(i);\n        l = whole;\n      }\n\n      i++;\n    }\n\n    return factors.sort(function (a, b) {\n      return a - b;\n    });\n  }\n\n  ; //Expression ===================================================================   \n\n  /** \n   * This is what nerdamer returns. It's sort of a wrapper around the symbol class and \n   * provides the user with some useful functions. If you want to provide the user with extra\n   * library functions then add them to this class's prototype.\n   * @param {Symbol} symbol\n   * @returns {Expression} wraps around the Symbol class\n   */\n\n  function Expression(symbol) {\n    //we don't want arrays wrapped\n    this.symbol = symbol;\n  }\n  /**\n   * Returns stored expression at index. For first index use 1 not 0.\n   * @param {bool} asType  \n   * @param {Integer} expression_number \n   */\n\n\n  Expression.getExpression = function (expression_number, asType) {\n    if (expression_number === 'last' || !expression_number) expression_number = EXPRESSIONS.length;\n    if (expression_number === 'first') expression_number = 1;\n    var index = expression_number - 1,\n        expression = EXPRESSIONS[index],\n        retval = expression ? new Expression(expression) : expression;\n    return retval;\n  };\n\n  Expression.prototype = {\n    /**\n     * Returns the text representation of the expression\n     * @param {String} opt - option of formatting numbers\n     * @param {Number} n The number of significant figures\n     * @returns {String}\n     */\n    text: function (opt, n) {\n      var round = typeof n === 'undefined';\n      n = n || 24;\n      opt = opt || 'decimals';\n      if (this.symbol.text_) return this.symbol.text_(opt);\n\n      if (this.symbol.group === N && (opt === 'decimals' || opt === 'decimal')) {\n        var txt = this.symbol.multiplier.toDecimal(n); //round as not to have a breaking change but only do so if no significant figures were specified\n\n        if (round && !isInt(txt)) txt = nround(txt, 19).toString();\n        return txt;\n      }\n\n      return text(this.symbol, opt);\n    },\n\n    /**\n     * Returns the latex representation of the expression\n     * @param {String} option - option for formatting numbers\n     * @returns {String}\n     */\n    latex: function (option) {\n      if (this.symbol.latex) return this.symbol.latex(option);\n      return LaTeX.latex(this.symbol, option);\n    },\n    valueOf: function () {\n      return this.symbol.valueOf();\n    },\n\n    /**\n     * Evaluates the expression and tries to reduce it to a number if possible.\n     * If an argument is given in the form of %{integer} it will evaluate that expression.\n     * Other than that it will just use it's own text and reparse\n     * @returns {Expression}\n     */\n    evaluate: function () {\n      var first_arg = arguments[0],\n          expression,\n          idx = 1; //Enable getting of expressions using the % so for example %1 should get the first expression\n\n      if (typeof first_arg === 'string') {\n        expression = first_arg.charAt(0) === '%' ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n      } else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n        expression = first_arg.text();\n      } else {\n        expression = this.symbol.text();\n        idx--;\n      }\n\n      var subs = arguments[idx] || {};\n      return new Expression(block('PARSE2NUMBER', function () {\n        return _.parse(expression, subs);\n      }, true));\n    },\n\n    /**\n     * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of \n     * the default alphabetical order\n     * @param vars {Array}\n     */\n    buildFunction: function (vars) {\n      return Build.build(this.symbol, vars);\n    },\n\n    /**\n     * Checks to see if the expression is just a plain old number\n     * @returns {boolean}\n     */\n    isNumber: function () {\n      return isNumericSymbol(this.symbol);\n    },\n\n    /**\n     * Checks to see if the expression is infinity\n     * @returns {boolean}\n     */\n    isInfinity: function () {\n      return Math.abs(this.symbol.multiplier) === Infinity;\n    },\n\n    /**\n     * Returns all the variables in the expression\n     * @returns {Array}\n     */\n    variables: function () {\n      return variables(this.symbol);\n    },\n    toString: function () {\n      try {\n        if (isArray(this.symbol)) return '[' + this.symbol.toString() + ']';\n        return this.symbol.toString();\n      } catch (e) {\n        return '';\n      }\n    },\n    //forces the symbol to be returned as a decimal\n    toDecimal: function (prec) {\n      Settings.precision = prec;\n      var dec = text(this.symbol, 'decimals');\n      Settings.precision = undefined;\n      return dec;\n    },\n    //checks to see if the expression is a fraction\n    isFraction: function () {\n      return isFraction(this.symbol);\n    },\n    //checks to see if the symbol is a multivariate polynomial\n    isPolynomial: function () {\n      return this.symbol.isPoly();\n    },\n    //performs a substitution\n    sub: function (symbol, for_symbol) {\n      return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n    },\n    operation: function (otype, symbol) {\n      if (isExpression(symbol)) symbol = symbol.symbol;else if (!isSymbol(symbol)) symbol = _.parse(symbol);\n      return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n    },\n    add: function (symbol) {\n      return this.operation('add', symbol);\n    },\n    subtract: function (symbol) {\n      return this.operation('subtract', symbol);\n    },\n    multiply: function (symbol) {\n      return this.operation('multiply', symbol);\n    },\n    divide: function (symbol) {\n      return this.operation('divide', symbol);\n    },\n    pow: function (symbol) {\n      return this.operation('pow', symbol);\n    },\n    expand: function () {\n      return new Expression(_.expand(this.symbol));\n    },\n    each: function (callback, i) {\n      if (this.symbol.each) this.symbol.each(callback, i);else if (isArray(this.symbol)) {\n        for (var i = 0; i < this.symbol.length; i++) callback.call(this.symbol, this.symbol[i], i);\n      } else callback.call(this.symbol);\n    },\n    eq: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = _.subtract(this.symbol.clone(), value);\n\n        return d.equals(0);\n      } catch (e) {\n        return false;\n      }\n\n      ;\n    },\n    lt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.lessThan(0);\n      } catch (e) {\n        return false;\n      }\n\n      ;\n    },\n    gt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.greaterThan(0);\n      } catch (e) {\n        return false;\n      }\n\n      ;\n    },\n    gte: function (value) {\n      return this.gt(value) || this.eq(value);\n    },\n    lte: function (value) {\n      return this.lt(value) || this.eq(value);\n    },\n    numerator: function () {\n      return new Expression(this.symbol.getNum());\n    },\n    denominator: function () {\n      return new Expression(this.symbol.getDenom());\n    },\n    hasFunction: function (f) {\n      return this.symbol.containsFunction(f);\n    },\n    contains: function (variable) {\n      return this.symbol.contains(variable);\n    }\n  }; //Aliases\n\n  Expression.prototype.toTeX = Expression.prototype.latex; //Scientific ===================================================================  \n\n  function Scientific(num) {\n    if (!(this instanceof Scientific)) return new Scientific(num);\n    num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n    //remove the sign\n\n    if (num.startsWith('-')) {\n      this.sign = -1; //remove the sign\n\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n\n    if (Scientific.isScientific(num)) {\n      this.fromScientific(num);\n    } else {\n      this.convert(num);\n    }\n\n    return this;\n  }\n\n  Scientific.prototype = {\n    fromScientific: function (num) {\n      var parts = String(num).toLowerCase().split('e');\n      this.coeff = parts[0];\n      this.exponent = parts[1];\n      return this;\n    },\n    convert: function (num) {\n      //get wholes and decimals\n      var parts = num.split('.'); //make zero go away\n\n      var w = parts[0] || '';\n      var d = parts[1] || ''; //convert zero to blank strings\n\n      w = Scientific.removeLeadingZeroes(w);\n      d = Scientific.removeTrailingZeroes(d); //find the location of the decimal place which is right after the wholes\n\n      var dot_location = w.length; //add them together so we can move the dot\n\n      var n = w + d; //find the next number\n\n      var zeroes = Scientific.leadingZeroes(n).length; //set the exponent\n\n      this.exponent = dot_location - (zeroes + 1); //set the coeff but first remove leading zeroes\n\n      var coeff = Scientific.removeLeadingZeroes(n);\n      this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n      return this;\n    },\n    round: function (num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n\n      if (num === 0) n.coeff = n.coeff.charAt(0);else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1); //get the next two\n\n        var next_two = this.coeff.substring(num + 1, num + 3); //the extra digit\n\n        var ed = next_two.charAt(0);\n        if (next_two.charAt(1) > 4) ed++;\n        n.coeff = rounded + ed;\n      }\n      return n;\n    },\n    copy: function () {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    },\n    toString: function (n) {\n      var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n      return (this.sign === -1 ? '-' : '') + coeff + 'e' + this.exponent;\n    }\n  };\n\n  Scientific.isScientific = function (num) {\n    return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n  };\n\n  Scientific.leadingZeroes = function (num) {\n    var match = num.match(/^(0*).*$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeLeadingZeroes = function (num) {\n    var match = num.match(/^0*(.*)$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeTrailingZeroes = function (num) {\n    var match = num.match(/0*$/);\n    return match ? num.substring(0, num.length - match[0].length) : '';\n  };\n\n  Scientific.round = function (c, n) {\n    var coeff = nround(c, n);\n    var m = String(coeff).split('.').pop();\n    var d = n - m.length; //if we're asking for more significant figures\n\n    if (d > 0) {\n      coeff = coeff + new Array(d + 1).join(0);\n    }\n\n    return coeff;\n  }; //Scientific ===================================================================\n\n  /*\n   * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n   * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n   */\n\n\n  function Scientific(num) {\n    if (!(this instanceof Scientific)) return new Scientific(num);\n    num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n    //remove the sign\n\n    if (num.startsWith('-')) {\n      this.sign = -1; //remove the sign\n\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n\n    if (Scientific.isScientific(num)) {\n      this.fromScientific(num);\n    } else {\n      this.convert(num);\n    }\n\n    return this;\n  }\n\n  Scientific.prototype = {\n    fromScientific: function (num) {\n      var parts = String(num).toLowerCase().split('e');\n      this.coeff = parts[0];\n      this.exponent = parts[1];\n      return this;\n    },\n    convert: function (num) {\n      //get wholes and decimals\n      var parts = num.split('.'); //make zero go away\n\n      var w = parts[0] || '';\n      var d = parts[1] || ''; //convert zero to blank strings\n\n      w = Scientific.removeLeadingZeroes(w);\n      d = Scientific.removeTrailingZeroes(d); //find the location of the decimal place which is right after the wholes\n\n      var dot_location = w.length; //add them together so we can move the dot\n\n      var n = w + d; //find the next number\n\n      var zeroes = Scientific.leadingZeroes(n).length; //set the exponent\n\n      this.exponent = dot_location - (zeroes + 1); //set the coeff but first remove leading zeroes\n\n      var coeff = Scientific.removeLeadingZeroes(n);\n      this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n      return this;\n    },\n    round: function (num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n\n      if (num === 0) n.coeff = n.coeff.charAt(0);else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1); //get the next two\n\n        var next_two = this.coeff.substring(num + 1, num + 3); //the extra digit\n\n        var ed = next_two.charAt(0);\n        if (next_two.charAt(1) > 4) ed++;\n        n.coeff = rounded + ed;\n      }\n      return n;\n    },\n    copy: function () {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    },\n    toString: function (n) {\n      var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n      return (this.sign === -1 ? '-' : '') + coeff + 'e' + this.exponent;\n    }\n  };\n\n  Scientific.isScientific = function (num) {\n    return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n  };\n\n  Scientific.leadingZeroes = function (num) {\n    var match = num.match(/^(0*).*$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeLeadingZeroes = function (num) {\n    var match = num.match(/^0*(.*)$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeTrailingZeroes = function (num) {\n    var match = num.match(/0*$/);\n    return match ? num.substring(0, num.length - match[0].length) : '';\n  }; //Frac =========================================================================    \n\n\n  function Frac(n) {\n    if (n instanceof Frac) return n;\n    if (n === undefined) return this;\n\n    try {\n      if (isInt(n)) {\n        try {\n          this.num = bigInt(n);\n          this.den = bigInt(1);\n        } catch (e) {\n          return Frac.simple(n);\n        }\n      } else {\n        var frac = Fraction.convert(n);\n        this.num = new bigInt(frac[0]);\n        this.den = new bigInt(frac[1]);\n      }\n    } catch (e) {\n      return Frac.simple(n);\n    }\n  } //safe to use with negative numbers or other types\n\n\n  Frac.create = function (n) {\n    if (n instanceof Frac) return n;\n    n = n.toString();\n    var is_neg = n.charAt(0) === '-'; //check if it's negative\n\n    if (is_neg) n = n.substr(1, n.length - 1); //remove the sign\n\n    var frac = new Frac(n); //put the sign back\n\n    if (is_neg) frac.negate();\n    return frac;\n  };\n\n  Frac.isFrac = function (o) {\n    return o instanceof Frac;\n  };\n\n  Frac.quick = function (n, d) {\n    var frac = new Frac();\n    frac.num = new bigInt(n);\n    frac.den = new bigInt(d);\n    return frac;\n  };\n\n  Frac.simple = function (n) {\n    var nstr = String(scientificToDecimal(n)),\n        m_dc = nstr.split('.'),\n        num = m_dc.join(''),\n        den = 1,\n        l = (m_dc[1] || '').length;\n\n    for (var i = 0; i < l; i++) den += '0';\n\n    var frac = Frac.quick(num, den);\n    return frac.simplify();\n  };\n\n  Frac.prototype = {\n    multiply: function (m) {\n      if (this.isOne()) {\n        return m.clone();\n      }\n\n      if (m.isOne()) {\n        return this.clone();\n      }\n\n      var c = this.clone();\n      c.num = c.num.multiply(m.num);\n      c.den = c.den.multiply(m.den);\n      return c.simplify();\n    },\n    divide: function (m) {\n      if (m.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n      return this.clone().multiply(m.clone().invert()).simplify();\n    },\n    subtract: function (m) {\n      return this.clone().add(m.clone().neg());\n    },\n    neg: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    add: function (m) {\n      var n1 = this.den,\n          n2 = m.den,\n          c = this.clone();\n      var a = c.num,\n          b = m.num;\n\n      if (n1.equals(n2)) {\n        c.num = a.add(b);\n      } else {\n        c.num = a.multiply(n2).add(b.multiply(n1));\n        c.den = n1.multiply(n2);\n      }\n\n      return c.simplify();\n    },\n    mod: function (m) {\n      var a = this.clone(),\n          b = m.clone(); //make their denominators even and return the mod of their numerators\n\n      a.num = a.num.multiply(b.den);\n      a.den = a.den.multiply(b.den);\n      b.num = b.num.multiply(this.den);\n      b.den = b.den.multiply(this.den);\n      a.num = a.num.mod(b.num);\n      return a.simplify();\n    },\n    simplify: function () {\n      var gcd = bigInt.gcd(this.num, this.den);\n      this.num = this.num.divide(gcd);\n      this.den = this.den.divide(gcd);\n      return this;\n    },\n    clone: function () {\n      var m = new Frac();\n      m.num = new bigInt(this.num);\n      m.den = new bigInt(this.den);\n      return m;\n    },\n    decimal: function (prec) {\n      var sign = this.num.isNegative() ? '-' : '';\n\n      if (this.num.equals(this.den)) {\n        return '1';\n      } //go plus one for rounding\n\n\n      prec = prec || Settings.PRECISION;\n      prec++;\n      var narr = [],\n          n = this.num.abs(),\n          d = this.den;\n\n      for (var i = 0; i < prec; i++) {\n        var w = n.divide(d),\n            //divide out whole\n        r = n.subtract(w.multiply(d)); //get remainder\n\n        narr.push(w);\n        if (r.equals(0)) break;\n        n = r.times(10); //shift one dec place\n      }\n\n      var whole = narr.shift();\n\n      if (narr.length === 0) {\n        return sign + whole.toString();\n      }\n\n      if (i === prec) {\n        var lt = []; //get the last two so we can round it\n\n        for (var i = 0; i < 2; i++) lt.unshift(narr.pop()); //put the last digit back by rounding the last two\n\n\n        narr.push(Math.round(lt.join('.')));\n      }\n\n      var dec = whole.toString() + '.' + narr.join('');\n      return sign + dec;\n    },\n    toDecimal: function (prec) {\n      if (prec || Settings.PRECISION) {\n        return this.decimal(prec);\n      } else return this.num / this.den;\n    },\n    qcompare: function (n) {\n      return [this.num.multiply(n.den), n.num.multiply(this.den)];\n    },\n    equals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].equals(q[1]);\n    },\n    absEquals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].abs().equals(q[1]);\n    },\n    //lazy check to be fixed. Sufficient for now but will cause future problems\n    greaterThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].gt(q[1]);\n    },\n    gte: function (n) {\n      return this.greaterThan(n) || this.equals(n);\n    },\n    lte: function (n) {\n      return this.lessThan(n) || this.equals(n);\n    },\n    lessThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].lt(q[1]);\n    },\n    isInteger: function () {\n      return this.den.equals(1);\n    },\n    negate: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    invert: function () {\n      var t = this.den; //why invert 0/1? It'll become 1/0 and that's a lie.\n\n      if (!this.num.equals(0)) {\n        var isnegative = this.num.isNegative();\n        this.den = this.num.abs();\n        this.num = t;\n        if (isnegative) this.num = this.num.multiply(-1);\n      }\n\n      return this;\n    },\n    isOne: function () {\n      return this.num.equals(1) && this.den.equals(1);\n    },\n    sign: function () {\n      return this.num.isNegative() ? -1 : 1;\n    },\n    abs: function () {\n      this.num = this.num.abs();\n      return this;\n    },\n    gcd: function (f) {\n      return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n    },\n    toString: function () {\n      return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n    },\n    valueOf: function () {\n      //            if(this.num == 24) throw new Error(999)\n      if (Settings.USE_BIG) return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n      return this.num / this.den;\n    },\n    isNegative: function () {\n      return this.toDecimal() < 0;\n    }\n  }; //Symbol =======================================================================\n\n  /**\n   * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group. \n   * All symbols except for \"numbers (group N)\" have a power. \n   * @class Primary data type for the Parser. \n   * @param {String} obj \n   * @returns {Symbol}\n   */\n\n  function Symbol(obj) {\n    var isInfinity = obj === 'Infinity'; //this enables the class to be instantiated without the new operator\n\n    if (!(this instanceof Symbol)) {\n      return new Symbol(obj);\n    }\n\n    ; //define numeric symbols\n\n    if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj)) {\n      this.group = N;\n      this.value = CONST_HASH;\n      this.multiplier = new Frac(obj);\n    } //define symbolic symbols\n    else {\n        this.group = S;\n        validateName(obj);\n        this.value = obj;\n        this.multiplier = new Frac(1);\n        this.imaginary = obj === Settings.IMAGINARY;\n        this.isInfinity = isInfinity;\n      } //As of 6.0.0 we switched to infinite precision so all objects have a power\n    //Although this is still redundant in constants, it simplifies the logic in\n    //other parts so we'll keep it\n\n\n    this.power = new Frac(1); // Added to silence the strict warning.\n\n    return this;\n  }\n  /**\n   * Returns vanilla imaginary symbol\n   * @returns {Symbol}\n   */\n\n\n  Symbol.imaginary = function () {\n    var s = new Symbol(Settings.IMAGINARY);\n    s.imaginary = true;\n    return s;\n  };\n  /**\n   * Return nerdamer's representation of Infinity\n   * @param {int} negative -1 to return negative infinity \n   * @returns {Symbol} \n   */\n\n\n  Symbol.infinity = function (negative) {\n    var v = new Symbol('Infinity');\n    if (negative === -1) v.negate();\n    return v;\n  };\n\n  Symbol.shell = function (group, value) {\n    var symbol = new Symbol(value);\n    symbol.group = group;\n    symbol.symbols = {};\n    symbol.length = 0;\n    return symbol;\n  }; //sqrt(x) -> x^(1/2)\n\n\n  Symbol.unwrapSQRT = function (symbol, all) {\n    var p = symbol.power;\n\n    if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n      var t = symbol.args[0].clone();\n      t.power = t.power.multiply(new Frac(1 / 2));\n      t.multiplier = t.multiplier.multiply(symbol.multiplier);\n      symbol = t;\n      if (all) symbol.power = p.multiply(new Frac(1 / 2));\n    }\n\n    return symbol;\n  };\n\n  Symbol.hyp = function (a, b) {\n    a = a || new Symbol(0);\n    b = b || new Symbol(0);\n    return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n  }; //converts to polar form array\n\n\n  Symbol.toPolarFormArray = function (symbol) {\n    var re, im, r, theta;\n    re = symbol.realpart();\n    im = symbol.imagpart();\n    r = Symbol.hyp(re, im);\n    theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n    return [r, theta];\n  }; //removes parentheses\n\n\n  Symbol.unwrapPARENS = function (symbol) {\n    if (symbol.fname === '') {\n      var r = symbol.args[0];\n      r.power = r.power.multiply(symbol.power);\n      r.multiplier = r.multiplier.multiply(symbol.multiplier);\n      if (symbol.fname === '') return Symbol.unwrapPARENS(r);\n      return r;\n    }\n\n    return symbol;\n  }; //quickly creates a Symbol\n\n\n  Symbol.create = function (value, power) {\n    power = power === undefined ? 1 : power;\n    return _.parse('(' + value + ')^(' + power + ')');\n  };\n\n  Symbol.prototype = {\n    isSimple: function () {\n      return this.power.equals(1) && this.multiplier.equals(1);\n    },\n    //returns a clone.\n    powSimp: function () {\n      if (this.group === CB) {\n        var powers = [],\n            sign = this.multiplier.sign();\n        this.each(function (x) {\n          var p = x.power; //why waste time if I can't do anything anyway\n\n          if (isSymbol(p) || p.equals(1)) return this.clone();\n          powers.push(p);\n        });\n        var min = new Frac(arrayMin(powers)); //handle the coefficient\n        //handle the multiplier\n\n        var sign = this.multiplier.sign(),\n            m = this.multiplier.clone().abs(),\n            mfactors = Math2.ifactor(m); //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n        //we can then reduce it to 2*3*5*(15)^2 \n\n        var out_ = new Frac(1);\n        var in_ = new Frac(1);\n\n        for (var x in mfactors) {\n          var n = new Frac(mfactors[x]);\n\n          if (!n.lessThan(min)) {\n            n = n.divide(min).subtract(new Frac(1));\n            in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n          }\n\n          out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n        }\n\n        var t = new Symbol(in_);\n        this.each(function (x) {\n          x = x.clone();\n          x.power = x.power.divide(min);\n          t = _.multiply(t, x);\n        });\n\n        var xt = _.symfunction(PARENTHESIS, [t]);\n\n        xt.power = min;\n        xt.multiplier = sign < 0 ? out_.negate() : out_;\n        return xt;\n      }\n\n      return this.clone();\n    },\n\n    /**\n     * Checks to see if two functions are of equal value\n     * @param {Symbol} symbol\n     */\n    equals: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier) && this.group === symbol.group;\n    },\n    abs: function () {\n      var e = this.clone();\n      e.multiplier.abs();\n      return e;\n    },\n    // Greater than\n    gt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Greater than\n    gte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Less than\n    lt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n    // Less than\n    lte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n\n    /**\n     * Because nerdamer doesn't group symbols by polynomials but \n     * rather a custom grouping method, this has to be\n     * reinserted in order to make use of most algorithms. This function\n     * checks if the symbol meets the criteria of a polynomial.\n     * @param {bool} multivariate\n     * @returns {boolean}\n     */\n    isPoly: function (multivariate) {\n      var g = this.group,\n          p = this.power; //the power must be a integer so fail if it's not\n\n      if (!isInt(p) || p < 0) return false; //constants and first orders\n\n      if (g === N || g === S || this.isConstant(true)) return true;\n      var vars = variables(this);\n\n      if (g === CB && vars.length === 1) {\n        //the variable is assumed the only one that was found\n        var v = vars[0]; //if no variable then guess what!?!? We're done!!! We have a polynomial.\n\n        if (!v) return true;\n\n        for (var x in this.symbols) {\n          var sym = this.symbols[x]; //sqrt(x)\n\n          if (sym.group === FN && !sym.args[0].isConstant()) return false;\n          if (!sym.contains(v) && !sym.isConstant(true)) return false;\n        }\n\n        return true;\n      } //PL groups. These only fail if a power is not an int\n      //this should handle cases such as x^2*t\n\n\n      if (this.isComposite() || g === CB && multivariate) {\n        //fail if we're not checking for multivariate polynomials\n        if (!multivariate && vars.length > 1) return false; //loop though the symbols and check if they qualify\n\n        for (var x in this.symbols) {\n          //we've already the symbols if we're not checking for multivariates at this point\n          //so we check the sub-symbols\n          if (!this.symbols[x].isPoly(multivariate)) return false;\n        }\n\n        return true;\n      } else return false;\n      /*\n       //all tests must have passed so we must be dealing with a polynomial\n       return true;\n       */\n\n    },\n    //removes the requested variable from the symbol and returns the remainder\n    stripVar: function (x, exclude_x) {\n      var retval;\n      if ((this.group === PL || this.group === S) && this.value === x) retval = new Symbol(exclude_x ? 0 : this.multiplier);else if (this.group === CB && this.isLinear()) {\n        retval = new Symbol(1);\n        this.each(function (s) {\n          if (!s.contains(x, true)) retval = _.multiply(retval, s.clone());\n        });\n        retval.multiplier = retval.multiplier.multiply(this.multiplier);\n      } else if (this.group === CP && !this.isLinear()) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === CP && this.isLinear()) {\n        retval = new Symbol(0);\n        this.each(function (s) {\n          if (!s.contains(x)) {\n            var t = s.clone();\n            t.multiplier = t.multiplier.multiply(this.multiplier);\n            retval = _.add(retval, t);\n          }\n        }); //BIG TODO!!! It doesn't make much sense\n\n        if (retval.equals(0)) retval = new Symbol(this.multiplier);\n      } else if (this.group === EX && this.power.contains(x, true)) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === FN && this.contains(x)) {\n        retval = new Symbol(this.multiplier);\n      } else //wth? This should technically be the multiplier. \n        //Unfortunately this method wasn't very well thought out :`(.   \n        //should be: retval = new Symbol(this.multiplier);\n        //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n        //this will break a bunch of unit tests so be ready to for the long haul\n        retval = this.clone();\n      return retval;\n    },\n    //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a]. \n    toArray: function (v, arr) {\n      arr = arr || {\n        arr: [],\n        add: function (x, idx) {\n          var e = this.arr[idx];\n          this.arr[idx] = e ? _.add(e, x) : x;\n        }\n      };\n      var g = this.group;\n\n      if (g === S && this.contains(v)) {\n        arr.add(new Symbol(this.multiplier), this.power);\n      } else if (g === CB) {\n        var a = this.stripVar(v),\n            x = _.divide(this.clone(), a.clone());\n\n        var p = x.isConstant() ? 0 : x.power;\n        arr.add(a, p);\n      } else if (g === PL && this.value === v) {\n        this.each(function (x, p) {\n          arr.add(x.stripVar(v), p);\n        });\n      } else if (g === CP) {\n        //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n        //each case is handled above\n        this.each(function (x) {\n          x.toArray(v, arr);\n        });\n      } else if (this.contains(v)) {\n        throw new NerdamerTypeError('Cannot convert to array! Exiting');\n      } else {\n        arr.add(this.clone(), 0); //it's just a constant wrt to v\n      } //fill the holes\n\n\n      arr = arr.arr; //keep only the array since we don't need the object anymore\n\n      for (var i = 0; i < arr.length; i++) if (!arr[i]) arr[i] = new Symbol(0);\n\n      return arr;\n    },\n    //checks to see if a symbol contans a function\n    hasFunc: function (v) {\n      var fn_group = this.group === FN || this.group === EX;\n      if (fn_group && !v || fn_group && this.contains(v)) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].hasFunc(v)) return true;\n        }\n      }\n\n      return false;\n    },\n    sub: function (a, b) {\n      a = !isSymbol(a) ? _.parse(a) : a.clone();\n      b = !isSymbol(b) ? _.parse(b) : b.clone();\n      if (a.group === N || a.group === P) err('Cannot substitute a number. Must be a variable');\n      var same_pow = false,\n          a_is_unit_multiplier = a.multiplier.equals(1),\n          m = this.multiplier.clone(),\n          retval;\n      /* \n       * In order to make the substitution the bases have to first match take\n       * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n       * In both cases the first condition is that the bases match so we begin there\n       * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\n       */\n\n      if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n        //we cleared the first hurdle but a subsitution may not be possible just yet\n        if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n          if (a.isLinear()) {\n            retval = b;\n          } else if (a.power.equals(this.power)) {\n            retval = b;\n            same_pow = true;\n          }\n\n          if (a.multiplier.equals(this.multiplier)) m = new Frac(1);\n        }\n      } //the next thing is to handle CB\n      else if (this.group === CB || this.previousGroup === CB) {\n          retval = new Symbol(1);\n          this.each(function (x) {\n            retval = _.multiply(retval, x.sub(a, b));\n          });\n        } else if (this.isComposite()) {\n          if (a.isComposite() && this.isComposite() && this.isLinear() && a.isLinear()) {\n            var find = function (stack, needle) {\n              for (var x in stack.symbols) {\n                var sym = stack.symbols[x]; //if the symbol equals the needle or it's within the sub-symbols we're done\n\n                if (sym.isComposite() && find(sym, needle) || sym.equals(needle)) return true;\n              }\n\n              return false;\n            }; //go fish\n\n\n            for (var x in a.symbols) {\n              if (!find(this, a.symbols[x])) return this.clone();\n            }\n\n            retval = _.add(_.subtract(this.clone(), a), b);\n          } else {\n            retval = new Symbol(0);\n            this.each(function (x) {\n              retval = _.add(retval, x.sub(a, b));\n            });\n          }\n        } else if (this.group === EX) {\n          // the parsed value could be a function so parse and sub\n          retval = _.parse(this.value).sub(a, b);\n        } else if (this.group === FN) {\n          var nargs = [];\n\n          for (var i = 0; i < this.args.length; i++) {\n            var arg = this.args[i];\n            if (!isSymbol(arg)) arg = _.parse(arg);\n            nargs.push(arg.sub(a, b));\n          }\n\n          retval = _.symfunction(this.fname, nargs);\n        } //if we did manage a substitution\n\n\n      if (retval) {\n        if (!same_pow) {\n          //substitute the power\n          var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power); //now raise the symbol to that power\n\n          retval = _.pow(retval, p);\n        } //transfer the multiplier\n\n\n        retval.multiplier = retval.multiplier.multiply(m); //done\n\n        return retval;\n      } //if all else fails\n\n\n      return this.clone();\n    },\n    isMonomial: function () {\n      if (this.group === S) return true;\n\n      if (this.group === CB) {\n        for (var x in this.symbols) if (this.symbols[x].group !== S) return false;\n      } else return false;\n\n      return true;\n    },\n    isPi: function () {\n      return this.group === S && this.value === 'pi';\n    },\n    sign: function () {\n      return this.multiplier.sign();\n    },\n    isE: function () {\n      return this.value === 'e';\n    },\n    isSQRT: function () {\n      return this.fname === SQRT;\n    },\n    isConstant: function (check_all, check_symbols) {\n      if (check_symbols && this.group === CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isConstant(true)) return true;\n        }\n      }\n\n      if (check_all === 'all' && (this.isPi() || this.isE())) return true;\n\n      if (check_all && this.group === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (!this.args[i].isConstant(check_all)) return false;\n        }\n\n        return true;\n      }\n\n      if (check_all) return isNumericSymbol(this);\n      return this.value === CONST_HASH;\n    },\n    //the symbols is imaginary if \n    //1. n*i\n    //2. a+b*i\n    //3. a*i\n    isImaginary: function () {\n      if (this.imaginary) return true;else if (this.symbols) {\n        for (var x in this.symbols) if (this.symbols[x].isImaginary()) return true;\n      }\n      return false;\n    },\n\n    /**\n     * Returns the real part of a symbol\n     * @returns {Symbol}\n     */\n    realpart: function () {\n      if (this.isConstant()) {\n        return this.clone();\n      } else if (this.imaginary) return new Symbol(0);else if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.realpart());\n        });\n        return retval;\n      } else if (this.isImaginary()) return new Symbol(0);\n\n      return this.clone();\n    },\n\n    /*\n     * Return imaginary part of a symbol\n     * @returns {Symbol}\n     */\n    imagpart: function () {\n      if (this.group === S && this.isImaginary()) return new Symbol(this.multiplier);\n\n      if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.imagpart());\n        });\n        return retval;\n      }\n\n      if (this.group === CB) return this.stripVar(Settings.IMAGINARY);\n      return new Symbol(0);\n    },\n    isInteger: function () {\n      return this.isConstant() && this.multiplier.isInteger();\n    },\n    isLinear: function (wrt) {\n      if (wrt) {\n        if (this.isConstant()) return true;\n\n        if (this.group === S) {\n          if (this.value === wrt) return this.power.equals(1);else return true;\n        }\n\n        if (this.isComposite() && this.power.equals(1)) {\n          for (var x in this.symbols) {\n            if (!this.symbols[x].isLinear(wrt)) return false;\n          }\n\n          return true;\n        }\n\n        if (this.group === CB && this.symbols[wrt]) return this.symbols[wrt].isLinear(wrt);\n        return false;\n      } else return this.power.equals(1);\n    },\n\n    /**\n     * Checks to see if a symbol has a function by a specified name or within a specified list\n     * @param {String|String[]} names\n     * @returns {Boolean}\n     */\n    containsFunction: function (names) {\n      if (typeof names === 'string') names = [names];\n      if (this.group === FN && names.indexOf(this.fname) !== -1) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].containsFunction(names)) return true;\n        }\n      }\n\n      return false;\n    },\n    multiplyPower: function (p2) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) return this;\n      var p1 = this.power;\n\n      if (this.group !== EX && p2.group === N) {\n        var p = p2.multiplier;\n\n        if (this.group === N && !p.isInteger()) {\n          this.convert(P);\n        }\n\n        this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n        if (this.group === P && isInt(this.power)) {\n          //bring it back to an N\n          this.value = Math.pow(this.value, this.power);\n          this.toLinear();\n          this.convert(N);\n        }\n      } else {\n        if (this.group !== EX) {\n          p1 = new Symbol(p1);\n          this.convert(EX);\n        }\n\n        this.power = _.multiply(p1, p2);\n      }\n\n      return this;\n    },\n    setPower: function (p, retainSign) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) return this;\n\n      if (this.group === EX && !isSymbol(p)) {\n        this.group = this.previousGroup;\n        delete this.previousGroup;\n\n        if (this.group === N) {\n          this.multiplier = new Frac(this.value);\n          this.value = CONST_HASH;\n        } else this.power = p;\n      } else {\n        var isSymbolic = false;\n\n        if (isSymbol(p)) {\n          if (p.group === N) {\n            //p should be the multiplier instead\n            p = p.multiplier;\n          } else {\n            isSymbolic = true;\n          }\n        }\n\n        var group = isSymbolic ? EX : P;\n        this.power = p;\n        if (this.group === N && group) this.convert(group, retainSign);\n      }\n\n      return this;\n    },\n\n    /**\n     * Checks to see if symbol is located in the denominator\n     * @returns {boolean}\n     */\n    isInverse: function () {\n      if (this.group === EX) return this.power.multiplier.lessThan(0);\n      return this.power < 0;\n    },\n\n    /**\n     * Make a duplicate of a symbol by copying a predefined list of items. \n     * The name 'copy' would probably be a more appropriate name.\n     * to a new symbol\n     * @param {Symbol} c \n     * @returns {Symbol}\n     */\n    clone: function (c) {\n      var clone = c || new Symbol(0),\n          //list of properties excluding power as this may be a symbol and would also need to be a clone.\n      properties = ['value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n          l = properties.length,\n          i;\n\n      if (this.symbols) {\n        clone.symbols = {};\n\n        for (var x in this.symbols) {\n          clone.symbols[x] = this.symbols[x].clone();\n        }\n      }\n\n      for (i = 0; i < l; i++) {\n        if (this[properties[i]] !== undefined) {\n          clone[properties[i]] = this[properties[i]];\n        }\n      }\n\n      clone.power = this.power.clone();\n      clone.multiplier = this.multiplier.clone(); //add back the flag to track if this symbol is a conversion symbol\n\n      if (this.isConversion) clone.isConversion = this.isConversion;\n      if (this.isUnit) clone.isUnit = this.isUnit;\n      return clone;\n    },\n\n    /**\n     * Converts a symbol multiplier to one.\n     * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n     * @returns {Symbol}\n     */\n    toUnitMultiplier: function (keepSign) {\n      this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n      this.multiplier.den = new bigInt(1);\n      return this;\n    },\n\n    /**\n     * Converts a Symbol's power to one.\n     * @returns {Symbol}\n     */\n    toLinear: function () {\n      this.setPower(new Frac(1));\n      return this;\n    },\n\n    /**\n     * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n     * @param {Function} fn\n     * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well \n     */\n    each: function (fn, deep) {\n      if (!this.symbols) {\n        fn.call(this, this, this.value);\n      } else {\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n\n          if (sym.group === PL && deep) {\n            for (var y in sym.symbols) {\n              fn.call(x, sym.symbols[y], y);\n            }\n          } else fn.call(this, sym, x);\n        }\n      }\n    },\n\n    /**\n     * A numeric value to be returned for Javascript. It will try to \n     * return a number as far a possible but in case of a pure symbolic\n     * symbol it will just return its text representation\n     * @returns {String|Number}\n     */\n    valueOf: function () {\n      if (this.group === N) return this.multiplier.valueOf();else if (this.power === 0) {\n        return 1;\n      } else if (this.multiplier === 0) {\n        return 0;\n      } else {\n        return text(this, 'decimals');\n      }\n    },\n\n    /**\n     * Checks to see if a symbols has a particular variable within it.\n     * Pass in true as second argument to include the power of exponentials\n     * which aren't check by default.\n     * @example var s = _.parse('x+y+z'); s.contains('y');\n     * //returns true\n     * @param {any} variable \n     * @param {boolean} all \n     * @returns {boolean}\n     */\n    contains: function (variable, all) {\n      //contains expects a string\n      variable = String(variable);\n      var g = this.group;\n      if (this.value === variable) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === FN || this.previousGroup === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (this.args[i].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === EX) {\n        //exit only if it does\n        if (all && this.power.contains(variable, all)) {\n          return true;\n        }\n\n        if (this.value === variable) return true;\n      }\n\n      return this.value === variable;\n    },\n\n    /**\n     * Negates a symbols\n     * @returns {boolean}\n     */\n    negate: function () {\n      this.multiplier.negate();\n      if (this.group === CP || this.group === PL) this.distributeMultiplier();\n      return this;\n    },\n\n    /**\n     * Inverts a symbol\n     * @param {boolean} power_only\n     * @param {boolean} all\n     * @returns {boolean}\n     */\n    invert: function (power_only, all) {\n      //invert the multiplier\n      if (!power_only) this.multiplier = this.multiplier.invert(); //invert the rest\n\n      if (isSymbol(this.power)) {\n        this.power.negate();\n      } else if (this.group === CB && all) {\n        this.each(function (x) {\n          return x.invert();\n        });\n      } else {\n        if (this.power && this.group !== N) this.power.negate();\n      }\n\n      return this;\n    },\n\n    /**\n     * Symbols of group CP or PL may have the multiplier being carried by \n     * the top level symbol at any given time e.g. 2*(x+y+z). This is \n     * convenient in many cases, however in some cases the multiplier needs\n     * to be carried individually e.g. 2*x+2*y+2*z.\n     * This method distributes the multiplier over the entire symbol\n     * @param {boolean} all\n     * @returns {Symbol}\n     */\n    distributeMultiplier: function (all) {\n      var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n\n      if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          s.multiplier = s.multiplier.multiply(this.multiplier);\n          s.distributeMultiplier();\n        }\n\n        this.toUnitMultiplier();\n      }\n\n      return this;\n    },\n\n    /**\n     * This method expands the exponent over the entire symbol just like\n     * distributeMultiplier\n     * @returns {Symbol}\n     */\n    distributeExponent: function () {\n      if (!this.power.equals(1)) {\n        var p = this.power;\n\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n\n          if (s.group === EX) {\n            s.power = _.multiply(s.power, new Symbol(p));\n          } else {\n            this.symbols[x].power = this.symbols[x].power.multiply(p);\n          }\n        }\n\n        this.toLinear();\n      }\n\n      return this;\n    },\n\n    /**\n     * This method will attempt to up-convert or down-convert one symbol\n     * from one group to another. Not all symbols are convertible from one \n     * group to another however. In that case the symbol will remain \n     * unchanged.\n     * @param {int} group\n     * @param {string} imaginary \n     */\n    convert: function (group, imaginary) {\n      if (group > FN) {\n        //make a clone of this symbol;\n        var cp = this.clone(); //attach a symbols object and upgrade the group\n\n        this.symbols = {};\n\n        if (group === CB) {\n          //symbol of group CB hold symbols bound together through multiplication\n          //because of commutativity this multiplier can technically be anywhere within the group\n          //to keep track of it however it's easier to always have the top level carry it\n          cp.toUnitMultiplier();\n        } else {\n          //reset the symbol\n          this.toUnitMultiplier();\n        }\n\n        if (this.group === FN) {\n          cp.args = this.args;\n          delete this.args;\n          delete this.fname;\n        } //the symbol may originate from the symbol i but this property no longer holds true\n        //after copying\n\n\n        if (this.isImgSymbol) delete this.isImgSymbol;\n        this.toLinear(); //attach a clone of this symbol to the symbols object using its proper key\n\n        this.symbols[cp.keyForGroup(group)] = cp;\n        this.group = group; //objects by default don't have a length property. However, in order to keep track of the number\n        //of sub-symbols we have to impliment our own.\n\n        this.length = 1;\n      } else if (group === EX) {\n        //1^x is just one so check and make sure\n        if (!(this.group === N && this.multiplier.equals(1))) {\n          if (this.group !== EX) this.previousGroup = this.group;\n\n          if (this.group === N) {\n            this.value = this.multiplier.num.toString();\n            this.toUnitMultiplier();\n          } //update the hash to reflect the accurate hash\n          else this.value = text(this, 'hash');\n\n          this.group = EX;\n        }\n      } else if (group === N) {\n        var m = this.multiplier.toDecimal();\n        if (this.symbols) this.symbols = undefined;\n        new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n      } else if (group === P && this.group === N) {\n        this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n        this.toUnitMultiplier(!imaginary);\n        this.group = P;\n      }\n\n      return this;\n    },\n\n    /**\n     * This method is one of the principal methods to make it all possible.\n     * It performs cleanup and prep operations whenever a symbols is \n     * inserted. If the symbols results in a 1 in a CB (multiplication) \n     * group for instance it will remove the redundant symbol. Similarly\n     * in a symbol of group PL or CP (symbols glued by multiplication) it\n     * will remove any dangling zeroes from the symbol. It will also \n     * up-convert or down-convert a symbol if it detects that it's \n     * incorrectly grouped. It should be noted that this method is not\n     * called directly but rather by the 'attach' method for addition groups\n     * and the 'combine' method for multiplication groups.\n     * @param {Symbol} symbol\n     * @param {String} action\n     */\n    insert: function (symbol, action) {\n      //this check can be removed but saves a lot of aggravation when trying to hunt down\n      //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n      if (!isSymbol(symbol)) err('Object ' + symbol + ' is not of type Symbol!');\n\n      if (this.symbols) {\n        var group = this.group;\n\n        if (group > FN) {\n          var key = symbol.keyForGroup(group);\n          var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n\n          if (action === 'add') {\n            var hash = key;\n\n            if (existing) {\n              //add them together using the parser\n              this.symbols[hash] = _.add(existing, symbol); //if the addition resulted in a zero multiplier remove it\n\n              if (this.symbols[hash].multiplier.equals(0)) {\n                delete this.symbols[hash];\n                this.length--;\n\n                if (this.length === 0) {\n                  this.convert(N);\n                  this.multiplier = new Frac(0);\n                }\n              }\n            } else {\n              this.symbols[key] = symbol;\n              this.length++;\n            }\n          } else {\n            //check if this is of group P and unwrap before inserting\n            if (symbol.group === P && isInt(symbol.power)) {\n              symbol.convert(N);\n            } //transfer the multiplier to the upper symbol but only if the symbol numeric\n\n\n            if (symbol.group !== EX) {\n              this.multiplier = this.multiplier.multiply(symbol.multiplier);\n              symbol.toUnitMultiplier();\n            } else {\n              symbol.parens = symbol.multiplier.lessThan(0);\n              this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n              symbol.toUnitMultiplier(true);\n            }\n\n            if (existing) {\n              //remove because the symbol may have changed\n              symbol = _.multiply(remove(this.symbols, key), symbol);\n\n              if (symbol.isConstant()) {\n                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n              }\n\n              this.length--; //clean up\n            } //don't insert the symbol if it's 1\n\n\n            if (!symbol.isOne(true)) {\n              this.symbols[key] = symbol;\n              this.length++;\n            } else if (symbol.multiplier.lessThan(0)) {\n              this.negate(); //put back the sign\n            }\n          } //clean up\n\n\n          if (this.length === 0) this.convert(N); //update the hash\n\n          if (this.group === CP || this.group === CB) {\n            this.updateHash();\n          }\n        }\n      }\n\n      return this;\n    },\n    //the insert method for addition\n    attach: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'add');\n\n        return this;\n      }\n\n      return this.insert(symbol, 'add');\n    },\n    //the insert method for multiplication\n    combine: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'multiply');\n\n        return this;\n      }\n\n      return this.insert(symbol, 'multiply');\n    },\n\n    /**\n     * This method should be called after any major \"surgery\" on a symbol.\n     * It updates the hash of the symbol for example if the fname of a \n     * function has changed it will update the hash of the symbol.\n     */\n    updateHash: function () {\n      if (this.group === N) return;\n\n      if (this.group === FN) {\n        var contents = '',\n            args = this.args,\n            is_parens = this.fname === PARENTHESIS;\n\n        for (var i = 0; i < args.length; i++) contents += (i === 0 ? '' : ',') + text(args[i]);\n\n        var fn_name = is_parens ? '' : this.fname;\n        this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n      } else if (!(this.group === S || this.group === PL)) {\n        this.value = text(this, 'hash');\n      }\n    },\n\n    /**\n     * this function defines how every group in stored within a group of \n     * higher order think of it as the switchboard for the library. It \n     * defines the hashes for symbols. \n     * @param {int} group\n     */\n    keyForGroup: function (group) {\n      var g = this.group;\n      var key;\n\n      if (g === N) {\n        key = this.value;\n      } else if (g === S || g === P) {\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === FN) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === PL) {\n        //if the order is reversed then we'll assume multiplication\n        //TODO: possible future dilemma\n        if (group === CB) key = text(this, 'hash');else if (group === CP) {\n          if (this.power.equals(1)) key = this.value;else key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n        } else if (group === PL) key = this.power.toString();else key = this.value;\n        return key;\n      } else if (g === CP) {\n        if (group === CP) {\n          key = text(this, 'hash');\n        }\n\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === CB) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === EX) {\n        if (group === PL) key = text(this.power);else key = text(this, 'hash');\n      }\n\n      return key;\n    },\n\n    /** \n     * Symbols are typically stored in an object which works fine for most\n     * cases but presents a problem when the order of the symbols makes\n     * a difference. This function simply collects all the symbols and \n     * returns them as an array. If a function is supplied then that \n     * function is called on every symbol contained within the object.\n     * @param {Function} fn\n     * @param {Object} opt\n     * @param {Function} sort_fn\n     * @@param {Boolean} expand_symbol \n     * @returns {Array}\n     */\n    collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n      var collected = [];\n      if (!this.symbols) collected.push(this);else {\n        for (var x in this.symbols) {\n          var symbol = this.symbols[x];\n\n          if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n            collected = collected.concat(symbol.collectSymbols());\n          } else collected.push(fn ? fn(symbol, opt) : symbol);\n        }\n      }\n      if (sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?\n\n      return collected.sort(sort_fn); //sort hopefully gives us some sort of consistency\n    },\n\n    /**\n     * Returns the latex representation of the symbol\n     * @param {String} option\n     * @returns {String}\n     */\n    latex: function (option) {\n      return LaTeX.latex(this, option);\n    },\n\n    /**\n     * Returns the text representation of a symbol\n     * @param {String} option\n     * @returns {String}\n     */\n    text: function (option) {\n      return text(this, option);\n    },\n\n    /**\n     * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n     */\n    isOne: function (abs) {\n      var f = abs ? 'absEquals' : 'equals';\n      if (this.group === N) return this.multiplier[f](1);else return this.power.equals(0);\n    },\n    isComposite: function () {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === CP || g === PL || pg === PL || pg === CP;\n    },\n    isCombination: function () {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === CB || pg === CB;\n    },\n    lessThan: function (n) {\n      return this.multiplier.lessThan(n);\n    },\n    greaterThan: function (n) {\n      return this.multiplier.greaterThan(n);\n    },\n\n    /**\n     * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\n     * with other classes the symbol is either the denominator or not. \n     * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n     * denominator and has to be found by looking at the actual symbols themselves.\n     */\n    getDenom: function () {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (this.group === CB && this.power.lessThan(0)) symbol = _.expand(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.lessThan(0)) {\n        var d = _.parse(symbol.multiplier.den);\n\n        retval = symbol.toUnitMultiplier();\n        retval.power.negate();\n        retval = _.multiply(d, retval); //put back the coeff\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.den);\n\n        for (var x in symbol.symbols) if (symbol.symbols[x].power < 0) retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n      } else retval = _.parse(symbol.multiplier.den);\n\n      return retval;\n    },\n    getNum: function () {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (symbol.group === CB && symbol.power.lessThan(0)) symbol = _.expand(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.greaterThan(0) && symbol.group !== CB) {\n        retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.num);\n        symbol.each(function (x) {\n          if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n            retval = _.multiply(retval, x.clone());\n          }\n        });\n      } else {\n        retval = _.parse(symbol.multiplier.num);\n      }\n\n      return retval;\n    },\n    toString: function () {\n      return this.text();\n    }\n  }; //Parser =======================================================================     \n  //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n\n  function Parser() {\n    //Point to the local parser instead of the global one\n    var _ = this;\n\n    var bin = {};\n    var preprocessors = {\n      names: [],\n      actions: []\n    }; //Parser.classes ===============================================================\n\n    function Slice(upper, lower) {\n      this.start = upper;\n      this.end = lower;\n    }\n\n    ;\n\n    Slice.prototype.isConstant = function () {\n      return this.start.isConstant() && this.end.isConstant();\n    };\n\n    Slice.prototype.text = function () {\n      return text(this.start) + ':' + text(this.end);\n    };\n    /**\n     * Class used to collect arguments for functions\n     * @returns {Parser.Collection}\n     */\n\n\n    function Collection() {\n      this.elements = [];\n    }\n\n    Collection.prototype.append = function (e) {\n      this.elements.push(e);\n    };\n\n    Collection.prototype.getItems = function () {\n      return this.elements;\n    };\n\n    Collection.prototype.toString = function () {\n      return _.pretty_print(this.elements);\n    };\n\n    Collection.create = function (e) {\n      var collection = new Collection();\n      if (e) collection.append(e);\n      return collection;\n    };\n\n    function Token(node, node_type, column) {\n      this.type = node_type;\n      this.value = node;\n      if (column !== undefined) this.column = column + 1;\n\n      if (node_type === Token.OPERATOR) {\n        //copy everything over from the operator\n        var operator = operators[node];\n\n        for (var x in operator) this[x] = operator[x];\n      } else if (node_type === Token.FUNCTION) {\n        this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n\n        this.leftAssoc = false;\n      }\n    }\n\n    Token.prototype.toString = function () {\n      return this.value;\n    };\n\n    Token.prototype.toString = function () {\n      if (this.is_prefix) return '`' + this.value;\n      return this.value;\n    }; //some constants\n\n\n    Token.OPERATOR = 'OPERATOR';\n    Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n    Token.FUNCTION = 'FUNCTION';\n    Token.UNIT = 'UNIT';\n    Token.KEYWORD = 'KEYWORD';\n    Token.MAX_PRECEDENCE = 999; //create link to classes\n\n    this.classes = {\n      Collection: Collection,\n      Slice: Slice,\n      Token: Token\n    }; //Parser.modules ===============================================================\n    //object for functions which handle complex number\n\n    var complex = {\n      prec: undefined,\n      cos: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cos(r) * Math.cosh(i));\n        im = _.parse(Math.sin(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sin: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(r) * Math.cosh(i));\n        im = _.parse(Math.cos(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tan: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sec: function (r, i) {\n        var t = this.removeDen(this.cos(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csc: function (r, i) {\n        var t = this.removeDen(this.sin(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      cot: function (r, i) {\n        var t = this.removeDen(this.tan(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acos: function (r, i) {\n        var symbol, sq, a, b, c;\n        symbol = this.fromArray([r, i]);\n        sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z\n\n        a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n        b = _.expand(_.add(symbol.clone(), a));\n        c = log(b);\n        return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n      },\n      asin: function (r, i) {\n        return _.subtract(_.parse('pi/2'), this.acos(r, i));\n      },\n      atan: function (r, i) {\n        var a, b, c, symbol;\n        symbol = complex.fromArray([r, i]);\n        a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n        b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n        c = log(_.expand(_.add(new Symbol(1), a.clone())));\n        return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n      },\n      asec: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.acos.apply(this, d);\n      },\n      acsc: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.asin.apply(this, d);\n      },\n      acot: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.atan.apply(this, d);\n      },\n      //Hyperbolic trig\n      cosh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cosh(r) * Math.cos(i));\n        im = _.parse(Math.sinh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sinh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(r) * Math.cos(i));\n        im = _.parse(Math.cosh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tanh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sech: function (r, i) {\n        var t = this.removeDen(this.cosh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csch: function (r, i) {\n        var t = this.removeDen(this.sinh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      coth: function (r, i) {\n        var t = this.removeDen(this.tanh(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acosh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(z.clone(), new Symbol(1)));\n        b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n        return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n      },\n      asinh: function (r, i) {\n        var a, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n        return _.expand(log(_.add(z, a)));\n      },\n      atanh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = log(_.add(z.clone(), new Symbol(1)));\n        b = log(_.subtract(new Symbol(1), z));\n        return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n      },\n      asech: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.acosh.apply(this, t);\n      },\n      acsch: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.asinh.apply(this, t);\n      },\n      acoth: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.atanh.apply(this, t);\n      },\n      sqrt: function (symbol) {\n        var re, im, h, a, d;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        h = Symbol.hyp(re, im);\n        a = _.add(re.clone(), h);\n        d = sqrt(_.multiply(new Symbol(2), a.clone()));\n        return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n      },\n      log: function (r, i) {\n        var re, im;\n        re = log(Symbol.hyp(r, i));\n        im = _.parse(Math.atan2(i, r));\n        return _.add(re, _.multiply(Symbol.imaginary(), im));\n      },\n      removeDen: function (symbol) {\n        var den, r, i, re, im;\n\n        if (isArray(symbol)) {\n          r = symbol[0];\n          i = symbol[1];\n        } else {\n          r = symbol.realpart();\n          i = symbol.imagpart();\n        }\n\n        den = Math.pow(r, 2) + Math.pow(i, 2);\n        re = _.parse(r / den);\n        im = _.parse(i / den);\n        return [re, im];\n      },\n      fromArray: function (arr) {\n        return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n      },\n      evaluate: function (symbol, f) {\n        var re, im, sign;\n        sign = symbol.power.sign(); //remove it from under the denominator\n\n        symbol.power = symbol.power.abs(); //expand\n\n        if (symbol.power.greaterThan(1)) symbol = _.expand(symbol); //remove the denominator\n\n        if (sign < 0) {\n          var d = this.removeDen(symbol);\n          re = d[0];\n          im = d[1];\n        } else {\n          re = symbol.realpart();\n          im = symbol.imagpart();\n        }\n\n        if (re.isConstant('all') && im.isConstant('all')) return this[f].call(this, re, im);\n        return _.symfunction(f, [symbol]);\n      }\n    }; //object for functions which handle trig\n\n    var trig = this.trig = {\n      //container for trigonometric function\n      cos: function (symbol) {\n        if (symbol.equals('pi') && symbol.multiplier.den.equals(2)) return new Symbol(0);\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(new Symbol(Settings.PI / 2))) return new Symbol(0);\n\n          if (symbol.isConstant()) {\n            return new Symbol(Math.cos(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cos');\n          }\n        }\n\n        if (symbol.equals(0)) return new Symbol(1);\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = Number(m.num),\n                d = Number(m.den);\n            if (d === 2) retval = new Symbol(0);else if (d === 3) {\n              retval = _.parse('1/2');\n              c = true;\n            } else if (d === 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d === 6) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else retval = _.symfunction('cos', [symbol]);\n          }\n        }\n\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('cos', [symbol]);\n        return retval;\n      },\n      sin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new Symbol(Math.sin(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sin');\n        }\n\n        if (symbol.equals(0)) return new Symbol(0);\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            sign = symbol.multiplier.sign(),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.equals('pi')) retval = new Symbol(0);else if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n                d = m.den;\n\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/2');\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n          }\n        }\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      tan: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.tan(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'tan');\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier;\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) throw new UndefinedError('tan is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('tan', [symbol]);\n          }\n        }\n\n        if (!retval) retval = _.symfunction('tan', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      sec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math2.sec(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sec');\n          return _.parse(format('1/cos({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) throw new UndefinedError('sec is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = new Symbol(2);\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('sec', [symbol]);\n          }\n        }\n\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('sec', [symbol]);\n        return retval;\n      },\n      csc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math2.csc(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'csc');\n          return _.parse(format('1/sin({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            sign = symbol.multiplier.sign(),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('csc is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n                d = m.den;\n\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = new Symbol(2);\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n          }\n        }\n\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      cot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math2.cot(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'cot');\n          return _.parse(format('1/tan({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier;\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('cot is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) retval = new Symbol(0);else if (d == 3) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('cot', [symbol]);\n          }\n        }\n\n        if (!retval) retval = _.symfunction('cot', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      acos: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.acos(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acos');\n        }\n\n        return _.symfunction('acos', arguments);\n      },\n      asin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.asin(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'asin');\n        }\n\n        return _.symfunction('asin', arguments);\n      },\n      atan: function (symbol) {\n        var retval;\n        if (symbol.equals(0)) retval = new Symbol(0);else if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.atan(symbol.valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'atan');\n          return _.symfunction('atan', arguments);\n        } else if (symbol.equals(-1)) retval = _.parse('-pi/4');else retval = _.symfunction('atan', arguments);\n        return retval;\n      },\n      asec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.acos(symbol.invert().valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'asec');\n        }\n\n        return _.symfunction('asec', arguments);\n      },\n      acsc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.asin(symbol.invert().valueOf()));\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acsc');\n        }\n\n        return _.symfunction('acsc', arguments);\n      },\n      acot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acot');\n        }\n\n        return _.symfunction('acot', arguments);\n      },\n      atan2: function (a, b) {\n        if (a.equals(0) && b.equals(0)) throw new UndefinedError('atan2 is undefined for 0, 0');\n\n        if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n          return new Symbol(Math.atan2(a, b));\n        }\n\n        return _.symfunction('atan2', arguments);\n      }\n    }; //object for functions which handle hyperbolic trig\n\n    var trigh = this.trigh = {\n      //container for hyperbolic trig function\n      cosh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.cosh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cosh');\n          }\n        }\n\n        return retval = _.symfunction('cosh', arguments);\n      },\n      sinh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.sinh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sinh');\n          }\n        }\n\n        return retval = _.symfunction('sinh', arguments);\n      },\n      tanh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.tanh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'tanh');\n          }\n        }\n\n        return retval = _.symfunction('tanh', arguments);\n      },\n      sech: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new Symbol(Math.sech(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sech');\n          }\n\n          return _.parse(format('1/cosh({0})', symbol));\n        }\n\n        return retval = _.symfunction('sech', arguments);\n      },\n      csch: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.csch(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'csch');\n          }\n\n          return _.parse(format('1/sinh({0})', symbol));\n        }\n\n        return retval = _.symfunction('csch', arguments);\n      },\n      coth: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.coth(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'coth');\n          }\n\n          return _.parse(format('1/tanh({0})', symbol));\n        }\n\n        return retval = _.symfunction('coth', arguments);\n      },\n      acosh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acosh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));else retval = _.symfunction('acosh', arguments);\n        return retval;\n      },\n      asinh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asinh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));else retval = _.symfunction('asinh', arguments);\n        return retval;\n      },\n      atanh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'atanh');else if (Settings.PARSE2NUMBER) {\n          retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\n        } else retval = _.symfunction('atanh', arguments);\n        return retval;\n      },\n      asech: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asech');else if (Settings.PARSE2NUMBER) retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));else retval = _.symfunction('asech', arguments);\n        return retval;\n      },\n      acsch: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acsch');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));else retval = _.symfunction('acsch', arguments);\n        return retval;\n      },\n      acoth: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acoth');else if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(1)) retval = Symbol.infinity();else retval = evaluate(_.divide(log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))), new Symbol(2)));\n        } else retval = _.symfunction('acoth', arguments);\n        return retval;\n      }\n    }; //list of supported units\n\n    this.units = {}; //list all the supported operators\n\n    var operators = {\n      '\\\\': {\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; //bypass the slash\n        }\n      },\n      '!!': {\n        precedence: 7,\n        operator: '!!',\n        action: 'dfactorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n        }\n      },\n      '!': {\n        precedence: 7,\n        operator: '!',\n        action: 'factorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return factorial(e); //wrap it in a factorial function\n        }\n      },\n      '^': {\n        precedence: 6,\n        operator: '^',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '**': {\n        precedence: 6,\n        operator: '**',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '%': {\n        precedence: 4,\n        operator: '%',\n        action: 'percent',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        overloaded: true,\n        overloadAction: 'mod',\n        overloadLeftAssoc: false,\n        operation: function (x) {\n          return _.divide(x, new Symbol(100));\n        }\n      },\n      '*': {\n        precedence: 4,\n        operator: '*',\n        action: 'multiply',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '/': {\n        precedence: 4,\n        operator: '/',\n        action: 'divide',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '+': {\n        precedence: 3,\n        operator: '+',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      'plus': {\n        precedence: 3,\n        operator: 'plus',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      '-': {\n        precedence: 3,\n        operator: '-',\n        action: 'subtract',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x.negate();\n        }\n      },\n      '=': {\n        precedence: 2,\n        operator: '=',\n        action: 'equals',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '==': {\n        precedence: 1,\n        operator: '==',\n        action: 'eq',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<': {\n        precedence: 1,\n        operator: '<',\n        action: 'lt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<=': {\n        precedence: 1,\n        operator: '<=',\n        action: 'lte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '>': {\n        precedence: 1,\n        operator: '>',\n        action: 'gt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '=>': {\n        precedence: 1,\n        operator: '=>',\n        action: 'gte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ',': {\n        precedence: 0,\n        operator: ',',\n        action: 'comma',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ':': {\n        precedence: 0,\n        operator: ',',\n        action: 'assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false,\n        vectorFn: 'slice'\n      },\n      ':=': {\n        precedence: 0,\n        operator: ',',\n        action: 'function_assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      }\n    }; //brackets\n\n    var brackets = {\n      '(': {\n        type: 'round',\n        id: 1,\n        is_open: true,\n        is_close: false\n      },\n      ')': {\n        type: 'round',\n        id: 2,\n        is_open: false,\n        is_close: true\n      },\n      '[': {\n        type: 'square',\n        id: 3,\n        is_open: true,\n        is_close: false,\n        maps_to: 'vector'\n      },\n      ']': {\n        type: 'square',\n        id: 4,\n        is_open: false,\n        is_close: true\n      },\n      '{': {\n        type: 'curly',\n        id: 5,\n        is_open: true,\n        is_close: false,\n        maps_to: 'Set'\n      },\n      '}': {\n        type: 'curly',\n        id: 6,\n        is_open: false,\n        is_close: true\n      }\n    }; // Supported functions.\n    // Format: function_name: [mapped_function, number_of_parameters]\n\n    var functions = this.functions = {\n      'cos': [trig.cos, 1],\n      'sin': [trig.sin, 1],\n      'tan': [trig.tan, 1],\n      'sec': [trig.sec, 1],\n      'csc': [trig.csc, 1],\n      'cot': [trig.cot, 1],\n      'acos': [trig.acos, 1],\n      'asin': [trig.asin, 1],\n      'atan': [trig.atan, 1],\n      'arccos': [trig.acos, 1],\n      'arcsin': [trig.asin, 1],\n      'arctan': [trig.atan, 1],\n      'asec': [trig.asec, 1],\n      'acsc': [trig.acsc, 1],\n      'acot': [trig.acot, 1],\n      'atan2': [trig.atan2, 2],\n      'acoth': [trigh.acoth, 1],\n      'asech': [trigh.asech, 1],\n      'acsch': [trigh.acsch, 1],\n      'sinh': [trigh.sinh, 1],\n      'cosh': [trigh.cosh, 1],\n      'tanh': [trigh.tanh, 1],\n      'asinh': [trigh.asinh, 1],\n      'sech': [trigh.sech, 1],\n      'csch': [trigh.csch, 1],\n      'coth': [trigh.coth, 1],\n      'acosh': [trigh.acosh, 1],\n      'atanh': [trigh.atanh, 1],\n      'log10': [, 1],\n      'exp': [exp, 1],\n      'radians': [radians, 1],\n      'degrees': [degrees, 1],\n      'min': [min, -1],\n      'max': [max, -1],\n      'erf': [, 1],\n      'floor': [, 1],\n      'ceil': [, 1],\n      'trunc': [, 1],\n      'Si': [, 1],\n      'step': [, 1],\n      'rect': [, 1],\n      'sinc': [sinc, 1],\n      'tri': [, 1],\n      'sign': [sign, 1],\n      'Ci': [, 1],\n      'Ei': [, 1],\n      'Shi': [, 1],\n      'Chi': [, 1],\n      'Li': [, 1],\n      'fib': [, 1],\n      'fact': [factorial, 1],\n      'factorial': [factorial, 1],\n      'continued_fraction': [continued_fraction, [1, 2]],\n      'dfactorial': [, 1],\n      'gamma_incomplete': [, [1, 2]],\n      'round': [round, [1, 2]],\n      'scientific': [scientific, [1, 2]],\n      'mod': [mod, 2],\n      'pfactor': [pfactor, 1],\n      'vector': [vector, -1],\n      'matrix': [matrix, -1],\n      'Set': [set, -1],\n      'imatrix': [imatrix, -1],\n      'parens': [parens, -1],\n      'sqrt': [sqrt, 1],\n      'nthroot': [nthroot, 2],\n      'log': [log, [1, 2]],\n      'expand': [expand, 1],\n      'abs': [abs, 1],\n      'invert': [invert, 1],\n      'determinant': [determinant, 1],\n      'size': [size, 1],\n      'transpose': [transpose, 1],\n      'dot': [dot, 2],\n      'cross': [cross, 2],\n      'vecget': [vecget, 2],\n      'vecset': [vecset, 3],\n      'vectrim': [vectrim, [1, 2]],\n      'matget': [matget, 3],\n      'matset': [matset, 4],\n      'matgetrow': [matgetrow, 2],\n      'matsetrow': [matsetrow, 3],\n      'matgetcol': [matgetcol, 2],\n      'matsetcol': [matsetcol, 3],\n      'IF': [IF, 3],\n      'is_in': [is_in, 2],\n      //imaginary support\n      'realpart': [realpart, 1],\n      'imagpart': [imagpart, 1],\n      'conjugate': [conjugate, 1],\n      'arg': [arg, 1],\n      'polarform': [polarform, 1],\n      'rectform': [rectform, 1],\n      'sort': [sort, [1, 2]],\n      'integer_part': [, 1],\n      'union': [union, 2],\n      'contains': [contains, 2],\n      'intersection': [intersection, 2],\n      'difference': [difference, 2],\n      'intersects': [intersects, 2],\n      'is_subset': [is_subset, 2],\n      //system support\n      'print': [print, -1]\n    }; //error handler\n\n    this.error = err; //this function is used to comb through the function modules and find a function given its name\n\n    var findFunction = function (fname) {\n      var fmodules = Settings.FUNCTION_MODULES,\n          l = fmodules.length;\n\n      for (var i = 0; i < l; i++) {\n        var fmodule = fmodules[i];\n        if (fname in fmodule) return fmodule[fname];\n      }\n\n      err('The function ' + fname + ' is undefined!');\n    };\n    /**\n     * This method gives the ability to override operators with new methods.\n     * @param {String} which\n     * @param {Function} with_what\n     */\n\n\n    this.override = function (which, with_what) {\n      if (!bin[which]) bin[which] = [];\n      bin[which].push(this[which]);\n      this[which] = with_what;\n    };\n    /**\n     * Restores a previously overridden operator\n     * @param {String} what\n     */\n\n\n    this.restore = function (what) {\n      if (this[what]) this[what] = bin[what].pop();\n    };\n    /**\n     * This method is supposed to behave similarly to the override method but it does not override\n     * the existing function rather it only extends it\n     * @param {String} what\n     * @param {Function} with_what\n     * @param {boolean} force_call\n     */\n\n\n    this.extend = function (what, with_what, force_call) {\n      var _ = this,\n          extended = this[what];\n\n      if (typeof extended === 'function' && typeof with_what === 'function') {\n        var f = this[what];\n\n        this[what] = function (a, b) {\n          if (isSymbol(a) && isSymbol(b) && !force_call) return f.call(_, a, b);else return with_what.call(_, a, b, f);\n        };\n      }\n    };\n    /**\n     * Generates library's representation of a function. It's a fancy way of saying a symbol with \n     * a few extras. The most important thing is that that it gives a fname and \n     * an args property to the symbols in addition to changing its group to FN\n     * @param {String} fn_name\n     * @param {Array} params\n     * @returns {Symbol}\n     */\n\n\n    this.symfunction = function (fn_name, params) {\n      //call the proper function and return the result;\n      var f = new Symbol(fn_name);\n      f.group = FN;\n      if (typeof params === 'object') params = [].slice.call(params); //ensure an array\n\n      f.args = params;\n      f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n      f.updateHash();\n      return f;\n    };\n    /**\n     * An internal function call for the Parser. This will either trigger a real \n     * function call if it can do so or just return a symbolic representation of the \n     * function using symfunction.\n     * @param {String} fn_name\n     * @param {Array} args\n     * @param {int} allowed_args\n     * @returns {Symbol}\n     */\n\n\n    this.callfunction = function (fn_name, args, allowed_args) {\n      var fn_settings = functions[fn_name];\n      if (!fn_settings) err('Nerdamer currently does not support the function ' + fn_name);\n      var num_allowed_args = fn_settings[1] || allowed_args,\n          //get the number of allowed arguments\n      fn = fn_settings[0],\n          //get the mapped function\n      retval; //We want to be able to call apply on the arguments or create a symfunction. Both require\n      //an array so make sure to wrap the argument in an array.\n\n      if (!(args instanceof Array)) args = args !== undefined ? [args] : [];\n\n      if (num_allowed_args !== -1) {\n        var is_array = isArray(num_allowed_args),\n            min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n            max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n            num_args = args.length;\n        var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n        if (num_args < min_args) err(format(error_msg, 'minimum', min_args, num_args));\n        if (num_args > max_args) err(format(error_msg, 'maximum', max_args, num_args));\n      }\n      /*\n       * The following are very important to the how nerdamer constructs functions!\n       * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n       *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n       * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n       * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n       *     they are expecting a symbolic output.\n       */\n      //check if arguments are all numers\n\n\n      var numericArgs = allNumbers(args); //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n\n      if (Settings.USE_BIG && numericArgs) {\n        retval = Big[fn_name].apply(undefined, args);\n      } else {\n        if (!fn) {\n          //Remember assumption 1. No function defined so it MUST be numeric in nature\n          fn = findFunction(fn_name);\n          if (Settings.PARSE2NUMBER && numericArgs) retval = bigConvert(fn.apply(fn, args));else retval = _.symfunction(fn_name, args);\n        } else {\n          //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n          retval = fn.apply(fn_settings[2], args);\n        }\n      }\n\n      return retval;\n    };\n    /**\n     * Build a regex based on the operators currently loaded. These operators are to be ignored when \n     * substituting spaces for multiplication\n     */\n\n\n    this.operator_filter_regex = function () {\n      //we only want the operators which are singular since those are the ones\n      //that nerdamer uses anyway\n      var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n        if (x.length === 1) return x;\n      }).join('\\\\'); //create a regex which captures all spaces between characters except those\n      //have an operator on one end\n\n      return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n    }();\n    /**\n     * Replaces nerdamer.setOperator\n     * @param {object} operator\n     * @param {boolean} shift         \n     */\n\n\n    this.setOperator = function (operator, action, shift) {\n      var name = operator.operator; //take the name to be the symbol\n\n      operators[name] = operator;\n      if (action) this[operator.action] = action; //make the parser aware of the operator\n\n      _[name] = operator.operation; //make the action available to the parser if infix\n\n      if (!operator.action && !(operator.prefix || operator.postif)) {\n        operator.action = name;\n      } //if this operator is exclusive then all successive operators should be shifted\n\n\n      if (shift === 'over' || shift === 'under') {\n        var precedence = operator.precedence;\n\n        for (var x in operators) {\n          var o = operators[x];\n          var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n          if (condition) o.precedence++;\n        }\n\n        ;\n      }\n    };\n    /**\n     * Gets an opererator by its symbol\n     * @param {String} operator\n     * @returns {Object}\n     */\n\n\n    this.getOperator = function (operator) {\n      return operators[operator];\n    };\n\n    this.aliasOperator = function (o, n) {\n      var t = {};\n      var operator = operators[o]; //copy everything over to the new operator\n\n      for (var x in operator) {\n        t[x] = operator[x];\n      } //update the symbol\n\n\n      t.operator = n;\n      this.setOperator(t);\n    };\n    /**\n     * Returns the list of operators. Caution! Can break parser!\n     * @returns {object}\n     */\n\n\n    this.getOperators = function () {\n      //will replace this with some cloning action in the future\n      return operators;\n    };\n\n    this.getBrackets = function () {\n      return brackets;\n    };\n    /*\n     * Preforms preprocessing on the string. Useful for making early modification before \n     * sending to the parser\n     * @param {String} e\n     */\n\n\n    var prepare_expression = function (e) {\n      /*\n       * Since variables cannot start with a number, the assumption is made that when this occurs the\n       * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for \n       * a side-by-side close and open parenthesis\n       */\n      e = String(e); //apply preprocessors\n\n      for (var i = 0; i < preprocessors.actions.length; i++) e = preprocessors.actions[i].call(this, e);\n      /* //NO LONGER NEEDED SINCE IMPLIED MULTIPLICATION IS NOW HANDLED LATER IN TOKENIZER\n      var match;\n      //add support for spaces between variables\n      while (true) {\n          match = _.operator_filter_regex.exec(e);\n          if (!match)\n              break;\n          try {\n              var a = match[1],\n                      b = match[2];\n              validateName(a);\n              validateName(b);\n              e = e.replace(match[0], a + '*' + b);\n          }\n          catch (e) {\n              break;\n          }\n      }\n      */\n      //e = e.split(' ').join('');//strip empty spaces\n      //replace multiple spaces with one space\n\n\n      e = e.replace(/\\s+/g, ' '); //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n\n      if (/e/gi.test(e)) {\n        e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\n          return scientificToDecimal(x);\n        });\n      } //replace scientific numbers\n      //allow omission of multiplication after coefficients\n\n\n      e = e.replace(/([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi, function () {\n        var str = arguments[4],\n            group1 = arguments[1],\n            group2 = arguments[2],\n            start = arguments[3],\n            first = str.charAt(start),\n            before = '',\n            d = '*';\n        if (!first.match(/[\\+\\-\\/\\*]/)) before = str.charAt(start - 1);\n        if (before.match(/[a-z]/i)) d = '';\n        return group1 + d + group2;\n      }).replace(/([a-z0-9_]+)/gi, function (match, a) {\n        if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n          if (!isNaN(a)) return a;\n          return a.split('').join('*');\n        }\n\n        return a;\n      }) //allow omission of multiplication sign between brackets\n      .replace(/\\)\\(/g, ')*(') || '0'; //replace x(x+a) with x*(x+a)\n\n      while (true) {\n        var e_org = e; //store the original\n\n        e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n          var g1 = a || c,\n              g2 = b || d;\n          if (g1 in functions) //create a passthrough for functions\n            return g1 + g2;\n          return g1 + '*' + g2;\n        }); //if the original equals the replace we're done\n\n        if (e_org === e) break;\n      }\n\n      return e;\n    }; //delay setting of constants until Settings is ready\n\n\n    this.initConstants = function () {\n      this.CONSTANTS = {\n        E: new Symbol(Settings.E),\n        PI: new Symbol(Settings.PI)\n      };\n    };\n    /*\n     * Debugging method used to better visualize vector and arrays\n     * @param {object} o\n     * @returns {String}\n     */\n\n\n    this.pretty_print = function (o) {\n      if (Array.isArray(o)) {\n        var s = o.map(x => _.pretty_print(x)).join(', ');\n        if (o.type === 'vector') return 'vector<' + s + '>';\n        return '(' + s + ')';\n      }\n\n      return o.toString();\n    };\n\n    this.peekers = {\n      pre_operator: [],\n      post_operator: [],\n      pre_function: [],\n      post_function: []\n    };\n\n    this.callPeekers = function (name) {\n      var peekers = this.peekers[name]; //remove the first items and stringify\n\n      var args = arguments2Array(arguments).slice(1).map(stringify); //call each one of the peekers\n\n      for (var i = 0; i < peekers.length; i++) {\n        peekers[i].apply(null, args);\n      }\n    };\n    /*\n     * Tokenizes the string\n     * @param {String} e\n     * @returns {Token[]}\n     */\n\n\n    this.tokenize = function (e) {\n      //cast to String\n      e = String(e); //remove multiple white spaces and spaces at beginning and end of string\n\n      e = e.trim().replace(/\\s+/g, ' '); //remove spaces before and after brackets\n\n      for (var x in brackets) {\n        var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n        e = e.replace(regex, x);\n      }\n\n      var col = 0; //the column position\n\n      var L = e.length; //expression length\n\n      var lpos = 0; //marks beginning of next token\n\n      var tokens = []; //the tokens container\n\n      var scopes = [tokens]; //initiate with the tokens as the highest scope\n\n      var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n\n      var depth = 0;\n      var open_brackets = [];\n      var has_space = false; //marks if an open space character was found\n\n      var SPACE = ' ';\n      var EMPTY_STRING = '';\n      var COMMA = ',';\n      var MINUS = '-';\n      var MULT = '*'; //Possible source of bug. Review\n\n      /*\n       //gets the next space\n       var next_space = function(from) {\n       for(var i=from; i<L; i++) {\n       if(e.charAt(i) === ' ')\n       return i;\n       }\n       \n       return L; //assume the end of the string instead\n       };\n       */\n\n      /**\n       * Adds a scope to tokens\n       * @param {String} scope_type \n       * @param {int} column \n       * @returns {undefined}\n       */\n\n      var addScope = function (scope_type, column) {\n        var new_scope = []; //create a new scope\n\n        if (scope_type !== undefined) {\n          new_scope.type = scope_type;\n        }\n\n        new_scope.column = column; //mark the column of the scope\n\n        scopes.push(new_scope); //add it to the list of scopes\n\n        target.push(new_scope); //add it to the tokens list since now it's a scope\n\n        target = new_scope; //point to it\n\n        depth++; //go down one in scope\n      };\n      /**\n       * Goes up in scope by one\n       * @returns {undefined}\n       */\n\n\n      var goUp = function () {\n        scopes.pop(); //remove the scope from the scopes stack\n\n        target = scopes[--depth]; //point the above scope\n      };\n      /**\n       * Extracts all the operators from the expression string starting at postion start_at\n       * @param {int} start_at\n       * @returns {String}\n       */\n\n\n      var get_operator_str = function (start_at) {\n        start_at = start_at !== undefined ? start_at : col; //mark the end of the operator as the start since we're just going\n        //to be walking along the string\n\n        var end = start_at + 1; //just keep moving along\n\n        while (e.charAt(end++) in operators) {} //remember that we started at one position ahead. The beginning operator is what triggered\n        //this function to be called in the first place. String.CharAt is zero based so we now\n        //have to correct two places. The initial increment + the extra++ at the end of end during\n        //the last iteration.\n\n\n        return e.substring(start_at, end - 1);\n      };\n      /**\n       * Breaks operator up in to several different operators as defined in operators\n       * @param {String} operator_str\n       * @returns {String[]}\n       */\n\n\n      var chunkify = function (operator_str) {\n        var start = col - operator_str.length; //start of operator\n\n        var _operators = [];\n        var operator = operator_str.charAt(0); //grab the largest possible chunks but start at 2 since we already know\n        //that the first character is an operator\n\n        for (var i = 1, L = operator_str.length; i < L; i++) {\n          var ch = operator_str.charAt(i);\n          var o = operator + ch; //since the operator now is undefined then the last operator \n          //was the largest possible combination.\n\n          if (!(o in operators)) {\n            _operators.push(new Token(operator, Token.OPERATOR, start + i));\n\n            operator = ch;\n          } else operator = o; //now the operator is the larger chunk\n\n        } //add the last operator\n\n\n        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n\n        return _operators;\n      };\n      /**\n       * Is used to add a token to the tokens array. Makes sure that no empty token is added\n       * @param {int} at\n       * @param {String} token\n       * @returns {undefined}\n       */\n\n\n      var add_token = function (at, token) {\n        //grab the token if we're not supplied one\n        if (token === undefined) token = e.substring(lpos, at); //only add it if it's not an empty string\n\n        if (token in _.units) target.push(new Token(token, Token.UNIT, lpos));else if (token !== '') target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n      };\n      /**\n       * Adds a function to the output\n       * @param {String} f\n       * @returns {undefined}\n       */\n\n\n      var add_function = function (f) {\n        target.push(new Token(f, Token.FUNCTION, lpos));\n      };\n      /**\n       * Tokens are found between operators so this marks the location of where the last token was found\n       * @param {int} position\n       * @returns {undefined}\n       */\n\n\n      var set_last_position = function (position) {\n        lpos = position + 1;\n      };\n      /**\n       * When a operator is found and added, especially a combo operator, then the column location\n       * has to be adjusted to the end of the operator\n       * @returns {undefined}\n       */\n\n\n      var adjust_column_position = function () {\n        lpos = lpos + operator_str.length - 2;\n        col = lpos - 1;\n      };\n\n      for (; col < L; col++) {\n        var ch = e.charAt(col);\n\n        if (ch in operators) {\n          add_token(col); //is the last token numeric?\n\n          var last_token_is_numeric = target[0] && isNumber(target[0]); //is this character multiplication?\n\n          var is_multiplication = last_token_is_numeric && ch === MULT; //if we're in a new scope then go up by one but if the space \n          //is right befor an operator then it makes no sense to go up in scope\n          //consider sin -x. The last position = current position at the minus sign\n          //this means that we're going for sin(x) -x which is wrong\n          //Ignore comma since comma is still part of the existing scope.\n\n          if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n            has_space = false;\n            goUp();\n          } //mark the last position that a \n\n\n          set_last_position(col + 1);\n          var operator_str = get_operator_str(col);\n          adjust_column_position();\n          target.push.apply(target, chunkify(operator_str));\n        } else if (ch in brackets) {\n          var bracket = brackets[ch];\n\n          if (bracket.is_open) {\n            //mark the bracket\n            open_brackets.push([bracket, lpos]);\n            var f = e.substring(lpos, col);\n\n            if (f in functions) {\n              add_function(f);\n            } else if (f !== '') {\n              //assume multiplication\n              //TODO: Add the multiplication to stack\n              target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n            } //go down one in scope\n\n\n            addScope(bracket.maps_to, col);\n          } else if (bracket.is_close) {\n            //get the matching bracket\n            var pair = open_brackets.pop(); //throw errors accordingly\n            //missing open bracket\n\n            if (!pair) throw new ParityError('Missing open bracket for bracket at: ' + (col + 1)); //incorrect pair\n            else if (pair[0].id !== bracket.id - 1) throw new ParityError('Parity error');\n            add_token(col);\n            goUp();\n          }\n\n          set_last_position(col);\n        } else if (ch === SPACE) {\n          var prev = e.substring(lpos, col); //look back\n\n          var nxt = e.charAt(col + 1); //look forward\n\n          if (has_space) {\n            if (prev in operators) {\n              target.push(new Token(prev, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, prev); //we're at the closing space\n\n              goUp(); //go up in scope if we're at a space\n              //assume multiplication if it's not an operator except for minus\n\n              var is_operator = nxt in operators;\n              if (is_operator && operators[nxt].value === MINUS || !is_operator) target.push(new Token(MULT, Token.OPERATOR, col));\n            }\n\n            has_space = false; //remove the space\n          } else {\n            //we're at the closing space\n            //check if it's a function\n            var f = e.substring(lpos, col);\n\n            if (f in functions) {\n              //there's no need to go up in scope if the next character is an operator\n              has_space = true; //mark that a space was found\n\n              add_function(f);\n              addScope();\n            } else if (f in operators) {\n              target.push(new Token(f, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, f); //peek ahead to the next character\n\n              var nxt = e.charAt(col + 1); //If it's a number then add the multiplication operator to the stack but make sure that the next character\n              //is not an operator\n\n              if (prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators)) target.push(new Token(MULT, Token.OPERATOR, col));\n            } //Possible source of bug. Review\n\n            /*\n             //space can mean multiplication so add the symbol if the is encountered\n             if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n             var next = e.charAt(col+1);\n             var next_is_operator = next in operators;\n             var ns = next_space(col+1);\n             var next_word = e.substring(col+1, ns);\n             //the next can either be a prefix operator or no operator\n             if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n             target.push(new Token('*', Token.OPERATOR, col));\n             }\n             */\n\n          }\n\n          set_last_position(col); //mark this location    \n        }\n      } //check that all brackets were closed\n\n\n      if (open_brackets.length) {\n        var b = open_brackets.pop();\n        throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n      } //add the last token\n\n\n      add_token(col);\n      return tokens;\n    };\n    /*\n     * Puts token array in Reverse Polish Notation\n     * @param {Token[]} tokens\n     * @returns {Token[]}\n     */\n\n\n    this.toRPN = function (tokens) {\n      var fn = tokens.type;\n      var l = tokens.length,\n          i;\n      var output = [];\n      var stack = [];\n      var prefixes = [];\n\n      var collapse = function (target, destination) {\n        while (target.length) destination.push(target.pop());\n      }; //mark all the prefixes and add them to the stack\n\n\n      for (i = 0; i < l; i++) {\n        var token = tokens[i];\n        if (token.type !== Token.OPERATOR) break;\n        if (!token.prefix) throw new OperatorError('Not a prefix operator');\n        token.is_prefix = true;\n        stack.push(token);\n      } //begin with remaining tokens\n\n\n      for (; i < l; i++) {\n        var e = tokens[i];\n\n        if (e.type === Token.OPERATOR) {\n          var operator = e; //create the option for the operator being overloaded\n\n          if (operator.overloaded) {\n            var next = tokens[i + 1]; //if it's followed by a number or variable then we assume it's not a postfix operator\n\n            if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n              operator.postfix = false; //override the original function with the overload function\n\n              operator.action = operator.overloadAction;\n              operator.leftAssoc = operator.overloadLeftAssoc;\n            }\n          } //if the stack is not empty\n\n\n          while (stack.length) {\n            var last = stack[stack.length - 1]; //if (there is an operator at the top of the operator stack with greater precedence)\n            //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n            //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n\n            if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence)) break;\n            output.push(stack.pop());\n          } //change the behavior of the operator if it's a vector and we've been asked to do so\n\n\n          if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator) operator.action = operator.vectorFn; //if the operator is a postfix operator then we're ready to go since it belongs\n          //to the preceding token. However the output cannot be empty. It must have either\n          //an operator or a variable/literal\n\n          if (operator.postfix) {\n            var previous = tokens[i - 1];\n            if (!previous) throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);else if (previous.type === Token.OPERATOR) {\n              //a postfix can only be followed by a postfix\n              if (!previous.postfix) throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n            }\n          } else {\n            //we must be at an infix so point the operator this\n            do {\n              //the first one is an infix operator all others have to be prefix operators so jump to the end\n              var next = tokens[i + 1]; //take a look ahead\n\n              var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n\n              if (next_is_operator) {\n                //if it's not a prefix operator then it not in the right place\n                if (!next.prefix) {\n                  throw new OperatorError('A prefix operator was expected at ' + next.column);\n                } //mark it as a confirmed prefix\n\n\n                next.is_prefix = true; //add it to the prefixes\n\n                prefixes.push(next);\n                i++;\n              }\n            } while (next_is_operator);\n          } //if it's a prefix it should be on a special stack called prefixes\n          //we do this to hold on to prefixes because of left associative operators.\n          //they belong to the variable/literal but if placed on either the stack\n          //or output there's no way of knowing this. I might be wrong so I welcome \n          //any discussion about this.\n\n\n          if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n            prefixes.push(operator);else stack.push(operator); //move the prefixes to the stack\n\n          while (prefixes.length) {\n            if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n              stack.push(prefixes.pop());else break;\n          }\n        } else if (e.type === Token.VARIABLE_OR_LITERAL) {\n          //move prefixes to stack at beginning of scope\n          if (output.length === 0) collapse(prefixes, stack); //done with token\n\n          output.push(e);\n          var last_on_stack = stack[stack.length - 1]; //then move all the prefixes to the output\n\n          if (!last_on_stack || !last_on_stack.leftAssoc) collapse(prefixes, output);\n        } else if (e.type === Token.FUNCTION) {\n          stack.push(e);\n        } else if (e.type === Token.UNIT) {\n          //if it's a unit it belongs on the stack since it's tied to the previous token\n          output.push(e);\n        } //if it's an additonal scope then put that into RPN form\n\n\n        if (Array.isArray(e)) {\n          output.push(this.toRPN(e));\n          if (e.type) output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n        }\n      } //collapse the remainder of the stack and prefixes to output\n\n\n      collapse(stack, output);\n      collapse(prefixes, output);\n      return output;\n    };\n    /*\n     * Parses the tokens  \n     * @param {Tokens[]} rpn\n     * @param {object} substitutions\n     * @returns {Symbol}\n     */\n\n\n    this.parseRPN = function (rpn, substitutions) {\n      try {\n        //default substitutions\n        substitutions = substitutions || {}; //prepare the substitutions.\n        //we first parse them out as-is\n\n        for (var x in substitutions) substitutions[x] = _.parse(substitutions[x], {}); //Although technically constants,\n        //pi and e are only available when evaluating the expression so add to the subs.\n        //Doing this avoids rounding errors \n        //link e and pi\n\n\n        if (Settings.PARSE2NUMBER) {\n          //use the value provided if the individual for some strange reason prefers this.\n          //one reason could be to sub e but not pi or vice versa\n          if (!('e' in substitutions)) substitutions.e = new Symbol(Settings.E);\n          if (!('pi' in substitutions)) substitutions.pi = new Symbol(Settings.PI);\n        }\n\n        var Q = [];\n\n        for (var i = 0, l = rpn.length; i < l; i++) {\n          var e = rpn[i]; //Arrays indicate a new scope so parse that out\n\n          if (Array.isArray(e)) {\n            e = this.parseRPN(e, substitutions);\n          }\n\n          if (e) {\n            if (e.type === Token.OPERATOR) {\n              if (e.is_prefix || e.postfix) //resolve the operation assocated with the prefix\n                Q.push(e.operation(Q.pop()));else {\n                var b = Q.pop();\n                var a = Q.pop(); //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n\n                if (typeof a === 'undefined') throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n                var is_comma = e.action === 'comma'; //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n\n                if (a instanceof Set && !is_comma) a = Vector.fromSet(a);\n                if (b instanceof Set && !is_comma) b = Vector.fromSet(b); //call all the pre-operators \n\n                this.callPeekers('pre_operator', a, b, e);\n\n                var ans = _[e.action](a, b); //call all the pre-operators\n\n\n                this.callPeekers('post_operator', ans, a, b, e);\n                Q.push(ans);\n              }\n            } else if (e.type === Token.FUNCTION) {\n              var args = Q.pop();\n              var parent = args.parent; //make a note of the parent\n\n              if (!(args instanceof Collection)) args = Collection.create(args); //the return value may be a vector. If it is then we check\n              //Q to see if there's another vector on the stack. If it is then\n              //we check if has elements. If it does then we know that we're dealing\n              //with an \"getter\" object and return the requested values\n              //call the function. This is the _.callfunction method in nerdamer\n              //call the function. This is the _.callfunction method in nerdamer\n\n              var fn_name = e.value;\n              var fn_args = args.getItems(); //call the pre-function peekers\n\n              this.callPeekers('pre_function', fn_name, fn_args);\n\n              var ret = _.callfunction(fn_name, fn_args); //call the post-function peekers\n\n\n              this.callPeekers('post_function', ret, fn_name, fn_args);\n              var last = Q[Q.length - 1];\n              var next = rpn[i + 1];\n              var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n              if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                //remove the item from the queue\n                var item = Q.pop();\n                var getter = ret.elements[0]; //check if it's symbolic. If so put it back and add the item to the stack\n\n                if (!getter.isConstant()) {\n                  item.getter = getter;\n                  Q.push(item);\n                  Q.push(ret);\n                } else if (getter instanceof Slice) {\n                  //if it's a Slice return the slice\n                  Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                } else {\n                  var index = Number(getter);\n                  var il = item.elements.length; //support for negative indices\n\n                  if (index < 0) index = il + index; //it it's still out of bounds\n\n                  if (index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                    //range error\n                    throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n                  var element = item.elements[index]; //cyclic but we need to mark this for future reference\n\n                  item.getter = index;\n                  element.parent = item;\n                  Q.push(element);\n                }\n              } else {\n                //extend the parent reference\n                if (parent) ret.parent = parent;\n                Q.push(ret);\n              }\n            } else {\n              var subbed;\n              var v = e.value;\n              if (v in Settings.ALIASES) e = _.parse(Settings.ALIASES[e]); //wrap it in a symbol if need be\n              else if (e.type === Token.VARIABLE_OR_LITERAL) e = new Symbol(v);else if (e.type === Token.UNIT) {\n                  e = new Symbol(v);\n                  e.isUnit = true;\n                } //make substitutions\n              //Always constants first. This avoids the being overridden\n\n              if (v in _.CONSTANTS) {\n                subbed = e;\n                e = new Symbol(_.CONSTANTS[v]);\n              } //next substitutions. This allows declared variable to be overridden\n              //check if the values match to avoid erasing the multiplier. \n              //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n              else if (v in substitutions && v !== substitutions[v].value) {\n                  subbed = e;\n                  e = substitutions[v].clone();\n                } //next declare variables\n                else if (v in VARS) {\n                    subbed = e;\n                    e = VARS[v].clone();\n                  } //make notation of what it was before\n\n\n              if (subbed) e.subbed = subbed;\n              Q.push(e);\n            }\n          }\n        }\n\n        return Q[0];\n      } catch (error) {\n        throw new ParseError(error.message + ': ' + e.column);\n      }\n    };\n    /**\n     * This is the method that triggers the parsing of the string. It generates a parse tree but processes \n     * it right away. The operator functions are called when their respective operators are reached. For instance\n     * + with cause this.add to be called with the left and right hand values. It works by walking along each \n     * character of the string and placing the operators on the stack and values on the output. When an operator\n     * having a lower order than the last is reached then the stack is processed from the last operator on the \n     * stack.\n     * @param {String} token\n     */\n\n\n    function Node(token) {\n      this.type = token.type;\n      this.value = token.value; //the incoming token may already be a Node type\n\n      this.left = token.left;\n      this.right = token.right;\n    }\n\n    Node.prototype.toString = function () {\n      var left = this.left ? this.left.toString() + '---' : '';\n      var right = this.right ? '---' + this.right.toString() : '';\n      return left + '(' + this.value + ')' + right;\n    };\n\n    Node.prototype.toHTML = function (depth, indent) {\n      depth = depth || 0;\n      indent = typeof indent === 'undefined' ? 4 : indent;\n\n      var tab = function (n) {\n        return ' '.repeat(indent * n);\n      };\n\n      var html = '';\n      var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n      var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n      var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n\n      if (left || right) {\n        html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n      }\n\n      html += '';\n      return html;\n    };\n\n    this.tree = function (tokens) {\n      var Q = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var e = tokens[i]; //Arrays indicate a new scope so parse that out\n\n        if (Array.isArray(e)) {\n          e = this.tree(e); //if it's a comma then it's just arguments\n\n          Q.push(e);\n          continue;\n        }\n\n        if (e.type === Token.OPERATOR) {\n          if (e.is_prefix || e.postfix) {\n            //prefixes go to the left, postfix to the right\n            var location = e.is_prefix ? 'left' : 'right';\n            var last = Q.pop();\n            e = new Node(e);\n            e[location] = last;\n            Q.push(e);\n          } else {\n            e = new Node(e);\n            e.right = Q.pop();\n            e.left = Q.pop();\n            Q.push(e);\n          }\n        } else if (e.type === Token.FUNCTION) {\n          e = new Node(e);\n          var args = Q.pop();\n          e.right = args;\n\n          if (e.value === 'object') {\n            //check if Q has a value\n            var last = Q[Q.length - 1];\n\n            if (last) {\n              while (last.right) {\n                last = last.right;\n              }\n\n              last.right = e;\n              continue;\n            }\n          }\n\n          Q.push(e);\n        } else {\n          Q.push(new Node(e));\n        }\n      }\n\n      return Q[0];\n    };\n\n    this.parse = function (e, substitutions) {\n      e = prepare_expression(e);\n      substitutions = substitutions || {}; //three passes but easier to debug\n\n      var tokens = this.tokenize(e);\n      var rpn = this.toRPN(tokens);\n      return this.parseRPN(rpn, substitutions);\n    };\n    /**\n     * TODO: Switch to Parser.tokenize for this method\n     * Reads a string into an array of Symbols and operators\n     * @param {String} expression_string\n     * @returns {Array}\n     */\n\n\n    this.toObject = function (expression_string) {\n      var objectify = function (tokens) {\n        var output = [];\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          var v = token.value;\n\n          if (token.type === Token.VARIABLE_OR_LITERAL) {\n            output.push(new Symbol(v));\n          } else if (token.type === Token.FUNCTION) {\n            //jump ahead since the next object are the arguments\n            i++; //create a symbolic function and stick it on output\n\n            var f = _.symfunction(v, objectify(tokens[i]));\n\n            f.isConversion = true;\n            output.push(f);\n          } else if (token.type === Token.OPERATOR) {\n            output.push(v);\n          } else {\n            output.push(objectify(token));\n          }\n        }\n\n        return output;\n      };\n\n      return objectify(_.tokenize(expression_string));\n    }; //helper method for toTeX\n\n\n    var chunkAtCommas = function (arr) {\n      var j,\n          k = 0,\n          chunks = [[]];\n\n      for (var j = 0, l = arr.length; j < l; j++) {\n        if (arr[j] === ',') {\n          k++;\n          chunks[k] = [];\n        } else {\n          chunks[k].push(arr[j]);\n        }\n      }\n\n      return chunks;\n    }; //helper method for toTeX\n\n\n    var rem_brackets = function (str) {\n      return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n        if (a) return a;\n        return str;\n      });\n    };\n    /*\n     * Convert expression or object to LaTeX\n     * @param {String} expression_or_obj\n     * @param {object} opt\n     * @returns {String}\n     */\n\n\n    this.toTeX = function (expression_or_obj, opt) {\n      opt = opt || {};\n      var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n          TeX = [],\n          cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n      if (isArray(obj)) {\n        var nobj = [],\n            a,\n            b; //first handle ^\n\n        for (var i = 0; i < obj.length; i++) {\n          a = obj[i];\n\n          if (obj[i + 1] === '^') {\n            b = obj[i + 2];\n            nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n            i += 2;\n          } else nobj.push(a);\n        }\n\n        obj = nobj;\n      }\n\n      for (var i = 0, l = obj.length; i < l; i++) {\n        var e = obj[i]; //convert * to cdot\n\n        if (e === '*') {\n          e = cdot;\n        }\n\n        if (isSymbol(e)) {\n          if (e.group === FN) {\n            var fname = e.fname,\n                f;\n            if (fname === SQRT) f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));else if (fname === ABS) f = LaTeX.brackets(this.toTeX(e.args), 'abs');else if (fname === PARENTHESIS) f = LaTeX.brackets(this.toTeX(e.args), 'parens');else if (fname === Settings.LOG10) {\n              f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n            } else if (fname === 'integrate') {\n              /* Retrive [Expression, x] */\n              var chunks = chunkAtCommas(e.args);\n              /* Build TeX */\n\n              var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                  dx = this.toTeX(chunks[1]);\n              f = '\\\\int ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'defint') {\n              var chunks = chunkAtCommas(e.args),\n                  expr = LaTeX.braces(this.toTeX(chunks[0])),\n                  dx = this.toTeX(chunks[3]),\n                  lb = this.toTeX(chunks[1]),\n                  ub = this.toTeX(chunks[2]);\n              f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'diff') {\n              var chunks = chunkAtCommas(e.args);\n              var dx = '',\n                  expr = LaTeX.braces(this.toTeX(chunks[0]));\n              /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n\n              if (chunks.length === 1) {\n                var vars = [];\n\n                for (j = 0; j < chunks[0].length; j++) {\n                  if (chunks[0][j].group === 3) {\n                    vars.push(chunks[0][j].value);\n                  }\n                }\n\n                vars.sort();\n                dx = vars.length > 0 ? '\\\\frac{d}{d ' + vars[0] + '}' : '\\\\frac{d}{d x}';\n              }\n              /* If two arguments, we have expression and variable, we assume n = 1 */\n              else if (chunks.length === 2) {\n                  dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                }\n                /* If we have more than 2 arguments, we assume we've got everything */\n                else {\n                    dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                  }\n\n              f = dx + '\\\\left(' + expr + '\\\\right)';\n            } else if (fname === 'sum' || fname === 'product') {\n              // Split e.args into 4 parts based on locations of , symbols.\n              var argSplit = [[], [], [], []],\n                  j = 0,\n                  i;\n\n              for (i = 0; i < e.args.length; i++) {\n                if (e.args[i] === ',') {\n                  j++;\n                  continue;\n                }\n\n                argSplit[j].push(e.args[i]);\n              } // Then build TeX string.\n\n\n              f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n              f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n            } else if (fname === 'limit') {\n              var args = chunkAtCommas(e.args).map(function (x) {\n                if (Array.isArray(x)) return _.toTeX(x.join(''));\n                return _.toTeX(String(x));\n              });\n              f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n            } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');else {\n              f = LaTeX.latex(e); //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n            }\n            TeX.push(f);\n          } else TeX.push(LaTeX.latex(e));\n        } else if (isArray(e)) {\n          TeX.push(LaTeX.brackets(this.toTeX(e)));\n        } else {\n          if (e === '/') TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));else TeX.push(e);\n        }\n      }\n\n      return TeX.join(' ');\n    }; //Parser.functions ==============================================================\n\n    /* Although parens is not a \"real\" function it is important in some cases when the \n     * symbol must carry parenthesis. Once set you don't have to worry about it anymore\n     * as the parser will get rid of it at the first opportunity\n     */\n\n\n    function parens(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        return symbol;\n      }\n\n      return _.symfunction('parens', [symbol]);\n    }\n\n    function abs(symbol) {\n      if (symbol.multiplier.lessThan(0)) symbol.multiplier.negate();\n\n      if (symbol.isImaginary()) {\n        var re = symbol.realpart();\n        var im = symbol.imagpart();\n        if (re.isConstant() && im.isConstant()) return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n      } else if (isNumericSymbol(symbol) || even(symbol.power)) {\n        return symbol;\n      }\n\n      if (symbol.isComposite()) {\n        var ms = [];\n        symbol.each(function (x) {\n          ms.push(x.multiplier);\n        });\n        var gcd = Math2.QGCD.apply(null, ms);\n\n        if (gcd.lessThan(0)) {\n          symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n          symbol.distributeMultiplier();\n        }\n      }\n\n      return _.symfunction(ABS, [symbol]);\n    }\n    /**\n     * The factorial function\n     * @param {Symbol} symbol\n     * @return {Symbol}\n     */\n\n\n    function factorial(symbol) {\n      var retval;\n\n      if (isVector(symbol)) {\n        var V = new Vector();\n        symbol.each(function (x, i) {\n          //i start at one.\n          V.set(i - 1, factorial(x));\n        });\n        return V;\n      }\n\n      if (isMatrix(symbol)) {\n        var M = new Matrix();\n        symbol.each(function (x, i, j) {\n          //i start at one.\n          M.set(i, j, factorial(x));\n        });\n        return M;\n      }\n\n      if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n        if (isInt(symbol)) {\n          retval = Math2.bigfactorial(symbol);\n        } else {\n          retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n        }\n\n        retval = bigConvert(retval);\n        return retval;\n      } else if (symbol.isConstant()) {\n        var den = symbol.getDenom();\n\n        if (den.equals(2)) {\n          var num = symbol.getNum();\n          var a, b, c, n;\n\n          if (!symbol.multiplier.isNegative()) {\n            n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n            a = Math2.bigfactorial(new Frac(2).multiply(n));\n            b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n          } else {\n            n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n            a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n            b = Math2.bigfactorial(new Frac(2).multiply(n));\n          }\n\n          c = a.divide(b);\n          return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n        }\n      }\n\n      return _.symfunction(FACTORIAL, [symbol]);\n    }\n\n    ;\n    /**\n     * Returns the continued fraction of a number\n     * @param {Symbol} symbol\n     * @param {Symbol} n\n     * @returns {Symbol}\n     */\n\n    function continued_fraction(symbol, n) {\n      var _symbol = evaluate(symbol);\n\n      if (_symbol.isConstant()) {\n        var cf = Math2.continuedFraction(_symbol, n); //convert the fractions array to a new Vector\n\n        var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n          return new Symbol(x);\n        }));\n        return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n      }\n\n      return _.symfunction('continued_fraction', arguments);\n    }\n\n    ;\n    /**\n     * The mod function\n     * @param {Symbol} symbol1\n     * @param {Symbol} symbol2\n     * @returns {Symbol}\n     */\n\n    function mod(symbol1, symbol2) {\n      if (symbol1.isConstant() && symbol2.isConstant()) {\n        var retval = new Symbol(1);\n        retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n        return retval;\n      } //try to see if division has remainder of zero\n\n\n      var r = _.divide(symbol1.clone(), symbol2.clone());\n\n      if (isInt(r)) return new Symbol(0);\n      return _.symfunction('mod', [symbol1, symbol2]);\n    }\n    /**\n     * A branghing function\n     * @param {Boolean} condition\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    function IF(condition, a, b) {\n      if (typeof condition !== 'boolean') if (isNumericSymbol(condition)) condition = !!Number(condition);\n      if (condition) return a;\n      return b;\n    }\n    /**\n     * \n     * @param {Matrix|Vector|Set|Collection} obj\n     * @param {Symbol} item\n     * @returns {Boolean}\n     */\n\n\n    function is_in(obj, item) {\n      if (isMatrix(obj)) {\n        for (var i = 0, l = obj.rows(); i < l; i++) {\n          for (var j = 0, l2 = obj.cols(); j < l2; j++) {\n            var element = obj.elements[i][j];\n            if (element.equals(item)) return new Symbol(1);\n          }\n        }\n      } else if (obj.elements) {\n        for (var i = 0, l = obj.elements.length; i < l; i++) {\n          if (obj.elements[i].equals(item)) return new Symbol(1);\n        }\n      }\n\n      return new Symbol(0);\n    }\n    /**\n     * A symbolic extension for sinc\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function sinc(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant()) {\n          return new Symbol(Math2.sinc(symbol));\n        }\n\n        return _.parse(format('sin({0})/({0})', symbol));\n      }\n\n      return _.symfunction('sinc', [symbol]);\n    }\n    /**\n     * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\n     * Thanks @ Happypig375\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function exp(symbol) {\n      return _.parse(format('e^({0})', symbol));\n    }\n    /**\n     * Converts value degrees to radians\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function radians(symbol) {\n      return _.parse(format('({0})*pi/180', symbol));\n    }\n    /**\n     * Converts value from radians to degrees\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function degrees(symbol) {\n      return _.parse(format('({0})*180/pi', symbol));\n    }\n\n    function nroots(symbol) {\n      var a, b;\n\n      if (symbol.group === FN && symbol.fname === '') {\n        a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n        b = _.parse(symbol.power);\n      } else if (symbol.group === P) {\n        a = _.parse(symbol.value);\n        b = _.parse(symbol.power);\n      }\n\n      if (a && b && a.group === N && b.group === N) {\n        var _roots = [];\n        var parts = Symbol.toPolarFormArray(symbol);\n\n        var r = _.parse(a).abs().toString(); //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n\n\n        var x = arg(a).toString();\n        var n = b.multiplier.den.toString();\n        var p = b.multiplier.num.toString();\n        var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n\n        for (var i = 0; i < n; i++) {\n          var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n\n          _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n        }\n\n        return Vector.fromArray(_roots);\n      } else if (symbol.isConstant(true)) {\n        var sign = symbol.sign();\n        var x = evaluate(symbol.abs());\n\n        var root = _.sqrt(x);\n\n        var _roots = [root.clone(), root.negate()];\n        if (sign < 0) _roots = _roots.map(function (x) {\n          return _.multiply(x, Symbol.imaginary());\n        });\n      } else {\n        _roots = [_.parse(symbol)];\n      }\n\n      return Vector.fromArray(_roots);\n    }\n    /**\n     * The square root function\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function sqrt(symbol) {\n      if (symbol.fname === '' && symbol.power.equals(1)) symbol = symbol.args[0];\n      var is_negative = symbol.multiplier.sign() < 0;\n\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant() && !is_negative) {\n          return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));\n        } else if (symbol.isImaginary()) {\n          return complex.sqrt(symbol);\n        }\n      }\n\n      var img,\n          retval,\n          isConstant = symbol.isConstant();\n\n      if (symbol.group === CB && symbol.isLinear()) {\n        var m = sqrt(Symbol(symbol.multiplier));\n\n        for (var s in symbol.symbols) {\n          var x = symbol.symbols[s];\n          m = _.multiply(m, sqrt(x));\n        }\n\n        retval = m;\n      } //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n      else if (symbol.fname === SQRT) {\n          var s = symbol.args[0];\n          var ms = symbol.multiplier;\n          s.setPower(symbol.power.multiply(new Frac(0.25)));\n          retval = s; //grab the multiplier\n\n          if (!ms.equals(1)) retval = _.multiply(sqrt(_.parse(ms)), retval);\n        } //if the symbol is a fraction then we don't keep can unwrap it. For instance\n        //no need to keep sqrt(x^(1/3))\n        else if (!symbol.power.isInteger()) {\n            symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n            retval = symbol;\n          } else {\n            //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n            //to sqrt(a)*sqrt(b)^1 for better simplification\n            //the sign of the power\n            var sign = symbol.power.sign(); //remove the sign\n\n            symbol.power = symbol.power.abs(); //if the symbols is imagary then we place in the imaginary part. We'll return it \n            //as a product\n\n            if (isConstant && symbol.multiplier.lessThan(0)) {\n              img = Symbol.imaginary();\n              symbol.multiplier = symbol.multiplier.abs();\n            }\n\n            var q = symbol.multiplier.toDecimal(),\n                qa = Math.abs(q),\n                t = Math.sqrt(qa);\n            var m; //it's a perfect square so take the square\n\n            if (isInt(t)) {\n              m = new Symbol(t);\n            } else if (isInt(q)) {\n              var factors = Math2.ifactor(q);\n              var tw = 1;\n\n              for (var x in factors) {\n                var n = factors[x],\n                    nn = n - n % 2; //get out the whole numbers\n\n                if (nn) {\n                  //if there is a whole number ...\n                  var w = Math.pow(x, nn);\n                  tw *= Math.pow(x, nn / 2); //add to total wholes\n\n                  q /= w; //reduce the number by the wholes\n                }\n              }\n\n              m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n            } else {\n              //reduce the numerator and denominator using prime factorization\n              var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n              var r = [new Symbol(1), new Symbol(1)];\n              var sq = [new Symbol(1), new Symbol(1)];\n\n              for (var i = 0; i < 2; i++) {\n                var n = c[i]; //get the prime factors and loop through each. \n\n                pfactor(n).each(function (x) {\n                  x = Symbol.unwrapPARENS(x);\n                  var b = x.clone().toLinear();\n                  var p = Number(x.power); //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n\n                  var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n\n                  var w = (p - rem) / 2; //get the whole numbers of n/2\n\n                  r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                  sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                });\n              }\n\n              m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n            } //strip the multiplier since we already took the sqrt\n\n\n            symbol = symbol.toUnitMultiplier(true); //if the symbol is one just return one and not the sqrt function\n\n            if (symbol.isOne()) {\n              retval = symbol;\n            } else if (even(symbol.power.toString())) {\n              //just raise it to the 1/2\n              retval = _.pow(symbol.clone(), new Symbol(0.5));\n            } else {\n              retval = _.symfunction(SQRT, [symbol]);\n            } //put back the sign that was removed earlier\n\n\n            if (sign < 0) retval.power.negate();\n            if (m) retval = _.multiply(m, retval);\n            if (img) retval = _.multiply(img, retval);\n          }\n\n      if (is_negative && Settings.PARSE2NUMBER) return _.parse(retval);\n      return retval;\n    }\n\n    function scientific(symbol, sigfigs) {\n      //Just set the flag and keep it moving. Symbol.toString will deal with how to \n      //display this\n      symbol.scientific = sigfigs || 10;\n      return symbol;\n    }\n    /**\n     * \n     * @param {Symbol} num - the number being raised\n     * @param {Symbol} p - the exponent\n     * @param {type} prec - the precision wanted\n     * @param {bool} asbig - true if a bigDecimal is wanted\n     * @returns {Symbol}\n     */\n    //TODO: this method needs serious optimization\n\n\n    function nthroot(num, p, prec, asbig) {\n      if (typeof asbig === 'undefined') asbig = true;\n      prec = prec || 25;\n      if (!isSymbol(p)) p = _.parse(p);\n\n      if (isInt(num) && p.isConstant()) {\n        var sign = num.sign(),\n            x;\n        num = abs(num); //remove the sign\n\n        var idx = num + '-' + p;\n\n        if (idx in Settings.CACHE.roots) {\n          x = new bigInt(Settings.CACHE.roots[idx]);\n          if (!even(p)) x = x.multiply(sign);\n        } else {\n          if (num < 18446744073709551616) //2^64\n            x = Frac.create(Math.pow(num, 1 / p));else x = Math2.nthroot(num, p);\n        }\n\n        if (isInt(x) || Settings.PARSE2NUMBER) {\n          if (asbig) return new Symbol(x);\n          return new Symbol(x.toDecimal(prec));\n        }\n      }\n\n      if (Number(p) === 2) return _.sqrt(num);\n      return _.symfunction('nthroot', arguments);\n    }\n\n    function pfactor(symbol) {\n      //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n      //More Big Number issues >:(\n      if (symbol.greaterThan(9.999999999998891e+41)) return symbol; //Fix issue #298\n\n      if (symbol.equals(Math.PI)) return new Symbol(Math.PI); //evaluate the symbol to merge constants\n\n      symbol = evaluate(symbol.clone());\n\n      if (symbol.isConstant()) {\n        var retval = new Symbol(1);\n        var m = symbol.toString();\n\n        if (isInt(m)) {\n          var factors = Math2.ifactor(m);\n\n          for (var factor in factors) {\n            var p = factors[factor];\n            retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n          }\n        } else {\n          var n = pfactor(new Symbol(symbol.multiplier.num));\n          var d = pfactor(new Symbol(symbol.multiplier.den));\n          retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n        }\n      } else retval = _.symfunction('pfactor', arguments);\n\n      return retval;\n    }\n    /**\n     * Get's the real part of a complex number. Return number if real\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function realpart(symbol) {\n      return symbol.realpart();\n    }\n    /**\n     * Get's the imaginary part of a complex number\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function imagpart(symbol) {\n      return symbol.imagpart();\n    }\n    /**\n     * Computes the conjugate of a complex number\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function conjugate(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n    }\n    /**\n     * Returns the arugment of a complex number\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      if (re.isConstant() && im.isConstant()) return new Symbol(Math.atan2(im, re));\n      return _.symfunction('atan2', [im, re]);\n    }\n    /**\n     * Returns the arugment of a complex number\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n\n      if (re.isConstant() && im.isConstant()) {\n        if (im.equals(0) && re.equals(-1)) {\n          return _.parse('pi');\n        } else if (im.equals(1) && re.equals(0)) {\n          return _.parse('pi/2');\n        } else if (im.equals(1) && re.equals(1)) {\n          return _.parse('pi/4');\n        }\n\n        return new Symbol(Math.atan2(im, re));\n      }\n\n      return _.symfunction('atan2', [im, re]);\n    }\n    /**\n     * Returns the polarform of a complex number\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function polarform(symbol) {\n      var p, r, e, theta;\n      p = Symbol.toPolarFormArray(symbol);\n      theta = p[1];\n      r = p[0];\n      e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n      return _.multiply(r, e);\n    }\n    /**\n     * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\n     * @param {Symbol} symbol\n     * @returns {Symbol}\n     */\n\n\n    function rectform(symbol) {\n      //TODO: e^((i*pi)/4)\n      var original = symbol.clone();\n\n      try {\n        var f, p, q, s, h, d, n;\n        f = decompose_fn(symbol, 'e', true);\n        p = _.divide(f.x.power, Symbol.imaginary());\n        q = evaluate(trig.tan(p));\n        s = _.pow(f.a, new Symbol(2));\n        d = q.getDenom(true);\n        n = q.getNum();\n        h = Symbol.hyp(n, d); //check \n\n        if (h.equals(f.a)) {\n          return _.add(d, _.multiply(Symbol.imaginary(), n));\n        } else {\n          return original;\n        }\n      } catch (e) {\n        return original;\n      }\n    }\n\n    function symMinMax(f, args) {\n      args.map(function (x) {\n        x.numVal = evaluate(x).multiplier;\n      });\n      var l, a, b, a_val, b_val;\n\n      while (true) {\n        l = args.length;\n        if (l < 2) return args[0];\n        a = args.pop();\n        b = args[l - 2];\n\n        if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n          args.pop();\n          args.push(a);\n        }\n      }\n    }\n    /**\n     * Returns maximum of a set of numbers\n     * @returns {Symbol}\n     */\n\n\n    function max() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.max.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('max', args);\n      return _.symfunction('max', args);\n    }\n    /**\n     * Returns minimum of a set of numbers\n     * @returns {Symbol}\n     */\n\n\n    function min() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.min.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('min', args);\n      return _.symfunction('min', args);\n    }\n    /**\n     * Returns the sign of a number\n     * @param {Symbol} x\n     * @returns {Symbol}\n     */\n\n\n    function sign(x) {\n      if (x.isConstant(true)) return new Symbol(Math.sign(evaluate(x)));\n      return _.symfunction('sign', arguments);\n    }\n\n    function sort(symbol, opt) {\n      opt = opt ? opt.toString() : 'asc';\n\n      var getval = function (e) {\n        if (e.group === N) return e.multiplier;\n\n        if (e.group === FN) {\n          if (e.fname === '') return getval(e.args[0]);\n          return e.fname;\n        }\n\n        if (e.group === S) return e.power;\n        return e.value;\n      };\n\n      var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n      return new Vector(symbols.sort(function (a, b) {\n        var aval = getval(a),\n            bval = getval(b);\n        if (opt === 'desc') return bval - aval;\n        return aval - bval;\n      }));\n    }\n    /**\n     * The log function\n     * @param {Symbol} symbol\n     * @param {Symbol} base\n     * @returns {Symbol}\n     */\n\n\n    function log(symbol, base) {\n      if (symbol.equals(1)) {\n        return new Symbol(0);\n      }\n\n      var retval;\n\n      if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n        return _.divide(log(symbol.args[0]), new Symbol(2));\n      } //log(0) is undefined so complain\n\n\n      if (symbol.equals(0)) {\n        throw new UndefinedError(Settings.LOG + '(0) is undefined!');\n      } //deal with imaginary values\n\n\n      if (symbol.isImaginary()) {\n        return complex.evaluate(symbol, Settings.LOG);\n        /*\n         var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),\n         b = format('({0})*PI/2', Settings.IMAGINARY);\n         \n         return _.add(_.parse(a), _.parse(b));\n         */\n      }\n\n      if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n        /*\n         var log_sym = Math2.bigLog(symbol.multiplier);\n         var log_base = Math2.bigLog(base.multiplier);\n         retval = new Symbol(log_sym.divide());\n         */\n        var log_sym = Math.log(symbol);\n        var log_base = Math.log(base);\n        retval = new Symbol(log_sym / log_base);\n      } else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n        symbol.power.negate(); //move the negative outside but keep the positive inside :)\n\n        retval = log(symbol).negate();\n      } else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n        var p = symbol.power;\n        retval = isSymbol(p) ? p : new Symbol(p);\n      } else if (symbol.group === FN && symbol.fname === 'exp') {\n        var s = symbol.args[0];\n        if (symbol.multiplier.equals(1)) retval = _.multiply(s, new Symbol(symbol.power));else retval = _.symfunction(Settings.LOG, [symbol]);\n      } else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n        var img_part;\n\n        if (symbol.multiplier.lessThan(0)) {\n          symbol.negate();\n          img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n        }\n\n        retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n        if (img_part) retval = _.add(retval, img_part);\n      } else {\n        var s;\n\n        if (!symbol.power.equals(1)) {\n          s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n          symbol.toLinear();\n        } //log(a,a) = 1 since the base is allowed to be changed. \n        //This was pointed out by Happypig375 in issue #280\n\n\n        if (arguments.length > 1 && allSame(arguments)) retval = new Symbol(1);else retval = _.symfunction(Settings.LOG, arguments);\n        if (s) retval = _.multiply(s, retval);\n      }\n\n      return retval;\n    }\n    /**\n     * Round a number up to s decimal places\n     * @param {Number} x\n     * @param {int} s - the number of decimal places\n     * @returns {undefined}\n     */\n\n\n    function round(x, s) {\n      var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n\n      if (x.isConstant() && sIsConstant) {\n        var v, e, exp, retval;\n        v = x; //round the coefficient of then number but not the actual decimal value\n        //we know this because a negative number was passed\n\n        if (s && s.lessThan(0)) {\n          s = abs(s); //convert the number to exponential form\n\n          e = Number(x).toExponential().toString().split('e'); //point v to the coefficient of then number\n\n          v = e[0]; //set the expontent\n\n          exp = e[1];\n        } //round the number to the requested precision\n\n\n        retval = new Symbol(nround(v, Number(s || 0))); //if there's a exponent then put it back\n\n        return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)));\n      }\n\n      return _.symfunction('round', arguments);\n    }\n    /**\n     * Gets the quadrant of the trig function\n     * @param {Frac} m\n     * @returns {Int}\n     */\n\n\n    function getQuadrant(m) {\n      var v = m % 2,\n          quadrant;\n      if (v < 0) v = 2 + v; //put it in terms of pi\n\n      if (v >= 0 && v <= 0.5) quadrant = 1;else if (v > 0.5 && v <= 1) quadrant = 2;else if (v > 1 && v <= 1.5) quadrant = 3;else quadrant = 4;\n      return quadrant;\n    }\n    /*\n     * Serves as a bridge between numbers and bigNumbers\n     * @param {Frac|Number} n\n     * @returns {Symbol} \n     */\n\n\n    function bigConvert(n) {\n      if (!isFinite(n)) {\n        var sign = Math.sign(n);\n        var r = new Symbol(String(Math.abs(n)));\n        r.multiplier = r.multiplier.multiply(new Frac(sign));\n        return r;\n      }\n\n      if (isSymbol(n)) return n;\n\n      if (typeof n === 'number') {\n        try {\n          n = Frac.simple(n);\n        } catch (e) {\n          n = new Frac(n);\n        }\n      }\n\n      var symbol = new Symbol(0);\n      symbol.multiplier = n;\n      return symbol;\n    }\n\n    ;\n\n    function clean(symbol) {\n      // handle functions with numeric values\n      // handle denominator within denominator\n      // handle trig simplifications\n      var g = symbol.group,\n          retval; //Now let's get to work\n\n      if (g === CP) {\n        var num = symbol.getNum(),\n            den = symbol.getDenom() || new Symbol(1),\n            p = Number(symbol.power),\n            factor = new Symbol(1);\n\n        if (Math.abs(p) === 1) {\n          den.each(function (x) {\n            if (x.group === CB) {\n              factor = _.multiply(factor, clean(x.getDenom()));\n            } else if (x.power.lessThan(0)) {\n              factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n            }\n          });\n          var new_den = new Symbol(0); //now divide out the factor and add to new den\n\n          den.each(function (x) {\n            new_den = _.add(_.divide(x, factor.clone()), new_den);\n          });\n          factor.invert(); //invert so it can be added to the top\n\n          var new_num;\n\n          if (num.isComposite()) {\n            new_num = new Symbol(0);\n            num.each(function (x) {\n              new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n            });\n          } else new_num = _.multiply(factor, num);\n\n          retval = _.divide(new_num, new_den);\n        }\n      } else if (g === CB) {\n        retval = new Symbol(1);\n        symbol.each(function (x) {\n          retval = _.multiply(retval, _.clean(x));\n        });\n      } else if (g === FN) {\n        if (symbol.args.length === 1 && symbol.args[0].isConstant()) retval = block('PARSE2NUMBER', function () {\n          return _.parse(symbol);\n        }, true);\n      }\n\n      if (!retval) retval = symbol;\n      return retval;\n    }\n    /**\n     * Expands a symbol\n     * @param symbol\n     */\n\n\n    function expand(symbol) {\n      //deal with parenthesis\n      if (symbol.group === FN && symbol.fname === '') {\n        return _.expand(symbol.args[0]);\n      } //TODO - some test need to be verified in order to implement this\n\n      /*\n       if(symbol.group === FN) {\n       symbol.args[0] = _.expand(symbol.args[0]);\n       symbol.updateHash();\n       return symbol;\n       }\n       */\n\n\n      if (!symbol.symbols) return symbol; //nothing to do\n\n      var original = symbol.clone();\n\n      try {\n        if (!symbol.symbols) return symbol; //expand all the symbols\n\n        for (var s in symbol.symbols) {\n          var x = symbol.symbols[s];\n          symbol.symbols[s] = expand(x);\n        }\n\n        symbol = _.parse(symbol);\n        var p = symbol.power,\n            m = symbol.multiplier.clone(),\n            pn = Number(p);\n\n        if (isInt(pn) && pn > 0 && symbol.isComposite()) {\n          var f = new Symbol(0); //we loop through the f and make sure that it's fully expanded\n\n          for (var x in symbol.symbols) {\n            var sym = symbol.symbols[x];\n            if (sym.power.greaterThan(1)) sym = _.expand(sym);\n            f = _.add(f, sym);\n          } //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)\n          //we have n=p-1=2 iterations where p=3 in this case\n\n\n          var n = pn - 1; //Initiate with the first term. Remember that we have p-1 iterations because\n          //the first iteration is equal to P where p is the polynomial\n\n          var result = f.clone(); //initiate this as the first term\n          //the first loop is the top iterator and remains untouched. No sub-symbols\n          //from this symbol are allowed to be touched\n\n          for (var i = 0; i < n; i++) {\n            var t = new Symbol(0);\n\n            for (var x in f.symbols) {\n              var a = f.symbols[x]; //we now loop through the \n\n              for (var y in result.symbols) {\n                var b = _.multiply(a.clone(), result.symbols[y]); //the result must always be a composite. If not expand\n\n\n                if (b.group === CB) b = _.expand(b);\n                t = _.add(t, b);\n              }\n            }\n\n            ;\n            result = t;\n          } //put back the multiplier\n\n\n          if (!m.equals(1)) {\n            for (var s in result.symbols) {\n              var x = result.symbols[s];\n              x.multiplier = x.multiplier.multiply(m);\n              if (x.isComposite()) x.distributeMultiplier();\n              symbol.symbols[s] = x;\n            }\n          }\n\n          return result;\n        } else if (symbol.group === CB) {\n          //check if the symbol has composites\n          var hascomposites = false,\n              sp = symbol.power.clone(),\n              sign = symbol.power.sign();\n\n          for (var x in symbol.symbols) {\n            var sub = symbol.symbols[x];\n\n            if (sub.isComposite()) {\n              hascomposites = true;\n              break;\n            }\n\n            if (isSymbol(sub.power) || isSymbol(sp)) {\n              sub.power = _.multiply(sub.power, Symbol(sp));\n              sub.group = EX;\n            } else sub.power = sub.power.multiply(sp);\n          }\n\n          symbol.toLinear(); //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing\n\n          symbol = _.parse(symbol.text());\n          if (!hascomposites) return symbol; //nothing to do here\n\n          var result = new Symbol(0);\n          var composites = [],\n              non_composites = new Symbol(symbol.multiplier); //sort them out\n\n          for (var s in symbol.symbols) {\n            var x = symbol.symbols[s];\n            if (x.group === EX) continue;\n\n            if (x.isComposite()) {\n              var p = x.power,\n                  isDenom = false;\n              ;\n\n              if (isInt(p)) {\n                if (p < 0) {\n                  x.power.negate();\n                  isDenom = true;\n                }\n              }\n\n              if (isDenom) {\n                x.power.negate();\n                non_composites = _.multiply(non_composites, x);\n              } else composites.push(x);\n            } else non_composites = _.multiply(non_composites, x);\n          } //grab the first symbol since we'll loop over that one to begin\n\n\n          result = composites.pop();\n\n          while (composites.length) {\n            var s = composites.pop();\n            var t = new Symbol(0);\n            result.each(function (x) {\n              s.each(function (y) {\n                var prod = _.multiply(x.clone(), y.clone());\n\n                t = _.add(t, prod);\n              });\n            });\n            result = t;\n          }\n\n          var finalResult = new Symbol(0); //put back the multiplier\n\n          result.each(function (x) {\n            finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));\n          }); //expand the power\n\n          finalResult.power = finalResult.power.multiply(sp.abs());\n          symbol = _.expand(finalResult);\n          if (sign < 0) symbol.invert();\n        }\n      } catch (e) {\n        return original;\n      }\n\n      return symbol;\n    }\n    /**\n     * Returns an identity matrix of nxn\n     * @param {Number} n\n     * @returns {Matrix}\n     */\n\n\n    function imatrix(n) {\n      return Matrix.identity(n);\n    }\n    /**\n     * Retrieves and item from a vector\n     * @param {Vector} vector\n     * @param {Number} index\n     * @returns {Vector|Symbol}\n     */\n\n\n    function vecget(vector, index) {\n      if (index.isConstant() && isInt(index)) return vector.elements[index];\n      return _.symfunction('vecget', arguments);\n    }\n    /**\n     * Removes duplicates from a vector\n     * @param {Vector} vector\n     * @param {Number} tolerance\n     * @returns {Vector}\n     */\n\n\n    function vectrim(vector, tolerance) {\n      tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n      vector = vector.clone();\n      tolerance = Number(tolerance); //place algebraic solutions first\n\n      vector.elements.sort(function (a, b) {\n        return b.group - a.group;\n      }); //depending on the start point we may have duplicates so we need to clean those up a bit.\n      //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n\n      vector.elements = removeDuplicates(vector.elements, function (a, b) {\n        var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n        return diff <= tolerance;\n      });\n      return vector;\n    }\n    /**\n     * Set a value for a vector at a given index\n     * @param {Vector} vector\n     * @param {Number} index\n     * @param {Symbol} value\n     * @returns {Vector}\n     */\n\n\n    function vecset(vector, index, value) {\n      if (!index.isConstant) return _.symfunction('vecset', arguments);\n      vector.elements[index] = value;\n      return vector;\n    }\n\n    function matget(matrix, i, j) {\n      if (i.isConstant() && j.isConstant()) return matrix.elements[i][j];\n      return _.symfunction('matget', arguments);\n    }\n\n    function matgetrow(matrix, i) {\n      if (i.isConstant()) return new Matrix(matrix.elements[i]);\n      return _.symfunction('matgetrow', arguments);\n    }\n\n    function matsetrow(matrix, i, x) {\n      //handle symbolics\n      if (!i.isConstant()) return _.symfunction('matsetrow', arguments);\n      if (matrix.elements[i].length !== x.elements.length) throw new DimensionError('Matrix row must match row dimensions!');\n      var M = matrix.clone();\n      M.elements[i] = x.clone().elements;\n      return M;\n    }\n\n    function matgetcol(matrix, col_index) {\n      //handle symbolics\n      if (!col_index.isConstant()) return _.symfunction('matgetcol', arguments);\n      col_index = Number(col_index);\n      var M = Matrix.fromArray([]);\n      matrix.each(function (x, i, j) {\n        if (j === col_index) {\n          M.elements.push([x.clone()]);\n        }\n      });\n      return M;\n    }\n\n    function matsetcol(matrix, j, col) {\n      //handle symbolics\n      if (!j.isConstant()) return _.symfunction('matsetcol', arguments);\n      j = Number(j);\n      if (matrix.rows() !== col.elements.length) throw new DimensionError('Matrix columns must match number of columns!');\n      col.each(function (x, i) {\n        matrix.set(i - 1, j, x.elements[0].clone());\n      });\n      return matrix;\n    }\n\n    function matset(matrix, i, j, value) {\n      matrix.elements[i][j] = value;\n      return matrix;\n    } //the constructor for vectors\n\n\n    function vector() {\n      return new Vector([].slice.call(arguments));\n    } //the constructor for matrices\n\n\n    function matrix() {\n      return Matrix.fromArray(arguments);\n    } //the constructor for sets\n\n\n    function set() {\n      return Set.fromArray(arguments);\n    }\n\n    function determinant(symbol) {\n      if (isMatrix(symbol)) {\n        return symbol.determinant();\n      }\n\n      return symbol;\n    }\n\n    function size(symbol) {\n      var retval;\n      if (isMatrix(symbol)) retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];else if (isVector(symbol) || isSet(symbol)) retval = new Symbol(symbol.elements.length);else err('size expects a matrix or a vector');\n      return retval;\n    }\n\n    function dot(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.dot(vec2);\n      err('function dot expects 2 vectors');\n    }\n\n    function cross(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.cross(vec2);\n      err('function cross expects 2 vectors');\n    }\n\n    function transpose(mat) {\n      if (isMatrix(mat)) return mat.transpose();\n      err('function transpose expects a matrix');\n    }\n\n    function invert(mat) {\n      if (isMatrix(mat)) return mat.invert();\n      err('invert expects a matrix');\n    } //basic set functions\n\n\n    function union(set1, set2) {\n      return set1.union(set2);\n    }\n\n    function intersection(set1, set2) {\n      return set1.intersection(set2);\n    }\n\n    function contains(set1, e) {\n      return set1.contains(e);\n    }\n\n    function difference(set1, set2) {\n      return set1.difference(set2);\n    }\n\n    function intersects(set1, set2) {\n      return new Symbol(Number(set1.intersects(set2)));\n    }\n\n    function is_subset(set1, set2) {\n      return new Symbol(Number(set1.is_subset(set2)));\n    }\n\n    function print() {\n      arguments2Array(arguments).map(function (x) {\n        console.log(x.toString());\n      });\n    }\n\n    function testSQRT(symbol) {\n      //wrap the symbol in sqrt. This eliminates one more check down the line.\n      if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n        var sign = symbol.power.sign(); //don't devide the power directly. Notice the use of toString. This makes it possible\n        //to use a bigNumber library in the future\n\n        var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear()); //place back the sign of the power\n\n        if (sign < 0) retval.invert();\n        return retval;\n      }\n\n      return symbol;\n    } //try to reduce a symbol by pulling its power\n\n\n    function testPow(symbol) {\n      if (symbol.group === P) {\n        var v = symbol.value;\n        var fct = primeFactors(v)[0]; //safety\n\n        if (!fct) {\n          warn('Unable to compute prime factors. This should not happen. Please review and report.');\n          return symbol;\n        }\n\n        var n = new Frac(Math.log(v) / Math.log(fct)),\n            p = n.multiply(symbol.power); //we don't want a more complex number than before \n\n        if (p.den > symbol.power.den) return symbol;\n        if (isInt(p)) symbol = Symbol(Math.pow(fct, p));else symbol = new Symbol(fct).setPower(p);\n      }\n\n      return symbol;\n    } //Linke the functions to the parse so they're available outside of the library\n    //This is strictly for convenience and may be deprecated.\n\n\n    this.expand = expand;\n    this.clean = clean;\n    this.sqrt = sqrt;\n    this.log = log;\n    this.nthroot = nthroot;\n    this.arg = arg;\n    this.conjugate = conjugate;\n    this.imagpart = imagpart;\n    this.realpart = realpart; //Parser.methods ===============================================================\n\n    this.addPreprocessor = function (name, action, order, shift_cells) {\n      var names = preprocessors.names;\n      var actions = preprocessors.actions;\n      if (typeof action !== 'function') //the person probably forgot to specify a name\n        throw new PreprocessorError('Incorrect parameters. Function expected!');\n\n      if (!order) {\n        names.push(name);\n        actions.push(action);\n      } else {\n        if (shift_cells) {\n          names.splice(order, 0, name);\n          actions.splice(order, 0, action);\n        } else {\n          names[order] = name;\n          actions[order] = action;\n        }\n      }\n    };\n\n    this.getPreprocessors = function () {\n      var preprocessors = {};\n\n      for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n        var name = preprocessors.names[i];\n        preprocessors[name] = {\n          order: i,\n          action: preprocessors.actions[i]\n        };\n      }\n\n      return preprocessors;\n    };\n\n    this.removePreprocessor = function (name, shift_cells) {\n      var i = preprocessors.names.indexOf(name);\n\n      if (shift_cells) {\n        remove(preprocessors.names, i);\n        remove(preprocessors.actions, i);\n      } else {\n        preprocessors.names[i] = undefined;\n        preprocessors.actions[i] = undefined;\n      }\n    }; //The loader for functions which are not part of Math2\n\n\n    this.mapped_function = function () {\n      var subs = {},\n          params = this.params;\n\n      for (var i = 0; i < params.length; i++) subs[params[i]] = arguments[i];\n\n      return _.parse(this.body, subs);\n    };\n    /**\n     * Adds two symbols\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    this.add = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b); //we're dealing with two symbols\n\n      if (aIsSymbol && bIsSymbol) {\n        //forward the adding of symbols with units to the Unit module\n        if (a.unit || b.unit) {\n          return _.Unit.add(a, b);\n        } //handle Infinity\n        //https://www.encyclopediaofmath.org/index.php/Infinity\n\n\n        if (a.isInfinity || b.isInfinity) {\n          var aneg = a.multiplier.lessThan(0),\n              bneg = b.multiplier.lessThan(0);\n\n          if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n            throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n          }\n\n          var inf = Symbol.infinity();\n          if (bneg) inf.negate();\n          return inf;\n        }\n\n        if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n          a.distributeMultiplier();\n          b.distributeMultiplier();\n        } //no need to waste time on zeroes\n\n\n        if (a.multiplier.equals(0)) return b;\n        if (b.multiplier.equals(0)) return a;\n\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n          return result;\n        }\n\n        var g1 = a.group,\n            g2 = b.group,\n            ap = a.power.toString(),\n            bp = b.power.toString(); //always keep the greater group on the left. \n\n        if (g1 < g2 || g1 === g2 && ap > bp && bp > 0) {\n          return this.add(b, a);\n        }\n        /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\n         * because it doesn't know which one to prioritize. */\n        //correction to PL dilemma\n\n\n        if (g1 === CB && g2 === PL && a.value === b.value) {\n          //swap\n          var t = a;\n          a = b;\n          b = t;\n          g1 = a.group;\n          g2 = b.group;\n          ap = a.power.toString();\n          bp = b.power.toString();\n        }\n\n        var powEQ = ap === bp,\n            v1 = a.value,\n            v2 = b.value,\n            aIsComposite = a.isComposite(),\n            bIsComposite = b.isComposite(),\n            h1,\n            h2,\n            result;\n        if (aIsComposite) h1 = text(a, 'hash');\n        if (bIsComposite) h2 = text(b, 'hash');\n\n        if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n          return this.add(b, a);\n        } //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n\n\n        if (g1 === PL && g2 === PL) {\n          v1 = h1;\n          v2 = h2;\n        }\n\n        var PN = g1 === P && g2 === N,\n            PNEQ = a.value === b.multiplier.toString(),\n            valEQ = v1 === v2 || h1 === h2 && h1 !== undefined || PN && PNEQ; //equal values, equal powers\n\n        if (valEQ && powEQ && g1 === g2) {\n          //make sure to convert N to something P can work with\n          if (PN) b = b.convert(P); //CL\n          //handle PL\n\n          if (g1 === PL && (g2 === S || g2 === P)) {\n            a.distributeMultiplier();\n            result = a.attach(b);\n          } else {\n            result = a; //CL\n\n            if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n              for (var s in b.symbols) {\n                var x = b.symbols[s];\n                result.attach(x);\n              }\n            } else result.multiplier = result.multiplier.add(b.multiplier);\n          }\n        } //equal values uneven powers\n        else if (valEQ && g1 !== PL) {\n            //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n            if (g1 === CP && g2 === PL) {\n              b.insert(a);\n              result = b;\n            } else {\n              result = Symbol.shell(PL).attach([a, b]); //update the hash\n\n              result.value = g1 === PL ? h1 : v1;\n            }\n          } else if (aIsComposite && a.isLinear()) {\n            var canIterate = g1 === g2,\n                bothPL = g1 === PL && g2 === PL; //we can only iterate group PL if they values match\n\n            if (bothPL) canIterate = a.value === b.value; //distribute the multiplier over the entire symbol\n\n            a.distributeMultiplier();\n\n            if (b.isComposite() && b.isLinear() && canIterate) {\n              b.distributeMultiplier(); //CL\n\n              for (var s in b.symbols) {\n                var x = b.symbols[s];\n                a.attach(x);\n              }\n\n              result = a;\n            } //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n            else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                result = Symbol.shell(CP).attach([a, b]);\n                result.updateHash();\n              } else {\n                result = a.attach(b);\n              }\n          } else {\n            if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n              var m = b.multiplier.clone();\n              b = sqrt(b.toUnitMultiplier().toLinear());\n              b.multiplier = m;\n            } //fix for issue #3 and #159\n\n\n            if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n              result = _.add(expand(a), expand(b));\n            } else {\n              result = Symbol.shell(CP).attach([a, b]);\n              result.updateHash();\n            }\n          }\n\n        if (result.multiplier.equals(0)) result = new Symbol(0); //make sure to remove unnecessary wraps\n\n        if (result.length === 1) {\n          var m = result.multiplier;\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(m);\n        }\n\n        return result;\n      } else {\n        //keep symbols to the right \n        if (bIsSymbol && !aIsSymbol) {\n          var t = a;\n          a = b;\n          b = t; //swap\n\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n\n        var bIsMatrix = isMatrix(b);\n\n        if (aIsSymbol && bIsMatrix) {\n          b.eachElement(function (e) {\n            return _.add(a.clone(), e);\n          });\n        } else {\n          if (isMatrix(a) && bIsMatrix) {\n            b = a.add(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.add(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return _.add(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                    l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\n     * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    this.subtract = function (a, b) {\n      var aIsSymbol = aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b),\n          t;\n\n      if (aIsSymbol && bIsSymbol) {\n        if (a.unit || b.unit) {\n          return _.Unit.subtract(a, b);\n        }\n\n        return this.add(a, b.negate());\n      } else {\n        if (bIsSymbol && isVector(a)) {\n          b = a.map(function (x) {\n            return _.subtract(x, b.clone());\n          });\n        } else if (aIsSymbol && isVector(b)) {\n          b = b.map(function (x) {\n            return _.subtract(a.clone(), x);\n          });\n        } else if (isVector(a) && isVector(b)) {\n          if (a.dimensions() === b.dimensions()) b = a.subtract(b);else _.error('Unable to subtract vectors. Dimensions do not match.');\n        } else if (isMatrix(a) && isVector(b)) {\n          if (b.elements.length === a.rows()) {\n            var M = new Matrix(),\n                l = a.cols();\n            b.each(function (e, i) {\n              var row = [];\n\n              for (var j = 0; j < l; j++) {\n                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n              }\n\n              M.elements.push(row);\n            });\n            return M;\n          } else err('Dimensions must match!');\n        } else if (isVector(a) && isMatrix(b)) {\n          var M = b.clone().negate();\n          return _.add(M, a);\n        } else if (isMatrix(a) && isMatrix(b)) {\n          b = a.subtract(b);\n        }\n\n        return b;\n      }\n    };\n    /**\n     * Gets called when the parser finds the * operator. See this.add\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    this.multiply = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b); //we're dealing with function assignment here\n\n      if (aIsSymbol && b instanceof Collection) {\n        b.elements.push(a);\n        return b;\n      }\n\n      if (aIsSymbol && bIsSymbol) {\n        //if it has a unit then add it and return it right away.\n        if (b.isUnit) {\n          var result = a.clone();\n          a.unit = b;\n          return result;\n        } //if it has units then just forward that problem to the unit module\n\n\n        if (a.unit || b.unit) {\n          return _.Unit.multiply(a, b);\n        } //handle Infinty\n\n\n        if (a.isInfinity || b.isInfinity) {\n          if (a.equals(0) || b.equals(0)) throw new UndefinedError(a + '*' + b + ' is undefined!'); //x/infinity\n\n          if (b.power.lessThan(0)) {\n            if (!a.isInfinity) {\n              return new Symbol(0);\n            } else {\n              throw new UndefinedError('Infinity/Infinity is not defined!');\n            }\n          }\n\n          var sign = a.multiplier.multiply(b.multiplier).sign(),\n              inf = Symbol.infinity();\n\n          if (a.isConstant() || b.isConstant() || a.isInfinity && b.isInfinity) {\n            if (sign < 0) inf.negate();\n            return inf;\n          }\n        } //the quickies\n\n\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n          var retval = new Symbol(t);\n          return retval;\n        } //don't waste time\n\n\n        if (a.isOne()) {\n          return b.clone();\n        }\n\n        if (b.isOne()) {\n          return a.clone();\n        }\n\n        if (a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol(0);\n        if (b.group > a.group && !(b.group === CP)) return this.multiply(b, a); //correction for PL/CB dilemma\n\n        if (a.group === CB && b.group === PL && a.value === b.value) {\n          var t = a;\n          a = b;\n          b = t; //swap\n        }\n\n        var g1 = a.group,\n            g2 = b.group,\n            bnum = b.multiplier.num,\n            bden = b.multiplier.den;\n\n        if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n          //unwrap sqrt\n          var a_pow = a.power;\n          a = a.args[0].clone();\n          a.setPower(new Frac(0.5).multiply(a_pow));\n          g1 = a.group;\n        } //simplify n/sqrt(n). Being very specific\n        else if (g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n            a = _.symfunction(SQRT, [b.clone()]);\n            b = new Symbol(1);\n          }\n\n        ;\n        var v1 = a.value,\n            v2 = b.value,\n            sign = new Frac(a.sign()),\n            //since P is just a morphed version of N we need to see if they relate\n        ONN = g1 === P && g2 === N && b.multiplier.equals(a.value),\n            //don't multiply the multiplier of b since that's equal to the value of a\n        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n            result = a.clone().toUnitMultiplier();\n        b = b.clone().toUnitMultiplier(true); //further simplification of sqrt\n\n        if (g1 === FN && g2 === FN) {\n          var u = a.args[0].clone();\n          var v = b.args[0].clone();\n\n          if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n            var q = _.divide(u, v).invert();\n\n            if (q.gt(1) && isInt(q)) {\n              //b contains a factor a which can be moved to a\n              result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n              b = new Symbol(1);\n            }\n          }\n\n          if (a.fname === FACTORIAL && b.fname === FACTORIAL) {\n            if (a.power.equals(1) && b.power.equals(-1) && _.subtract(v.clone(), u.clone()).equals(1)) {\n              result = _.divide(u, v);\n              b = new Symbol(1);\n            }\n          }\n        } //if both are PL then their hashes have to match\n\n\n        if (v1 === v2 && g1 === PL && g1 === g2) {\n          v1 = a.text('hash');\n          v2 = b.text('hash');\n        } //same issue with (x^2+1)^x*(x^2+1)\n        //EX needs an exception when multiplying because it needs to recognize\n        //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n\n\n        if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n          v1 = text(a, 'hash', EX);\n        }\n\n        if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n          var p1 = a.power,\n              p2 = b.power,\n              isSymbolP1 = isSymbol(p1),\n              isSymbolP2 = isSymbol(p2),\n              toEX = isSymbolP1 || isSymbolP2; //TODO: this needs cleaning up\n\n          if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n            result = new Symbol(0);\n            a.each(function (x) {\n              result = _.add(result, _.multiply(x, b.clone()));\n            }, true);\n          } else {\n            //add the powers\n            result.power = toEX ? _.add(!isSymbol(p1) ? new Symbol(p1) : p1, !isSymbol(p2) ? new Symbol(p2) : p2) : g1 === N\n            /*don't add powers for N*/\n            ? p1 : p1.add(p2); //eliminate zero power values and convert them to numbers\n\n            if (result.power.equals(0)) result = result.convert(N); //properly convert to EX\n\n            if (toEX) result.convert(EX); //take care of imaginaries\n\n            if (a.imaginary && b.imaginary) {\n              var isEven = even(result.power % 2);\n\n              if (isEven) {\n                result = new Symbol(1);\n                m.negate();\n              }\n            } //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n\n\n            if (result.group !== EX && result.previousGroup) result.previousGroup = undefined; //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n            //the sign but this isn't true if they're equals symbols\n\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          }\n        } else if (g1 === CB && a.isLinear()) {\n          if (g2 === CB) b.distributeExponent();\n\n          if (g2 === CB && b.isLinear()) {\n            for (var s in b.symbols) {\n              var x = b.symbols[s];\n              result = result.combine(x);\n            }\n\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          } else {\n            result.combine(b);\n          }\n        } else {\n          //the multiplier was already handled so nothing left to do\n          if (g1 !== N) {\n            if (g1 === CB) {\n              result.distributeExponent();\n              result.combine(b);\n            } else if (!b.isOne()) {\n              var bm = b.multiplier.clone();\n              b.toUnitMultiplier();\n              result = Symbol.shell(CB).combine([result, b]); //transfer the multiplier to the outside\n\n              result.multiplier = result.multiplier.multiply(bm);\n            }\n          } else {\n            result = b.clone().toUnitMultiplier();\n          }\n        }\n\n        if (result.group === P) {\n          var logV = Math.log(result.value),\n              n1 = Math.log(bnum) / logV,\n              n2 = Math.log(bden) / logV,\n              ndiv = m.num / bnum,\n              ddiv = m.den / bden; //we don't want to divide by zero no do we? Strange things happen.\n\n          if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n            result.power = result.power.add(new Frac(n1));\n            m.num /= bnum; //BigInt? Keep that in mind for the future.\n          }\n\n          if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n            result.power = result.power.subtract(new Frac(n2));\n            m.den /= bden; //BigInt? Keep that in mind for the future.\n          }\n        } //unpack CB if length is only one\n\n\n        if (result.length === 1) {\n          var t = result.multiplier; //transfer the multiplier\n\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(t);\n        } //reduce square root\n\n\n        var ps = result.power.toString();\n\n        if (even(ps) && result.fname === SQRT) {\n          //grab the sign of the symbol\n          sign = sign * result.sign();\n          var p = result.power;\n          result = result.args[0];\n          result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2))))); //flip it back to the correct sign\n\n          if (sign < 0) result.negate();\n        } else {\n          result.multiplier = result.multiplier.multiply(m).multiply(sign);\n          if (result.group === CP && result.isImaginary()) result.distributeMultiplier();\n        } //back convert group P to a simpler group N if possible\n\n\n        if (result.group === P && isInt(result.power.toDecimal())) result = result.convert(N);\n        return result;\n      } else {\n        //****** Matrices & Vector *****//\n        if (bIsSymbol && !aIsSymbol) {\n          //keep symbols to the right \n          t = a;\n          a = b;\n          b = t; //swap\n\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n\n        var isMatrixB = isMatrix(b),\n            isMatrixA = isMatrix(a);\n\n        if (aIsSymbol && isMatrixB) {\n          b.eachElement(function (e) {\n            return _.multiply(a.clone(), e);\n          });\n        } else {\n          if (isMatrixA && isMatrixB) {\n            b = a.multiply(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return this.multiply(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                    l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\n     * Gets called when the parser finds the / operator. See this.add\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    this.divide = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b);\n\n      if (aIsSymbol && bIsSymbol) {\n        //forward to Unit division\n        if (a.unit || b.unit) {\n          return _.Unit.divide(a, b);\n        }\n\n        var result;\n        if (b.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n\n        if (a.isConstant() && b.isConstant()) {\n          result = a.clone();\n          result.multiplier = result.multiplier.divide(b.multiplier);\n        } else {\n          b.invert();\n          result = _.multiply(a, b);\n        }\n\n        return result;\n      } else {\n        //******* Vectors & Matrices *********//\n        var isVectorA = isVector(a),\n            isVectorB = isVector(b);\n\n        if (aIsSymbol && isVectorB) {\n          b = b.map(function (x) {\n            return _.divide(a.clone(), x);\n          });\n        } else if (isVectorA && bIsSymbol) {\n          b = a.map(function (x) {\n            return _.divide(x, b.clone());\n          });\n        } else if (isVectorA && isVectorB) {\n          if (a.dimensions() === b.dimensions()) {\n            b = b.map(function (x, i) {\n              return _.divide(a.elements[--i], x);\n            });\n          } else _.error('Cannot divide vectors. Dimensions do not match!');\n        } else {\n          var isMatrixA = isMatrix(a),\n              isMatrixB = isMatrix(b);\n\n          if (isMatrixA && bIsSymbol) {\n            a.eachElement(function (x) {\n              return _.divide(x, b.clone());\n            });\n            b = a;\n          } else if (isMatrixA && isMatrixB) {\n            if (a.rows() === b.rows() && a.cols() === b.cols()) {\n              a.eachElement(function (x, i, j) {\n                return _.divide(x, b.elements[i][j]);\n              });\n            } else {\n              _.error('Dimensions do not match!');\n            }\n          } else if (isMatrixA && isVectorB) {\n            if (a.cols() === b.dimensions()) {\n              a.eachElement(function (x, i, j) {\n                return _.divide(x, b.elements[i].clone());\n              });\n              b = a;\n            } else {\n              _.error('Unable to divide matrix by vector.');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\n     * Gets called when the parser finds the ^ operator. See this.add\n     * @param {Symbol} a\n     * @param {Symbol} b\n     * @returns {Symbol}\n     */\n\n\n    this.pow = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b);\n\n      if (aIsSymbol && bIsSymbol) {\n        //it has units then it's the Unit module's problem\n        if (a.unit || b.unit) {\n          return _.Unit.pow(a, b);\n        } //handle infinity\n\n\n        if (a.isInfinity || b.isInfinity) {\n          if (a.isInfinity && b.isInfinity) throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n          if (a.isConstant() && b.isInfinity) {\n            if (a.equals(0)) {\n              if (b.lessThan(0)) throw new UndefinedError('0^Infinity is undefined!');\n              return new Symbol(0);\n            }\n\n            if (a.equals(1)) throw new UndefinedError('1^' + b.toString() + ' is undefined!'); //a^-oo\n\n            if (b.lessThan(0)) return new Symbol(0); //a^oo\n\n            if (!a.lessThan(0)) return Symbol.infinity();\n          }\n\n          if (a.isInfinity && b.isConstant()) {\n            if (b.equals(0)) throw new UndefinedError(a + '^0 is undefined!');\n            if (b.lessThan(0)) return new Symbol(0);\n            return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n          }\n        }\n\n        var aIsZero = a.equals(0);\n        var bIsZero = b.equals(0);\n        if (aIsZero && bIsZero) throw new UndefinedError('0^0 is undefined!'); //return 0 right away if possible\n\n        if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0)) return new Symbol(0);\n        if (bIsZero) return new Symbol(1);\n        var bIsConstant = b.isConstant(),\n            aIsConstant = a.isConstant(),\n            bIsInt = b.isInteger(),\n            m = a.multiplier,\n            result = a.clone();\n        if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0)) throw new UndefinedError('Division by zero is not allowed!'); //compute imaginary numbers right away\n\n        if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n          var k, re, im;\n          k = Math.PI * b;\n          re = new Symbol(Math.cos(k));\n          im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n          return _.add(re, im);\n        } //imaginary number under negative nthroot or to the n\n\n\n        if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n          var re, im, r, theta, nre, nim;\n          re = a.realpart();\n          im = a.imagpart();\n\n          if (re.isConstant('all') && im.isConstant('all')) {\n            theta = new Symbol(Math.atan2(im, re) * b);\n            r = _.pow(Symbol.hyp(re, im), b);\n            nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n            nim = _.multiply(r, _.trig.sin(theta));\n            return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n          }\n        }\n        /*\n         if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) { \n         var sign = b.sign();\n         b = abs(b);\n         var p, re, im, theta, n, ai, bi, di, ei, ii, th;\n         p = Symbol.toPolarFormArray(a);\n         theta = _.multiply(b.clone(), arg(a));\n         di = _.pow(p[0], b);\n         ai = _.trig.cos(theta.clone());\n         bi = _.trig.sin(theta);\n         \n         if(sign < 0) {\n         re = _.divide(ai, di.clone());\n         im = _.divide(bi, di);\n         }\n         else {\n         re = _.multiply(ai, di.clone());\n         im = _.multiply(bi, di);\n         }\n         return _.add(re, _.multiply(im, Symbol.imaginary()));\n         }\n         */\n        //take care of the symbolic part\n\n\n        result.toUnitMultiplier(); //simpifly sqrt\n\n        if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n          var s = result.args[0];\n          s.multiplyPower(new Symbol(0.5));\n          s.multiplier.multiply(result.multiplier);\n          s.multiplyPower(b);\n          result = s;\n        } else {\n          var sign = m.sign(); //handle cases such as (-a^3)^(1/4)\n\n          if (evenFraction(b) && sign < 0) {\n            //swaperoo\n            //first put the sign back on the symbol\n            result.negate(); //wrap it in brackets\n\n            result = _.symfunction(PARENTHESIS, [result]); //move the sign back the exterior and let nerdamer handle the rest\n\n            result.negate();\n          }\n\n          result.multiplyPower(b);\n        }\n\n        if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n          var c; //remove the sign\n\n          if (sign < 0) {\n            a.negate();\n            if (b.multiplier.den.equals(2)) //we know that the numerator has to be odd and therefore it's i\n              c = new Symbol(Settings.IMAGINARY);else if (isInt(b.multiplier)) {\n              if (even(b.multiplier)) c = new Symbol(1);else c = new Symbol(-1);\n            } else if (!even(b.multiplier.den)) {\n              c = new Symbol(Math.pow(sign, b.multiplier.num));\n            } else {\n              c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n            }\n          }\n\n          result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal())); //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n          //put the back sign\n\n          if (c) result = _.multiply(result, c);\n        } else if (bIsInt && !m.equals(1)) {\n          var abs_b = b.abs(); // Provide fall back to JS until big number implementation is improved\n\n          if (abs_b.gt(Settings.MAX_EXP)) {\n            if (b.sign() < 0) return new Symbol(0);\n            return Symbol.infinity();\n          } else {\n            var p = b.multiplier.toDecimal();\n            var sgn = Math.sign(p);\n            p = Math.abs(p);\n            var multiplier = new Frac(1);\n            multiplier.num = m.num.pow(p);\n            multiplier.den = m.den.pow(p);\n            if (sgn < 0) multiplier.invert(); //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n\n            result.multiplier = result.multiplier.multiply(multiplier);\n          }\n        } else {\n          var sign = a.sign();\n\n          if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n            //we know the sign is negative so if the denominator for b == 2 then it's i\n            if (b.multiplier.den.equals(2)) {\n              var i = new Symbol(Settings.IMAGINARY);\n              a.negate(); //remove the sign\n              //if the power is negative then i is negative\n\n              if (b.lessThan(0)) {\n                i.negate();\n                b.negate(); //remove the sign from the power\n              } //pull the power normally and put back the imaginary\n\n\n              result = _.multiply(_.pow(a, b), i);\n            } else {\n              //                            if(a.equals(-1)) {\n              //                                var theta = _.multiply(b, _.parse('pi'));\n              //                                result = evaluate(_.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta))));\n              //                            }\n              //                            else {\n              var aa = a.clone();\n              aa.multiplier.negate();\n              result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n\n              var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n\n              var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n\n              var r = _.divide(_a, _b);\n\n              result = _.multiply(result, r); //                            }  \n            }\n          } else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n            //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n            var re, im, aa, a1, b1, c1;\n            aa = a.clone().toLinear();\n            re = b.realpart();\n            im = b.imagpart();\n            a1 = _.pow(aa.clone(), re);\n            b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));\n            c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n            result = _.multiply(a1, _.add(b1, c1));\n            result = _.expand(_.parse(result));\n          } else {\n            //b is a symbol\n            var neg_num = a.group === N && sign < 0,\n                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert()); //eliminate imaginary if possible\n\n            if (a.imaginary) {\n              if (bIsInt) {\n                var s, p, n;\n                s = Math.sign(b);\n                p = abs(b);\n                n = p % 4;\n                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n\n                if (n === 0 || s < 0 && n === 1 || s > 0 && n === 3) {\n                  result.negate();\n                }\n              } else {\n                //assume i = sqrt(-1) -> (-1)^(1/2)\n                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                    //the denominator denotes the power so raise to it. It will turn positive it round\n                tn = Math.pow(-1, nr.num);\n                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n              }\n            } //ensure that the sign is carried by the symbol and not the multiplier\n            //this enables us to check down the line if the multiplier can indeed be transferred\n\n\n            if (sign < 0 && !neg_num) result.negate(); //retain the absolute value\n\n            if (bIsConstant && a.group !== EX) {\n              var evenr = even(b.multiplier.den),\n                  evenp = even(a.power),\n                  n = result.power.toDecimal(),\n                  evennp = even(n);\n\n              if (evenr && evenp && !evennp) {\n                if (n === 1) result = _.symfunction(ABS, [result]);else if (!isInt(n)) {\n                  var p = result.power;\n                  result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                } else {\n                  result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]), result.clone().setPower(new Frac(n - 1)));\n                } //quick workaround. Revisit\n\n                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS) result = result.args[0];\n              }\n            }\n          }\n        }\n\n        result = testSQRT(result); //don't multiply until we've tested the remaining symbol\n\n        if (num && den) result = _.multiply(result, testPow(_.multiply(num, den))); //reduce square root\n\n        if (result.fname === SQRT) {\n          var isEX = result.group === EX;\n          var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n\n          if (even(t)) {\n            var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                m = result.multiplier;\n            result = _.pow(result.args[0], pt);\n            result.multiplier = result.multiplier.multiply(m);\n          }\n        } //detect Euler's identity\n        else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi') && result.power.contains(Settings.IMAGINARY)) {\n            var theta = b.stripVar(Settings.IMAGINARY);\n            result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta))); //                    //we have a match\n            //                    var m1 = result.multiplier,\n            //                            m2 = result.power.multiplier;\n            //                    result = new Symbol(even(m2.num) ? m1 : m1.negate());\n            //                    result = _.pow(result, new Symbol(m2.den).invert());\n          }\n\n        return result;\n      } else {\n        if (isVector(a) && bIsSymbol) {\n          a = a.map(function (x) {\n            return _.pow(x, b.clone());\n          });\n        } else if (isMatrix(a) && bIsSymbol) {\n          a.eachElement(function (x) {\n            return _.pow(x, b.clone());\n          });\n        }\n\n        return a;\n      }\n    }; //gets called when the parser finds the , operator. \n    //Commas return a Collector object which roughly an array\n\n\n    this.comma = function (a, b) {\n      if (!(a instanceof Collection)) a = Collection.create(a);\n      a.append(b);\n      return a;\n    }; //link to modulus\n\n\n    this.mod = function (a, b) {\n      return mod(a, b);\n    }; //used to slice elements from arrays\n\n\n    this.slice = function (a, b) {\n      return new Slice(a, b);\n    }; //the equality setter\n\n\n    this.equals = function (a, b) {\n      //equality can only be set for group S so complain it's not\n      if (a.group !== S && !a.isLinear()) err('Cannot set equality for ' + a.toString());\n      VARS[a.value] = b.clone();\n      return b;\n    }; //percent\n\n\n    this.percent = function (a) {\n      return _.divide(a, new Symbol(100));\n    }; //set variable\n\n\n    this.assign = function (a, b) {\n      if (a instanceof Collection && b instanceof Collection) {\n        a.elements.map(function (x, i) {\n          return _.assign(x, b.elements[i]);\n        });\n        return Vector.fromArray(b.elements);\n      }\n\n      if (a.parent) {\n        //it's referring to the parent instead. The current item can be discarded\n        var e = a.parent;\n        e.elements[e.getter] = b;\n        delete e.getter;\n        return e;\n      }\n\n      if (a.group !== S) throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n      VARS[a.value] = b;\n      return b;\n    };\n\n    this.function_assign = function (a, b) {\n      var f = a.elements.pop();\n      return setFunction(f, a.elements, b);\n    }; //function to quickly convert bools to Symbols\n\n\n    var bool2Symbol = function (x) {\n      return new Symbol(x === true ? 1 : 0);\n    }; //check for equality\n\n\n    this.eq = function (a, b) {\n      return bool2Symbol(a.equals(b));\n    }; //checks for greater than\n\n\n    this.gt = function (a, b) {\n      return bool2Symbol(a.gt(b));\n    }; //checks for greater than equal\n\n\n    this.gte = function (a, b) {\n      return bool2Symbol(a.gte(b));\n    }; //checks for less than\n\n\n    this.lt = function (a, b) {\n      return bool2Symbol(a.lt(b));\n    }; //checks for less than equal\n\n\n    this.lte = function (a, b) {\n      return bool2Symbol(a.lte(b));\n    }; //wraps the factorial\n\n\n    this.factorial = function (a) {\n      return this.symfunction(FACTORIAL, [a]);\n    }; //wraps the double factorial\n\n\n    this.dfactorial = function (a) {\n      return this.symfunction(DOUBLEFACTORIAL, [a]);\n    };\n  }\n\n  ;\n  /* \"STATIC\" */\n  //converts a number to a fraction. \n\n  var Fraction = {\n    /**\n     * Converts a decimal to a fraction\n     * @param {number} value\n     * @param {object} opts\n     * @returns {Array} - an array containing the denominator and the numerator\n     */\n    convert: function (value, opts) {\n      var frac;\n\n      if (value === 0) {\n        frac = [0, 1];\n      } else {\n        if (value < 1e-6 || value > 1e20) {\n          var qc = this.quickConversion(Number(value));\n\n          if (qc[1] <= 1e20) {\n            var abs = Math.abs(value);\n            var sign = value / abs;\n            frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n            frac[0] = frac[0] * sign;\n          } else {\n            frac = qc;\n          }\n        } else {\n          frac = this.fullConversion(value);\n        }\n      }\n\n      return frac;\n    },\n\n    /**\n     * If the fraction is too small or too large this gets called instead of fullConversion method\n     * @param {number} dec\n     * @returns {Array} - an array containing the denominator and the numerator\n     */\n    quickConversion: function (dec) {\n      var x = (dec.toExponential() + '').split('e');\n      var d = x[0].split('.')[1]; // get the number of places after the decimal\n\n      var l = (d ? d.length : 0) - parseInt(x[1]); // maybe the coefficient is an integer;\n      //call Math.round to avoid rounding error\n\n      return [Math.round(Math.pow(10, l) * x[0]), Math.pow(10, Math.abs(x[1]) + l)];\n    },\n\n    /**\n     * Returns a good approximation of a fraction. This method gets called by convert\n     * http://mathforum.org/library/drmath/view/61772.html\n     * Decimal To Fraction Conversion - A Simpler Version\n     * Dr Peterson\n     * @param {number} dec\n     * @returns {Array} - an array containing the denominator and the numerator\n     */\n    fullConversion: function (dec) {\n      var done = false; //you can adjust the epsilon to a larger number if you don't need very high precision\n\n      var n1 = 0,\n          d1 = 1,\n          n2 = 1,\n          d2 = 0,\n          n = 0,\n          q = dec,\n          epsilon = 1e-16;\n\n      while (!done) {\n        n++;\n\n        if (n > 10000) {\n          done = true;\n        }\n\n        var a = Math.floor(q);\n        var num = n1 + a * n2;\n        var den = d1 + a * d2;\n        var e = q - a;\n\n        if (e < epsilon) {\n          done = true;\n        }\n\n        q = 1 / e;\n        n1 = n2;\n        d1 = d2;\n        n2 = num;\n        d2 = den;\n\n        if (Math.abs(num / den - dec) < epsilon || n > 30) {\n          done = true;\n        }\n      }\n\n      return [num, den];\n    }\n  }; //Depends on Fraction\n  //The latex generator\n\n  var LaTeX = {\n    parser: function () {\n      //create a parser and strip it from everything except the items that you need\n      var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n      var parser = new Parser();\n\n      for (var x in parser) {\n        if (keep.indexOf(x) === -1) delete parser[x];\n      } //declare the operators\n\n\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; //bypass the slash\n        }\n      });\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\,',\n        action: 'slash_comma',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; //bypass the slash\n        }\n      }); //have braces not map to anything. We want them to be return as-is\n\n      var brackets = parser.getBrackets();\n      brackets['{'].maps_to = undefined;\n      return parser;\n    }(),\n    space: '~',\n    dot: ' \\\\cdot ',\n    //grab a list of supported functions but remove the excluded ones found in exclFN\n    latex: function (symbol, option) {\n      //it might be an array\n      if (symbol.clone) {\n        symbol = symbol.clone(); //leave original as-is\n      }\n\n      if (symbol instanceof _.classes.Collection) symbol = symbol.elements;\n\n      if (isArray(symbol)) {\n        var LaTeXArray = [];\n\n        for (var i = 0; i < symbol.length; i++) {\n          var sym = symbol[i]; //This way I can generate LaTeX on an array of strings.\n\n          if (!isSymbol(sym)) sym = _.parse(sym);\n          LaTeXArray.push(this.latex(sym, option));\n        }\n\n        return this.brackets(LaTeXArray.join(', '), 'square');\n      } else if (isMatrix(symbol)) {\n        var TeX = '\\\\begin{pmatrix}\\n';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          var rowTeX = [],\n              e = symbol.elements[i];\n\n          for (var j = 0; j < e.length; j++) {\n            rowTeX.push(this.latex(e[j], option));\n          }\n\n          TeX += rowTeX.join(' & ');\n\n          if (i < symbol.elements.length - 1) {\n            TeX += '\\\\\\\\\\n';\n          }\n        }\n\n        TeX += '\\\\end{pmatrix}';\n        return TeX;\n      } else if (isVector(symbol)) {\n        var TeX = '\\\\left[';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\right]';\n        return TeX;\n      } else if (isSet(symbol)) {\n        var TeX = '\\\\{';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\}';\n        return TeX;\n      }\n\n      symbol = symbol.clone();\n      var decimal = option === 'decimal' || option === 'decimals',\n          power = symbol.power,\n          invert = isNegative(power),\n          negative = symbol.multiplier.lessThan(0);\n\n      if (symbol.group === P && decimal) {\n        return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n      } else {\n        symbol.multiplier = symbol.multiplier.abs(); //if the user wants the result in decimal format then return it as such by placing it at the top part\n\n        var m_array;\n\n        if (decimal) {\n          var m = String(symbol.multiplier.toDecimal()); //if(String(m) === '1' && !decimal) m = '';\n\n          m_array = [m, ''];\n        } else {\n          m_array = [symbol.multiplier.num, symbol.multiplier.den];\n        } //get the value as a two part array\n\n\n        var v_array = this.value(symbol, invert, option, negative),\n            p; //make it all positive since we know whether to push the power to the numerator or denominator already.\n\n        if (invert) power.negate(); //the power is simple since it requires no additional formatting. We can get it to a\n        //string right away. pass in true to neglect unit powers\n\n        if (decimal) {\n          p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n          if (String(p) === '1') p = '';\n        } //get the latex representation\n        else if (isSymbol(power)) p = this.latex(power, option); //get it as a fraction\n          else p = this.formatFrac(power, true); //use this array to specify if the power is getting attached to the top or the bottom\n\n\n        var p_array = ['', ''],\n            //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n        index = invert ? 1 : 0;\n        p_array[index] = p; //special case group P and decimal\n\n        var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n        return retval.replace(/\\+\\-/gi, '-');\n      }\n    },\n    //greek mapping\n    greek: {\n      alpha: '\\\\alpha',\n      beta: '\\\\beta',\n      gamma: '\\\\gamma',\n      delta: '\\\\delta',\n      epsilon: '\\\\epsilon',\n      zeta: '\\\\zeta',\n      eta: '\\\\eta',\n      theta: '\\\\theta',\n      iota: '\\\\iota',\n      kappa: '\\\\kappa',\n      lambda: '\\\\lambda',\n      mu: '\\\\mu',\n      nu: '\\\\nu',\n      xi: '\\\\xi',\n      omnikron: '\\\\omnikron',\n      pi: '\\\\pi',\n      rho: '\\\\rho',\n      sigma: '\\\\sigma',\n      tau: '\\\\tau',\n      upsilon: '\\\\upsilon',\n      phi: '\\\\phi',\n      chi: '\\\\chi',\n      psi: '\\\\psi',\n      omega: '\\\\omega',\n      Gamma: '\\\\Gamma',\n      Delta: '\\\\Delta',\n      Epsilon: '\\\\Epsilon',\n      Theta: '\\\\Theta',\n      Lambda: '\\\\Lambda',\n      Xi: '\\\\Xi',\n      Pi: '\\\\Pi',\n      Sigma: '\\\\Sigma',\n      Phi: '\\\\Phi',\n      Psi: '\\\\Psi',\n      Omega: '\\\\Omega'\n    },\n    symbols: {\n      arccos: '\\\\arccos',\n      cos: '\\\\cos',\n      csc: '\\\\csc',\n      exp: '\\\\exp',\n      ker: '\\\\ker',\n      limsup: '\\\\limsup',\n      min: '\\\\min',\n      sinh: '\\\\sinh',\n      arcsin: '\\\\arcsin',\n      cosh: '\\\\cosh',\n      deg: '\\\\deg',\n      gcd: '\\\\gcd',\n      lg: '\\\\lg',\n      ln: '\\\\ln',\n      Pr: '\\\\Pr',\n      sqrt: '\\\\sqrt',\n      sup: '\\\\sup',\n      arctan: '\\\\arctan',\n      cot: '\\\\cot',\n      det: '\\\\det',\n      hom: '\\\\hom',\n      lim: '\\\\lim',\n      log: '\\\\log',\n      LN: '\\\\LN',\n      sec: '\\\\sec',\n      tan: '\\\\tan',\n      arg: '\\\\arg',\n      coth: '\\\\coth',\n      dim: '\\\\dim',\n      inf: '\\\\inf',\n      liminf: '\\\\liminf',\n      max: '\\\\max',\n      sin: '\\\\sin',\n      tanh: '\\\\tanh'\n    },\n    //get the raw value of the symbol as an array\n    value: function (symbol, inverted, option, negative) {\n      var group = symbol.group,\n          previousGroup = symbol.previousGroup,\n          v = ['', ''],\n          index = inverted ? 1 : 0;\n      /*if(group === N) //do nothing since we want to return top & bottom blank; */\n\n      if (symbol.isInfinity) {\n        v[index] = '\\\\infty';\n      } else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n        var value = symbol.value;\n        if (value.replace) value = value.replace(/(.+)_$/, '$1\\\\_'); //split it so we can check for instances of alpha as well as alpha_b\n\n        var t_varray = String(value).split('_');\n        var greek = this.greek[t_varray[0]];\n\n        if (greek) {\n          t_varray[0] = greek;\n          value = t_varray.join('_');\n        }\n\n        var symbol = this.symbols[t_varray[0]];\n\n        if (symbol) {\n          t_varray[0] = symbol;\n          value = t_varray.join('_');\n        }\n\n        v[index] = value;\n      } else if (group === FN || previousGroup === FN) {\n        var name,\n            input = [],\n            fname = symbol.fname; //collect the arguments\n\n        for (var i = 0; i < symbol.args.length; i++) {\n          var arg = symbol.args[i],\n              item;\n          if (typeof arg === 'string') item = arg;else {\n            item = this.latex(arg, option);\n          }\n          input.push(item);\n        }\n\n        if (fname === SQRT) {\n          v[index] = '\\\\sqrt' + this.braces(input.join(','));\n        } else if (fname === ABS) {\n          v[index] = this.brackets(input.join(','), 'abs');\n        } else if (fname === PARENTHESIS) {\n          v[index] = this.brackets(input.join(','), 'parens');\n        } else if (fname === 'limit') {\n          v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n        } else if (fname === 'integrate') {\n          v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n        } else if (fname === 'defint') {\n          v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n        } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n          var arg = symbol.args[0];\n\n          if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n            input[0] = this.brackets(input[0]);\n          }\n\n          v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n        } else if (fname === 'floor') {\n          v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n        } else if (fname === 'ceil') {\n          v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n        } //capture log(a, b)\n        else if (fname === Settings.LOG && input.length > 1) {\n            v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n          } //capture log(a, b)\n          else if (fname === Settings.LOG10) {\n              v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n            } else if (fname === 'sum') {\n              var a = input[0],\n                  b = input[1],\n                  c = input[2],\n                  d = input[3];\n              v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n            } else if (fname === 'product') {\n              var a = input[0],\n                  b = input[1],\n                  c = input[2],\n                  d = input[3];\n              v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n            } else if (fname === 'nthroot') {\n              v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n            } else if (fname === 'mod') {\n              v[index] = input[0] + ' \\\\bmod ' + input[1];\n            } else if (fname === 'realpart') {\n              v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n            } else if (fname === 'imagpart') {\n              v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n            } else {\n              var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n              if (symbol.isConversion) v[index] = name + this.brackets(input.join(''), 'parens');else v[index] = name + this.brackets(input.join(','), 'parens');\n            }\n      } else if (symbol.isComposite()) {\n        var collected = symbol.collectSymbols().sort(group === CP || previousGroup === CP ? function (a, b) {\n          return b.group - a.group;\n        } : function (a, b) {\n          var x = isSymbol(a.power) ? -1 : a.power;\n          var y = isSymbol(b.power) ? -1 : b.power;\n          return y - x;\n        }),\n            symbols = [],\n            l = collected.length;\n\n        for (var i = 0; i < l; i++) {\n          symbols.push(LaTeX.latex(collected[i], option));\n        }\n\n        var value = symbols.join('+');\n        v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n      } else if (group === CB || previousGroup === EX || previousGroup === CB) {\n        if (group === CB) symbol.distributeExponent(); //this almost feels a little like cheating but I need to know if I should be wrapping the symbol\n        //in brackets or not. We'll do this by checking the value of the numerator and then comparing it \n        //to whether the symbol value is \"simple\" or not.\n\n        var denominator = [],\n            numerator = []; //generate a profile\n\n        var den_map = [],\n            num_map = [],\n            num_c = 0,\n            den_c = 0;\n\n        var setBrackets = function (container, map, counter) {\n          if (counter > 1 && map.length > 0) {\n            var l = map.length;\n\n            for (var i = 0; i < l; i++) {\n              var idx = map[i],\n                  item = container[idx];\n\n              if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                container[idx] = LaTeX.brackets(item, 'parens');\n              }\n            }\n          }\n\n          return container;\n        }; //generate latex for each of them\n\n\n        symbol.each(function (x) {\n          var isDenom = isNegative(x.power),\n              laTex;\n\n          if (isDenom) {\n            laTex = LaTeX.latex(x.invert(), option);\n            den_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              den_map.push(denominator.length); //make a note of where the composite was found \n            }\n\n            denominator.push(laTex);\n          } else {\n            laTex = LaTeX.latex(x, option);\n            num_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              num_map.push(numerator.length); //make a note of where the composite was found \n            }\n\n            numerator.push(laTex);\n          }\n        }); //apply brackets\n\n        setBrackets(numerator, num_map, num_c);\n        v[0] = numerator.join(this.dot); //collapse the numerator into one string\n\n        setBrackets(denominator, den_map, den_c);\n        v[1] = denominator.join(this.dot);\n      }\n\n      return v;\n    },\n    set: function (m, v, p, combine_power) {\n      var isBracketed = function (v) {\n        return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n      }; //format the power if it exists\n\n\n      if (p) p = this.formatP(p); //group CB will have to be wrapped since the power applies to both it's numerator and denominator\n\n      if (combine_power) {\n        //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n        //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n        //of a case where this isn't true\n        var tp = p[0];\n        p[0] = ''; //temporarily make p blank\n      } //merge v and p. Not that v MUST be first since the order matters\n\n\n      v = this.merge(v, p);\n      var mn = m[0],\n          md = m[1],\n          vn = v[0],\n          vd = v[1]; //filters\n      //if the top has a variable but the numerator is one drop it\n\n      if (vn && Number(mn) === 1) mn = ''; //if denominator is 1 drop it always\n\n      if (Number(md) === 1) md = ''; //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : ''); //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : ''); //format the power if it exists\n      //make it a fraction if both top and bottom exists\n\n      if (top && bottom) {\n        var frac = this.frac(top, bottom);\n        if (combine_power && tp) frac = this.brackets(frac) + tp;\n        return frac;\n      } //otherwise only the top exists so return that\n      else return top;\n    },\n    merge: function (a, b) {\n      var r = [];\n\n      for (var i = 0; i < 2; i++) r[i] = a[i] + b[i];\n\n      return r;\n    },\n    //joins together two strings if both exist\n    join: function (n, d, glue) {\n      if (!n && !d) return '';\n      if (n && !d) return n;\n      if (d && !n) return d;\n      return n + glue + d;\n    },\n    formatP: function (p_array) {\n      for (var i = 0; i < 2; i++) {\n        var p = p_array[i];\n        if (p) p_array[i] = '^' + this.braces(p);\n      }\n\n      return p_array;\n    },\n\n    /**\n     * formats the fractions accordingly.\n     * @param {Frac} f\n     * @param {bool} is_pow\n     */\n    formatFrac: function (f, is_pow) {\n      var n = f.num.toString(),\n          d = f.den.toString(); //no need to have x^1\n\n      if (is_pow && n === '1' && d === '1') return ''; //no need to have x/1\n\n      if (d === '1') return n;\n      return this.frac(n, d);\n    },\n    frac: function (n, d) {\n      return '\\\\frac' + this.braces(n) + this.braces(d);\n    },\n    braces: function (e) {\n      return '{' + e + '}';\n    },\n    brackets: function (e, typ) {\n      typ = typ || 'parens';\n      var bracketTypes = {\n        parens: ['(', ')'],\n        square: ['[', ']'],\n        brace: ['{', '}'],\n        abs: ['|', '|'],\n        angle: ['\\\\langle', '\\\\rangle']\n      };\n      var bracket = bracketTypes[typ];\n      return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n    },\n\n    /**\n     * Removes extreneous tokens\n     * @param {Tokens[]} tokens\n     * @returns {Tokens[]}\n     */\n    filterTokens: function (tokens) {\n      var filtered = []; //the items that need to be disposed\n\n      var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        if (isArray(token)) filtered.push(LaTeX.filterTokens(token));else if (d.indexOf(token.value) === -1) filtered.push(token);\n      }\n\n      return filtered;\n    },\n\n    /*\n     * Parses tokens from LaTeX string. Does not do any error checking\n     * @param {Tokens[]} rpn\n     * @returns {String}\n     */\n    parse: function (raw_tokens) {\n      var i, l;\n      var retval = '';\n      var tokens = this.filterTokens(raw_tokens);\n      var replace = {\n        'cdot': '*',\n        'times': '*',\n        'infty': 'Infinity'\n      }; //get the next token\n\n      var next = function () {\n        return tokens[++i];\n      };\n\n      var parse_next = function () {\n        return LaTeX.parse(next());\n      };\n\n      var get = function (token) {\n        if (token in replace) return replace[token];\n        return token;\n      }; //start parsing the tokens\n\n\n      for (i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i]; //fractions\n\n        if (token.value === 'frac') {\n          //parse and wrap it in brackets\n          var n = parse_next();\n          var d = parse_next();\n          retval += n + '/' + d;\n        } else if (token.value in LaTeX.symbols) {\n          retval += token.value + parse_next();\n        } else if (token.value === 'int') {\n          var f = parse_next(); //skip the comma\n\n          i++; //get the variable of integration\n\n          var dx = next().value;\n          dx = get(dx.substring(1, dx.length));\n          retval += 'integrate' + inBrackets(f + ',' + dx);\n        } else if (token.value === 'mathrm') {\n          var f = tokens[++i][0].value;\n          retval += f + parse_next();\n        } //sum and product\n        else if (token.value === 'sum_' || token.value === 'prod_') {\n            var fn = token.value === 'sum_' ? 'sum' : 'product';\n            var nxt = next();\n            i++; //skip the caret\n\n            var end = parse_next();\n            var f = parse_next();\n            retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n          } else if (token.value === 'lim_') {\n            var nxt = next();\n            retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n          } else {\n            if (Array.isArray(token)) {\n              retval += get(LaTeX.parse(token));\n            } else retval += get(token.value.toString());\n          }\n      }\n\n      return inBrackets(retval);\n    }\n  }; //Vector =======================================================================    \n\n  function Vector(v) {\n    if (isVector(v)) this.elements = v.items.slice(0);else if (isArray(v)) this.elements = v.slice(0);else this.elements = [].slice.call(arguments);\n  }\n  /*\n   * Generates a pre-filled array\n   * @param {type} n\n   * @param {type} val\n   * @returns {unresolved}\n   */\n\n\n  Vector.arrayPrefill = function (n, val) {\n    var a = [];\n    val = val || 0;\n\n    for (var i = 0; i < n; i++) a[i] = val;\n\n    return a;\n  };\n  /**\n   * Generate a vector from and array\n   * @param {type} a\n   * @returns {unresolved}\n   */\n\n\n  Vector.fromArray = function (a) {\n    var v = new Vector();\n    v.elements = a;\n    return v;\n  };\n  /**\n   * Convert a Set to a Vector\n   * @param {Set} set\n   * @returns {Vector}\n   */\n\n\n  Vector.fromSet = function (set) {\n    return Vector.fromArray(set.elements);\n  }; //Ported from Sylvester.js\n\n\n  Vector.prototype = {\n    custom: true,\n    // Returns element i of the vector\n    e: function (i) {\n      return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n    },\n    set: function (i, val) {\n      if (!isSymbol(val)) val = new Symbol(val);\n      this.elements[i] = val;\n    },\n    // Returns the number of elements the vector has\n    dimensions: function () {\n      return this.elements.length;\n    },\n    // Returns the modulus ('length') of the vector\n    modulus: function () {\n      return block('SAFE', function () {\n        return _.pow(this.dot(this.clone()), new Symbol(0.5));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is equal to the argument\n    eql: function (vector) {\n      var n = this.elements.length;\n      var V = vector.elements || vector;\n\n      if (n !== V.length) {\n        return false;\n      }\n\n      do {\n        if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n          return false;\n        }\n      } while (--n);\n\n      return true;\n    },\n    // Returns a clone of the vector\n    clone: function () {\n      var V = new Vector(),\n          l = this.elements.length;\n\n      for (var i = 0; i < l; i++) {\n        //Rule: all items within the vector must have a clone method.\n        V.elements.push(this.elements[i].clone());\n      }\n\n      if (this.getter) {\n        V.getter = this.getter.clone();\n      }\n\n      return V;\n    },\n    // Maps the vector to another vector according to the given function\n    map: function (fn) {\n      var elements = [];\n      this.each(function (x, i) {\n        elements.push(fn(x, i));\n      });\n      return new Vector(elements);\n    },\n    // Calls the iterator for each element of the vector in turn\n    each: function (fn) {\n      var n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n        fn(this.elements[i], i + 1);\n      } while (--n);\n    },\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function () {\n      return block('SAFE', function () {\n        var r = this.modulus();\n\n        if (r.valueOf() === 0) {\n          return this.clone();\n        }\n\n        return this.map(function (x) {\n          return _.divide(x, r);\n        });\n      }, undefined, this);\n    },\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var n = this.elements.length;\n\n        if (n !== V.length) {\n          return null;\n        }\n\n        var dot = new Symbol(0),\n            mod1 = new Symbol(0),\n            mod2 = new Symbol(0); // Work things out in parallel to save time\n\n        this.each(function (x, i) {\n          dot = _.add(dot, _.multiply(x, V[i - 1]));\n          mod1 = _.add(mod1, _.multiply(x, x)); //will not conflict in safe block\n\n          mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1])); //will not conflict in safe block\n        });\n        mod1 = _.pow(mod1, new Symbol(0.5));\n        mod2 = _.pow(mod2, new Symbol(0.5));\n\n        var product = _.multiply(mod1, mod2);\n\n        if (product.valueOf() === 0) {\n          return null;\n        }\n\n        var theta = _.divide(dot, product);\n\n        var theta_val = theta.valueOf();\n\n        if (theta_val < -1) {\n          theta = -1;\n        }\n\n        if (theta_val > 1) {\n          theta = 1;\n        }\n\n        return new Symbol(Math.acos(theta));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : angle <= PRECISION;\n    },\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : Math.abs(angle - Math.PI) <= PRECISION;\n    },\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function (vector) {\n      var dot = this.dot(vector);\n      return dot === null ? null : Math.abs(dot) <= PRECISION;\n    },\n    // Returns the result of adding the argument to the vector\n    add: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n\n        return this.map(function (x, i) {\n          return _.add(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of subtracting the argument from the vector\n    subtract: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n\n        return this.map(function (x, i) {\n          return _.subtract(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function (k) {\n      return this.map(function (x) {\n        return x.clone() * k.clone();\n      });\n    },\n    x: function (k) {\n      return this.multiply(k);\n    },\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var product = new Symbol(0),\n            n = this.elements.length;\n\n        if (n !== V.length) {\n          return null;\n        }\n\n        do {\n          product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n        } while (--n);\n\n        return product;\n      }, undefined, this);\n    },\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function (vector) {\n      var B = vector.elements || vector;\n\n      if (this.elements.length !== 3 || B.length !== 3) {\n        return null;\n      }\n\n      var A = this.elements;\n      return block('SAFE', function () {\n        return new Vector([_.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])), _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])), _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))]);\n      }, undefined, this);\n    },\n    // Returns the (absolute) largest element of the vector\n    max: function () {\n      var m = 0,\n          n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n\n        if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n          m = this.elements[i];\n        }\n      } while (--n);\n\n      return m;\n    },\n    magnitude: function () {\n      var magnitude = new Symbol(0);\n      this.each(function (e) {\n        magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n      });\n      return _.sqrt(magnitude);\n    },\n    // Returns the index of the first match found\n    indexOf: function (x) {\n      var index = null,\n          n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n\n        if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n          index = i + 1;\n        }\n      } while (--n);\n\n      return index;\n    },\n    text: function (x) {\n      return text(this);\n    },\n    toString: function () {\n      return this.text();\n    },\n    latex: function (option) {\n      var tex = [];\n\n      for (var i = 0; i < this.elements.length; i++) {\n        tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n      }\n\n      return '[' + tex.join(', ') + ']';\n    }\n  }; //Matrix =======================================================================\n\n  function Matrix() {\n    var m = arguments,\n        l = m.length,\n        i,\n        el = [];\n\n    if (isMatrix(m)) {\n      //if it's a matrix then make a clone\n      for (i = 0; i < l; i++) {\n        el.push(m[i].slice(0));\n      }\n    } else {\n      var row, lw, rl;\n\n      for (i = 0; i < l; i++) {\n        row = m[i];\n        if (isVector(row)) row = row.elements;\n        if (!isArray(row)) row = [row];\n        rl = row.length;\n        if (lw && lw !== rl) err('Unable to create Matrix. Row dimensions do not match!');\n        el.push(row);\n        lw = rl;\n      }\n    }\n\n    this.elements = el;\n  }\n\n  Matrix.identity = function (n) {\n    var m = new Matrix();\n\n    for (var i = 0; i < n; i++) {\n      m.elements.push([]);\n\n      for (var j = 0; j < n; j++) {\n        m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n      }\n    }\n\n    return m;\n  };\n\n  Matrix.fromArray = function (arr) {\n    function F(args) {\n      return Matrix.apply(this, args);\n    }\n\n    F.prototype = Matrix.prototype;\n    return new F(arr);\n  };\n\n  Matrix.zeroMatrix = function (rows, cols) {\n    var m = new Matrix();\n\n    for (var i = 0; i < rows; i++) {\n      m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n    }\n\n    return m;\n  };\n\n  Matrix.prototype = {\n    //needs be true to let the parser know not to try to cast it to a symbol\n    custom: true,\n    get: function (row, column) {\n      if (!this.elements[row]) return undefined;\n      return this.elements[row][column];\n    },\n    map: function (f, raw_values) {\n      var M = new Matrix();\n      this.each(function (e, i, j) {\n        M.set(i, j, f.call(M, e), raw_values);\n      });\n      return M;\n    },\n    set: function (row, column, value, raw) {\n      if (!this.elements[row]) this.elements[row] = [];\n      this.elements[row][column] = raw ? value : isSymbol(value) ? value : new Symbol(value);\n    },\n    cols: function () {\n      return this.elements[0].length;\n    },\n    rows: function () {\n      return this.elements.length;\n    },\n    row: function (n) {\n      if (!n || n > this.cols()) return [];\n      return this.elements[n - 1];\n    },\n    col: function (n) {\n      var nr = this.rows(),\n          col = [];\n      if (n > this.cols() || !n) return col;\n\n      for (var i = 0; i < nr; i++) {\n        col.push(this.elements[i][n - 1]);\n      }\n\n      return col;\n    },\n    eachElement: function (fn) {\n      var nr = this.rows(),\n          nc = this.cols(),\n          i,\n          j;\n\n      for (i = 0; i < nr; i++) {\n        for (j = 0; j < nc; j++) {\n          fn.call(this, this.elements[i][j], i, j);\n        }\n      }\n    },\n    //ported from Sylvester.js\n    determinant: function () {\n      if (!this.isSquare()) {\n        return null;\n      }\n\n      var M = this.toRightTriangular();\n      var det = M.elements[0][0],\n          n = M.elements.length - 1,\n          k = n,\n          i;\n\n      do {\n        i = k - n + 1;\n        det = _.multiply(det, M.elements[i][i]);\n      } while (--n);\n\n      return det;\n    },\n    isSquare: function () {\n      return this.elements.length === this.elements[0].length;\n    },\n    isSingular: function () {\n      return this.isSquare() && this.determinant() === 0;\n    },\n    augment: function (m) {\n      var r = this.rows(),\n          rr = m.rows();\n      if (r !== rr) err(\"Cannot augment matrix. Rows don't match.\");\n\n      for (var i = 0; i < r; i++) {\n        this.elements[i] = this.elements[i].concat(m.elements[i]);\n      }\n\n      return this;\n    },\n    clone: function () {\n      var r = this.rows(),\n          c = this.cols(),\n          m = new Matrix();\n\n      for (var i = 0; i < r; i++) {\n        m.elements[i] = [];\n\n        for (var j = 0; j < c; j++) {\n          var symbol = this.elements[i][j];\n          m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n        }\n      }\n\n      return m;\n    },\n    //ported from Sylvester.js\n    invert: function () {\n      if (!this.isSquare()) err('Matrix is not square!');\n      return block('SAFE', function () {\n        var ni = this.elements.length,\n            ki = ni,\n            i,\n            j;\n        var imatrix = Matrix.identity(ni);\n        var M = this.augment(imatrix).toRightTriangular();\n        var np,\n            kp = M.elements[0].length,\n            p,\n            els,\n            divisor;\n        var inverse_elements = [],\n            new_element; // Matrix is non-singular so there will be no zeros on the diagonal\n        // Cycle through rows from last to first\n\n        do {\n          i = ni - 1; // First, normalise diagonal elements to 1\n\n          els = [];\n          np = kp;\n          inverse_elements[i] = [];\n          divisor = M.elements[i][i];\n\n          do {\n            p = kp - np;\n            new_element = _.divide(M.elements[i][p], divisor.clone());\n            els.push(new_element); // Shuffle of the current row of the right hand side into the results\n            // array as it will not be modified by later runs through this loop\n\n            if (p >= ki) {\n              inverse_elements[i].push(new_element);\n            }\n          } while (--np);\n\n          M.elements[i] = els; // Then, subtract this row from those above it to\n          // give the identity matrix on the left hand side\n\n          for (j = 0; j < i; j++) {\n            els = [];\n            np = kp;\n\n            do {\n              p = kp - np;\n              els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n            } while (--np);\n\n            M.elements[j] = els;\n          }\n        } while (--ni);\n\n        return Matrix.fromArray(inverse_elements);\n      }, undefined, this);\n    },\n    //ported from Sylvester.js\n    toRightTriangular: function () {\n      return block('SAFE', function () {\n        var M = this.clone(),\n            els,\n            fel,\n            nel,\n            n = this.elements.length,\n            k = n,\n            i,\n            np,\n            kp = this.elements[0].length,\n            p;\n\n        do {\n          i = k - n;\n          fel = M.elements[i][i];\n\n          if (fel.valueOf() === 0) {\n            for (var j = i + 1; j < k; j++) {\n              nel = M.elements[j][i];\n\n              if (nel && nel.valueOf() !== 0) {\n                els = [];\n                np = kp;\n\n                do {\n                  p = kp - np;\n                  els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                } while (--np);\n\n                M.elements[i] = els;\n                break;\n              }\n            }\n          }\n\n          var fel = M.elements[i][i];\n\n          if (fel.valueOf() !== 0) {\n            for (j = i + 1; j < k; j++) {\n              var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n\n              els = [];\n              np = kp;\n\n              do {\n                p = kp - np; // Elements with column numbers up to an including the number\n                // of the row that we're subtracting can safely be set straight to\n                // zero, since that's the point of this routine and it avoids having\n                // to loop over and correct rounding errors later\n\n                els.push(p <= i ? new Symbol(0) : _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n              } while (--np);\n\n              M.elements[j] = els;\n            }\n          }\n        } while (--n);\n\n        return M;\n      }, undefined, this);\n    },\n    transpose: function () {\n      var rows = this.elements.length,\n          cols = this.elements[0].length;\n      var M = new Matrix(),\n          ni = cols,\n          i,\n          nj,\n          j;\n\n      do {\n        i = cols - ni;\n        M.elements[i] = [];\n        nj = rows;\n\n        do {\n          j = rows - nj;\n          M.elements[i][j] = this.elements[j][i].clone();\n        } while (--nj);\n      } while (--ni);\n\n      return M;\n    },\n    // Returns true if the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function (matrix) {\n      var l = isMatrix(matrix) ? matrix.elements.length : matrix.length; // this.columns should equal matrix.rows\n\n      return this.elements[0].length === l;\n    },\n    sameSize: function (matrix) {\n      return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n    },\n    multiply: function (matrix) {\n      return block('SAFE', function () {\n        var M = matrix.elements || matrix;\n\n        if (!this.canMultiplyFromLeft(M)) {\n          if (this.sameSize(matrix)) {\n            var MM = new Matrix();\n            var rows = this.rows();\n\n            for (var i = 0; i < rows; i++) {\n              var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n\n              MM.elements[i] = e.elements;\n            }\n\n            return MM;\n          }\n\n          return null;\n        }\n\n        var ni = this.elements.length,\n            ki = ni,\n            i,\n            nj,\n            kj = M[0].length,\n            j;\n        var cols = this.elements[0].length,\n            elements = [],\n            sum,\n            nc,\n            c;\n\n        do {\n          i = ki - ni;\n          elements[i] = [];\n          nj = kj;\n\n          do {\n            j = kj - nj;\n            sum = new Symbol(0);\n            nc = cols;\n\n            do {\n              c = cols - nc;\n              sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n            } while (--nc);\n\n            elements[i][j] = sum;\n          } while (--nj);\n        } while (--ni);\n\n        return Matrix.fromArray(elements);\n      }, undefined, this);\n    },\n    add: function (matrix, callback) {\n      var M = new Matrix();\n\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.add(e.clone(), matrix.elements[i][j].clone());\n\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n\n          M.set(i, j, result);\n        });\n      }\n\n      return M;\n    },\n    subtract: function (matrix, callback) {\n      var M = new Matrix();\n\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n\n          M.set(i, j, result);\n        });\n      }\n\n      return M;\n    },\n    negate: function () {\n      this.each(function (e) {\n        return e.negate();\n      });\n      return this;\n    },\n    toVector: function () {\n      if (this.rows() === 1 || this.cols() === 1) {\n        var v = new Vector();\n        v.elements = this.elements;\n        return v;\n      }\n\n      return this;\n    },\n    toString: function (newline, to_decimal) {\n      var l = this.rows(),\n          s = [];\n      newline = newline === undefined ? '\\n' : newline;\n\n      for (var i = 0; i < l; i++) {\n        s.push('[' + this.elements[i].map(function (x) {\n          var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n          return x !== undefined ? v : '';\n        }).join(',') + ']');\n      }\n\n      return 'matrix' + inBrackets(s.join(','));\n    },\n    text: function () {\n      return 'matrix(' + this.elements.toString('') + ')';\n    },\n    latex: function (option) {\n      var cols = this.cols(),\n          elements = this.elements;\n      return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n        var tex = [];\n\n        for (var row in elements) {\n          var row_tex = [];\n\n          for (var i = 0; i < cols; i++) {\n            row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n          }\n\n          tex.push(row_tex.join(' & '));\n        }\n\n        return tex.join(' \\\\cr ');\n      });\n    }\n  }; //aliases\n\n  Matrix.prototype.each = Matrix.prototype.eachElement;\n\n  function Set(set) {\n    this.elements = []; //if the first object isn't an array, convert it to one.\n\n    if (!isVector(set)) set = Vector.fromArray(arguments);\n\n    if (set) {\n      var elements = set.elements;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        this.add(elements[i]);\n      }\n    }\n  }\n\n  Set.fromArray = function (arr) {\n    function F(args) {\n      return Set.apply(this, args);\n    }\n\n    F.prototype = Set.prototype;\n    return new F(arr);\n  };\n\n  Set.prototype = {\n    add: function (x) {\n      if (!this.contains(x)) this.elements.push(x.clone());\n    },\n    contains: function (x) {\n      for (var i = 0; i < this.elements.length; i++) {\n        var e = this.elements[i];\n        if (x.equals(e)) return true;\n      }\n\n      return false;\n    },\n    each: function (f) {\n      var elements = this.elements;\n      var set = new Set();\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var e = elements[i];\n        f.call(this, e, set, i);\n      }\n\n      return set;\n    },\n    clone: function () {\n      var set = new Set();\n      this.each(function (e) {\n        set.add(e.clone());\n      });\n      return set;\n    },\n    union: function (set) {\n      var _union = this.clone();\n\n      set.each(function (e) {\n        _union.add(e);\n      });\n      return _union;\n    },\n    difference: function (set) {\n      var diff = this.clone();\n      set.each(function (e) {\n        diff.remove(e);\n      });\n      return diff;\n    },\n    remove: function (element) {\n      for (var i = 0, l = this.elements.length; i < l; i++) {\n        var e = this.elements[i];\n\n        if (e.equals(element)) {\n          remove(this.elements, i);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    intersection: function (set) {\n      var _intersection = new Set();\n\n      var A = this;\n      set.each(function (e) {\n        if (A.contains(e)) {\n          _intersection.add(e);\n        }\n\n        ;\n      });\n      return _intersection;\n    },\n    intersects: function (set) {\n      return this.intersection(set).elements.length > 0;\n    },\n    is_subset: function (set) {\n      var elements = set.elements;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        if (!this.contains(elements[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    toString: function () {\n      return '{' + this.elements.join(',') + '}';\n    }\n  }; //build ========================================================================\n\n  var Build = {\n    dependencies: {\n      _rename: {\n        'Math2.factorial': 'factorial'\n      },\n      factorial: {\n        'Math2.gamma': Math2.gamma\n      },\n      gamma_incomplete: {\n        'Math2.factorial': Math2.factorial\n      },\n      Li: {\n        'Math2.Ei': Math2.Ei,\n        'Math2.bigLog': Math2.bigLog,\n        'Frac': Frac\n      },\n      Ci: {\n        'Math2.factorial': Math2.factorial\n      },\n      Ei: {\n        'Math2.factorial': Math2.factorial\n      },\n      Si: {\n        'Math2.factorial': Math2.factorial\n      },\n      Shi: {\n        'Math2.factorial': Math2.factorial\n      },\n      Chi: {\n        'isInt': isInt,\n        'nround': nround,\n        'Math2.num_integrate': Math2.num_integrate\n      },\n      factor: {\n        'Math2.ifactor': Math2.ifactor,\n        'Symbol': Symbol\n      },\n      num_integrate: {\n        'Math2.simpson': Math2.simpson,\n        'nround': nround\n      },\n      fib: {\n        'even': even\n      }\n    },\n\n    /* Some functions need to be made numeric safe. Build checks if there's a \n     * reformat option and calls that instead when compiling the function string.\n     */\n    reformat: {\n      //this simply extends the build function\n      diff: function (symbol, deps) {\n        var f = 'var f = ' + Build.build(symbol.args[0].toString()) + ';';\n        deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\n        deps[1] += f;\n        return ['diff(f)(' + symbol.args[1].toString() + ')', deps];\n      }\n    },\n    getProperName: function (f) {\n      var map = {\n        continued_fraction: 'continuedFraction'\n      };\n      return map[f] || f;\n    },\n    //assumes that dependences are at max 2 levels\n    compileDependencies: function (f, deps) {\n      //grab the predefined dependiences\n      var dependencies = Build.dependencies[f]; //the dependency string\n\n      var dep_string = deps && deps[1] ? deps[1] : ''; //the functions to be replaced\n\n      var replacements = deps && deps[0] ? deps[0] : {}; //loop through them and add them to the list\n\n      for (var x in dependencies) {\n        if (typeof dependencies[x] === 'object') continue; //skip object\n\n        var components = x.split('.'); //Math.f becomes f\n        //if the function isn't part of an object then reference the function itself\n\n        dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\n        replacements[x] = components.pop();\n      }\n\n      return [replacements, dep_string];\n    },\n    getArgsDeps: function (symbol, dependencies) {\n      var args = symbol.args;\n\n      for (var i = 0; i < args.length; i++) {\n        symbol.args[i].each(function (x) {\n          if (x.group === FN) dependencies = Build.compileDependencies(x.fname, dependencies);\n        });\n      }\n\n      return dependencies;\n    },\n    build: function (symbol, arg_array) {\n      symbol = block('PARSE2NUMBER', function () {\n        return _.parse(symbol);\n      }, true);\n      var args = variables(symbol);\n      var supplements = [];\n      var dependencies = [];\n\n      var ftext = function (symbol, xports) {\n        xports = xports || [];\n        var c = [],\n            group = symbol.group,\n            prefix = '';\n\n        var ftext_complex = function (group) {\n          var d = group === CB ? '*' : '+',\n              cc = [];\n\n          for (var x in symbol.symbols) {\n            var sym = symbol.symbols[x],\n                ft = ftext(sym, xports)[0]; //wrap it in brackets if it's group PL or CP\n\n            if (sym.isComposite()) ft = inBrackets(ft);\n            cc.push(ft);\n          }\n\n          var retval = cc.join(d);\n          retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n          return retval;\n        },\n            ftext_function = function (bn) {\n          var retval;\n          if (bn in Math) retval = 'Math.' + bn;else {\n            bn = Build.getProperName(bn);\n\n            if (supplements.indexOf(bn) === -1) {\n              //make sure you're not adding the function twice\n              //Math2 functions aren't part of the standard javascript\n              //Math library and must be exported.\n              xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n              supplements.push(bn);\n            }\n\n            retval = bn;\n          }\n          retval = retval + inBrackets(symbol.args.map(function (x) {\n            return ftext(x, xports)[0];\n          }).join(','));\n          return retval;\n        }; //the multiplier\n\n\n        if (group === N) c.push(symbol.multiplier.toDecimal());else if (symbol.multiplier.equals(-1)) prefix = '-';else if (!symbol.multiplier.equals(1)) c.push(symbol.multiplier.toDecimal()); //the value\n\n        var value;\n        if (group === S || group === P) value = symbol.value;else if (group === FN) {\n          dependencies = Build.compileDependencies(symbol.fname, dependencies);\n          dependencies = Build.getArgsDeps(symbol, dependencies);\n\n          if (Build.reformat[symbol.fname]) {\n            var components = Build.reformat[symbol.fname](symbol, dependencies);\n            dependencies = components[1];\n            value = components[0];\n          } else {\n            value = ftext_function(symbol.fname);\n          }\n        } else if (group === EX) {\n          var pg = symbol.previousGroup;\n          if (pg === N || pg === S) value = symbol.value;else if (pg === FN) {\n            value = ftext_function(symbol.fname);\n            dependencies = Build.compileDependencies(symbol.fname, dependencies);\n            dependencies = Build.getArgsDeps(symbol, dependencies);\n          } else value = ftext_complex(symbol.previousGroup);\n        } else {\n          value = ftext_complex(symbol.group);\n        }\n\n        if (symbol.group !== N && !symbol.power.equals(1)) {\n          var pow = ftext(_.parse(symbol.power));\n          xports.push(pow[1]);\n          value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n        }\n\n        if (value) c.push(prefix + value);\n        return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n      };\n\n      if (arg_array) {\n        for (var i = 0; i < args.length; i++) {\n          var arg = args[i];\n          if (arg_array.indexOf(arg) === -1) err(arg + ' not found in argument array');\n        }\n\n        args = arg_array;\n      }\n\n      var f_array = ftext(symbol); //make all the substitutions;\n\n      for (var x in dependencies[0]) {\n        var alias = dependencies[0][x];\n        f_array[1] = f_array[1].replace(x, alias);\n        dependencies[1] = dependencies[1].replace(x, alias);\n      }\n\n      var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n      return f;\n    }\n  }; //finalize =====================================================================\n\n  /* FINALIZE */\n\n  (function () {\n    reserveNames(_.CONSTANTS);\n    reserveNames(_.functions);\n\n    _.initConstants(); //bug fix for error but needs to be revisited\n\n\n    if (!_.error) _.error = err; //Store the log and log10 functions\n\n    Settings.LOG_FNS = {\n      log: _.functions['log'],\n      log10: _.functions['log10']\n    };\n  })();\n  /* END FINALIZE */\n  //Core =========================================================================\n\n\n  var Utils = {\n    allSame: allSame,\n    allNumeric: allNumeric,\n    arguments2Array: arguments2Array,\n    arrayAddSlices: arrayAddSlices,\n    arrayClone: arrayClone,\n    arrayMax: arrayMax,\n    arrayMin: arrayMin,\n    arrayUnique: arrayUnique,\n    arraySum: arraySum,\n    block: block,\n    build: Build.build,\n    clearU: clearU,\n    comboSort: comboSort,\n    compare: compare,\n    convertToVector: convertToVector,\n    customError: customError,\n    customType: customType,\n    decompose_fn: decompose_fn,\n    each: each,\n    evaluate: evaluate,\n    even: even,\n    evenFraction: evenFraction,\n    fillHoles: fillHoles,\n    firstObject: firstObject,\n    format: format,\n    generatePrimes: generatePrimes,\n    getCoeffs: getCoeffs,\n    getU: getU,\n    importFunctions: importFunctions,\n    inBrackets: inBrackets,\n    isArray: isArray,\n    isExpression: isExpression,\n    isFraction: isFraction,\n    isInt: isInt,\n    isMatrix: isMatrix,\n    isNegative: isNegative,\n    isNumericSymbol: isNumericSymbol,\n    isPrime: isPrime,\n    isReserved: isReserved,\n    isSymbol: isSymbol,\n    isVariableSymbol: isVariableSymbol,\n    isVector: isVector,\n    keys: keys,\n    nroots: nroots,\n    remove: remove,\n    reserveNames: reserveNames,\n    range: range,\n    round: nround,\n    sameSign: sameSign,\n    scientificToDecimal: scientificToDecimal,\n    separate: separate,\n    stringReplace: stringReplace,\n    text: text,\n    validateName: validateName,\n    variables: variables,\n    warn: warn\n  }; //This contains all the parts of nerdamer and enables nerdamer's internal functions\n  //to be used.\n\n  var C = {\n    groups: Groups,\n    Symbol: Symbol,\n    Expression: Expression,\n    Frac: Frac,\n    Vector: Vector,\n    Matrix: Matrix,\n    Parser: Parser,\n    Fraction: Fraction,\n    Math2: Math2,\n    LaTeX: LaTeX,\n    Utils: Utils,\n    PARSER: _,\n    PARENTHESIS: PARENTHESIS,\n    Settings: Settings,\n    err: err,\n    bigInt: bigInt,\n    exceptions: exceptions\n  }; //libExports ===================================================================  \n\n  /**\n   * \n   * @param {String} expression the expression to be evaluated\n   * @param {Object} subs the object containing the variable values\n   * @param {Integer} location a specific location in the equation list to \n   * insert the evaluated expression\n   * @param {String} option additional options\n   * @returns {Expression} \n   */\n\n  var libExports = function (expression, subs, option, location) {\n    //is the user declaring a function?\n    var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n    if (fndec) return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]); //var variable, fn, args;\n    //convert any expression passed in to a string\n\n    if (expression instanceof Expression) expression = expression.toString();\n    var multi_options = isArray(option),\n        expand = 'expand',\n        numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';\n\n    if (multi_options ? option.indexOf(expand) !== -1 : option === expand) {\n      expression = format('{0}({1})', expand, expression);\n    }\n\n    var e = block('PARSE2NUMBER', function () {\n      return _.parse(expression, subs);\n    }, numer || Settings.PARSE2NUMBER);\n\n    if (location) {\n      EXPRESSIONS[location - 1] = e;\n    } else {\n      EXPRESSIONS.push(e);\n    }\n    /*\n     if(variable) libExports.setVar(variable, e);\n     if(fn) libExports.setFunction(fn, args, e);\n     */\n\n\n    return new Expression(e);\n  };\n  /**\n   * Converts expression into rpn form\n   * @param {String} expression\n   * @returns {Token[]}\n   */\n\n\n  libExports.rpn = function (expression) {\n    return _.tokenize(_.toRPN(expression));\n  };\n  /**\n   * Generates LaTeX from expression string\n   * @param {String} e\n   * @param {object} opt\n   * @returns {String}\n   */\n\n\n  libExports.convertToLaTeX = function (e, opt) {\n    return _.toTeX(e, opt);\n  };\n  /**\n   * Converts latex to text - Very very very basic at the moment\n   * @param {String} e\n   * @returns {String}\n   */\n\n\n  libExports.convertFromLaTeX = function (e) {\n    var txt = LaTeX.parse(_.tokenize(e));\n    return new Expression(_.parse(txt));\n  };\n  /**\n   * Get the version of nerdamer or a loaded add-on\n   * @param {String} add_on - The add-on being checked\n   * @returns {String} returns the version of nerdamer\n   */\n\n\n  libExports.version = function (add_on) {\n    if (add_on) {\n      try {\n        return C[add_on].version;\n      } catch (e) {\n        return \"No module named \" + add_on + \" found!\";\n      }\n    }\n\n    return version;\n  };\n  /**\n   * Get nerdamer generated warnings\n   * @returns {String[]}\n   */\n\n\n  libExports.getWarnings = function () {\n    return WARNINGS;\n  };\n  /**\n   * \n   * @param {String} constant The name of the constant to be set\n   * @param {mixed} value The value of the constant \n   * @returns {Object} Returns the nerdamer object\n   */\n\n\n  libExports.setConstant = function (constant, value) {\n    validateName(constant);\n\n    if (!isReserved(constant)) {\n      //fix for issue #127\n      if (value === 'delete' || value === '') {\n        delete _.CONSTANTS[constant];\n      } else {\n        if (isNaN(value)) throw new NerdamerTypeError('Constant must be a number!');\n        _.CONSTANTS[constant] = value;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Returns the value of a previously set constant\n   * @param {type} constant\n   * @returns {String}\n   */\n\n\n  libExports.getConstant = function (constant) {\n    return String(_.constant[constant]);\n  };\n  /**\n   * \n   * @param {String} name The name of the function\n   * @param {Array} params_array A list containing the parameter name of the functions\n   * @param {String} body The body of the function\n   * @returns {Boolean} returns true if succeeded and falls on fail\n   * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n   */\n\n\n  libExports.setFunction = setFunction;\n  /**\n   * \n   * @returns {C} Exports the nerdamer core functions and objects\n   */\n\n  libExports.getCore = function () {\n    return C;\n  };\n\n  libExports.getExpression = libExports.getEquation = Expression.getExpression;\n  /**\n   * \n   * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\n   * @returns {String|Array}\n   */\n\n  libExports.reserved = function (asArray) {\n    if (asArray) {\n      return RESERVED;\n    }\n\n    return RESERVED.join(', ');\n  };\n  /**\n   * \n   * @param {Integer} equation_number the number of the equation to clear. \n   * If 'all' is supplied then all equations are cleared\n   * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\n   * @returns {Object} Returns the nerdamer object\n   */\n\n\n  libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n    if (equation_number === 'all') {\n      EXPRESSIONS = [];\n    } else if (equation_number === 'last') {\n      EXPRESSIONS.pop();\n    } else if (equation_number === 'first') {\n      EXPRESSIONS.shift();\n    } else {\n      var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n      keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n    }\n\n    return this;\n  };\n  /**\n   * Alias for nerdamer.clear('all')\n   */\n\n\n  libExports.flush = function () {\n    this.clear('all');\n    return this;\n  };\n  /**\n   * \n   * @param {Boolean} asObject\n   * @param {Boolean} asLaTeX\n   * @param {String|String[]} option \n   * @returns {Array}\n   */\n\n\n  libExports.expressions = function (asObject, asLaTeX, option) {\n    var result = asObject ? {} : [];\n\n    for (var i = 0; i < EXPRESSIONS.length; i++) {\n      var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n      asObject ? result[i + 1] = eq : result.push(eq);\n    }\n\n    return result;\n  }; //the method for registering modules\n\n\n  libExports.register = function (obj) {\n    var core = this.getCore();\n\n    if (isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj) this.register(obj[i]);\n      }\n    } else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n      //make sure all the dependencies are available\n      if (obj.dependencies) {\n        for (var i = 0; i < obj.dependencies.length; i++) if (!core[obj.dependencies[i]]) throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n      } //if no parent object is provided then the function does not have an address and cannot be called directly\n\n\n      var parent_obj = obj.parent,\n          fn = obj.build.call(core); //call constructor to get function\n\n      if (parent_obj) {\n        if (!core[parent_obj]) core[obj.parent] = {};\n        var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj]; //attach the function to the core\n\n        ref_obj[obj.name] = fn;\n      }\n\n      if (obj.visible) _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n    }\n  };\n  /**\n   * @param {String} name variable name\n   * @returns {boolean} validates if the profided string is a valid variable name\n   */\n\n\n  libExports.validateName = validateName;\n  /**\n   * @param {String} varname variable name\n   * @returns {boolean} validates if the profided string is a valid variable name\n   */\n\n  libExports.validVarName = function (varname) {\n    try {\n      validateName(varname);\n      return RESERVED.indexOf(varname) === -1;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\n   * \n   * @returns {Array} Array of functions currently supported by nerdamer\n   */\n\n\n  libExports.supported = function () {\n    return keys(_.functions);\n  };\n  /**\n   * \n   * @returns {Number} The number equations/expressions currently loaded\n   */\n\n\n  libExports.numEquations = libExports.numExpressions = function () {\n    return EXPRESSIONS.length;\n  };\n  /* END EXPORTS */\n\n  /**\n   * \n   * @param {String} v variable to be set\n   * @param {String} val value of variable. This can be a variable expression or number\n   * @returns {Object} Returns the nerdamer object\n   */\n\n\n  libExports.setVar = function (v, val) {\n    validateName(v); //check if it's not already a constant\n\n    if (v in _.CONSTANTS) err('Cannot set value for constant ' + v);\n    if (val === 'delete' || val === '') delete VARS[v];else {\n      VARS[v] = isSymbol(val) ? val : _.parse(val);\n    }\n    return this;\n  };\n  /**\n   * Returns the value of a set variable\n   * @param {type} v\n   * @returns {varies}\n   */\n\n\n  libExports.getVar = function (v) {\n    return VARS[v];\n  };\n  /**\n   * Clear the variables from the VARS object\n   * @returns {Object} Returns the nerdamer object\n   */\n\n\n  libExports.clearVars = function () {\n    VARS = {};\n    return this;\n  };\n  /**\n   * \n   * @param {Function} loader\n   * @returns {nerdamer}\n   */\n\n\n  libExports.load = function (loader) {\n    loader.call(this);\n    return this;\n  };\n  /**\n   * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n   * @param {String|String[]} option\n   * @returns {Object} Returns an object with the variables\n   */\n\n\n  libExports.getVars = function (output, option) {\n    output = output || 'text';\n    var variables = {};\n    if (output === 'object') variables = VARS;else {\n      for (var v in VARS) {\n        if (output === 'latex') {\n          variables[v] = VARS[v].latex(option);\n        } else if (output === 'text') {\n          variables[v] = VARS[v].text(option);\n        }\n      }\n    }\n    return variables;\n  };\n  /**\n   * Set the value of a setting\n   * @param {String} setting The setting to be changed\n   * @param {boolean} value \n   */\n\n\n  libExports.set = function (setting, value) {\n    //current options:\n    //PARSE2NUMBER, suppress_errors\n    if (typeof setting === 'object') for (var x in setting) {\n      libExports.set(x, setting[x]);\n    }\n    var disallowed = ['SAFE'];\n    if (disallowed.indexOf(setting) !== -1) err('Cannot modify setting: ' + setting);\n    if (setting === 'PRECISION') bigDec.set({\n      precision: value\n    });else if (setting === 'USE_LN' && value === true) {\n      //set log as LN\n      Settings.LOG = 'LN'; //set log10 as log\n\n      Settings.LOG10 = 'log'; //point the functions in the right direction\n\n      _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n      //the log10 function must be explicitly set\n\n      _.functions['log'][0] = function (x) {\n        if (x.isConstant()) return new Symbol(Math.log10(x));\n        return _.symfunction(Settings.LOG10, [x]);\n      };\n\n      _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n      //remove log10\n\n      delete _.functions['log10'];\n    } else Settings[setting] = value;\n  };\n  /**\n   * Get the value of a setting\n   * @param {type} setting\n   * @returns {undefined}\n   */\n\n\n  libExports.get = function (setting) {\n    return Settings[setting];\n  };\n  /**\n   * This functions makes internal functions available externally\n   * @param {bool} override Override the functions when calling api if it exists \n   */\n\n\n  libExports.api = function (override) {\n    //Map internal functions to external ones\n    var linker = function (fname) {\n      return function () {\n        var args = [].slice.call(arguments);\n\n        for (var i = 0; i < args.length; i++) args[i] = _.parse(args[i]);\n\n        return new Expression(block('PARSE2NUMBER', function () {\n          return _.callfunction(fname, args);\n        }));\n      };\n    }; //perform the mapping\n\n\n    for (var x in _.functions) if (!(x in libExports) || override) libExports[x] = linker(x);\n  };\n\n  libExports.replaceFunction = function (name, fn, num_args) {\n    var existing = _.functions[name];\n    var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n    _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n  };\n\n  libExports.setOperator = function (operator, shift) {\n    _.setOperator(operator, shift);\n  };\n\n  libExports.getOperator = function (operator) {\n    return _.getOperator(operator);\n  };\n\n  libExports.aliasOperator = function (operator, withOperator) {\n    _.aliasOperator(operator, withOperator);\n  };\n\n  libExports.tree = function (expression) {\n    return _.tree(_.toRPN(_.tokenize(expression)));\n  };\n\n  libExports.htmlTree = function (expression, indent) {\n    var tree = this.tree(expression);\n    return '<div class=\"tree\">\\n' + '    <ul>\\n' + '        <li>\\n' + tree.toHTML(3, indent) + '\\n' + '        </li>\\n' + '    </ul>\\n' + '</div>';\n  };\n\n  libExports.addPeeker = function (name, f) {\n    if (_.peekers[name]) _.peekers[name].push(f);\n  };\n\n  libExports.removePeeker = function (name, f) {\n    remove(_.peekers[name], f);\n  };\n\n  libExports.parse = function (e) {\n    return String(e).split(';').map(function (x) {\n      return _.parse(x);\n    });\n  };\n\n  libExports.api();\n  return libExports; //Done\n  //imports ======================================================================\n}({\n  //https://github.com/peterolson/BigInteger.js\n  bigInt: function () {\n    var bigInt = function (undefined) {\n      \"use strict\";\n\n      var BASE = 1e7,\n          LOG_BASE = 7,\n          MAX_INT = 9007199254740992,\n          MAX_INT_ARR = smallToArray(MAX_INT),\n          LOG_MAX_INT = Math.log(MAX_INT);\n\n      function Integer(v, radix) {\n        if (typeof v === \"undefined\") return Integer[0];\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\n        return parseValue(v);\n      }\n\n      function BigInteger(value, sign) {\n        this.value = value;\n        this.sign = sign;\n        this.isSmall = false;\n      }\n\n      BigInteger.prototype = Object.create(Integer.prototype);\n\n      function SmallInteger(value) {\n        this.value = value;\n        this.sign = value < 0;\n        this.isSmall = true;\n      }\n\n      SmallInteger.prototype = Object.create(Integer.prototype);\n\n      function isPrecise(n) {\n        return -MAX_INT < n && n < MAX_INT;\n      }\n\n      function smallToArray(n) {\n        if (n < 1e7) return [n];\n        if (n < 1e14) return [n % 1e7, Math.floor(n / 1e7)];\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n      }\n\n      function arrayToSmall(arr) {\n        trim(arr);\n        var length = arr.length;\n\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n          switch (length) {\n            case 0:\n              return 0;\n\n            case 1:\n              return arr[0];\n\n            case 2:\n              return arr[0] + arr[1] * BASE;\n\n            default:\n              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n          }\n        }\n\n        return arr;\n      }\n\n      function trim(v) {\n        var i = v.length;\n\n        while (v[--i] === 0);\n\n        v.length = i + 1;\n      }\n\n      function createArray(length) {\n        var x = new Array(length);\n        var i = -1;\n\n        while (++i < length) {\n          x[i] = 0;\n        }\n\n        return x;\n      }\n\n      function truncate(n) {\n        if (n > 0) return Math.floor(n);\n        return Math.ceil(n);\n      }\n\n      function add(a, b) {\n        var l_a = a.length,\n            l_b = b.length,\n            r = new Array(l_a),\n            carry = 0,\n            base = BASE,\n            sum,\n            i;\n\n        for (i = 0; i < l_b; i++) {\n          sum = a[i] + b[i] + carry;\n          carry = sum >= base ? 1 : 0;\n          r[i] = sum - carry * base;\n        }\n\n        while (i < l_a) {\n          sum = a[i] + carry;\n          carry = sum === base ? 1 : 0;\n          r[i++] = sum - carry * base;\n        }\n\n        if (carry > 0) r.push(carry);\n        return r;\n      }\n\n      function addAny(a, b) {\n        if (a.length >= b.length) return add(a, b);\n        return add(b, a);\n      }\n\n      function addSmall(a, carry) {\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            sum,\n            i;\n\n        for (i = 0; i < l; i++) {\n          sum = a[i] - base + carry;\n          carry = Math.floor(sum / base);\n          r[i] = sum - carry * base;\n          carry += 1;\n        }\n\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n\n        return r;\n      }\n\n      BigInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n\n        if (this.sign !== n.sign) {\n          return this.subtract(n.negate());\n        }\n\n        var a = this.value,\n            b = n.value;\n\n        if (n.isSmall) {\n          return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n        }\n\n        return new BigInteger(addAny(a, b), this.sign);\n      };\n\n      BigInteger.prototype.plus = BigInteger.prototype.add;\n\n      SmallInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n\n        if (a < 0 !== n.sign) {\n          return this.subtract(n.negate());\n        }\n\n        var b = n.value;\n\n        if (n.isSmall) {\n          if (isPrecise(a + b)) return new SmallInteger(a + b);\n          b = smallToArray(Math.abs(b));\n        }\n\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n      };\n\n      SmallInteger.prototype.plus = SmallInteger.prototype.add;\n\n      function subtract(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            r = new Array(a_l),\n            borrow = 0,\n            base = BASE,\n            i,\n            difference;\n\n        for (i = 0; i < b_l; i++) {\n          difference = a[i] - borrow - b[i];\n\n          if (difference < 0) {\n            difference += base;\n            borrow = 1;\n          } else borrow = 0;\n\n          r[i] = difference;\n        }\n\n        for (i = b_l; i < a_l; i++) {\n          difference = a[i] - borrow;\n          if (difference < 0) difference += base;else {\n            r[i++] = difference;\n            break;\n          }\n          r[i] = difference;\n        }\n\n        for (; i < a_l; i++) {\n          r[i] = a[i];\n        }\n\n        trim(r);\n        return r;\n      }\n\n      function subtractAny(a, b, sign) {\n        var value;\n\n        if (compareAbs(a, b) >= 0) {\n          value = subtract(a, b);\n        } else {\n          value = subtract(b, a);\n          sign = !sign;\n        }\n\n        value = arrayToSmall(value);\n\n        if (typeof value === \"number\") {\n          if (sign) value = -value;\n          return new SmallInteger(value);\n        }\n\n        return new BigInteger(value, sign);\n      }\n\n      function subtractSmall(a, b, sign) {\n        var l = a.length,\n            r = new Array(l),\n            carry = -b,\n            base = BASE,\n            i,\n            difference;\n\n        for (i = 0; i < l; i++) {\n          difference = a[i] + carry;\n          carry = Math.floor(difference / base);\n          difference %= base;\n          r[i] = difference < 0 ? difference + base : difference;\n        }\n\n        r = arrayToSmall(r);\n\n        if (typeof r === \"number\") {\n          if (sign) r = -r;\n          return new SmallInteger(r);\n        }\n\n        return new BigInteger(r, sign);\n      }\n\n      BigInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n\n        if (this.sign !== n.sign) {\n          return this.add(n.negate());\n        }\n\n        var a = this.value,\n            b = n.value;\n        if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n        return subtractAny(a, b, this.sign);\n      };\n\n      BigInteger.prototype.minus = BigInteger.prototype.subtract;\n\n      SmallInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n\n        if (a < 0 !== n.sign) {\n          return this.add(n.negate());\n        }\n\n        var b = n.value;\n\n        if (n.isSmall) {\n          return new SmallInteger(a - b);\n        }\n\n        return subtractSmall(b, Math.abs(a), a >= 0);\n      };\n\n      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n\n      BigInteger.prototype.negate = function () {\n        return new BigInteger(this.value, !this.sign);\n      };\n\n      SmallInteger.prototype.negate = function () {\n        var sign = this.sign;\n        var small = new SmallInteger(-this.value);\n        small.sign = !sign;\n        return small;\n      };\n\n      BigInteger.prototype.abs = function () {\n        return new BigInteger(this.value, false);\n      };\n\n      SmallInteger.prototype.abs = function () {\n        return new SmallInteger(Math.abs(this.value));\n      };\n\n      function multiplyLong(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            l = a_l + b_l,\n            r = createArray(l),\n            base = BASE,\n            product,\n            carry,\n            i,\n            a_i,\n            b_j;\n\n        for (i = 0; i < a_l; ++i) {\n          a_i = a[i];\n\n          for (var j = 0; j < b_l; ++j) {\n            b_j = b[j];\n            product = a_i * b_j + r[i + j];\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n            r[i + j + 1] += carry;\n          }\n        }\n\n        trim(r);\n        return r;\n      }\n\n      function multiplySmall(a, b) {\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            carry = 0,\n            product,\n            i;\n\n        for (i = 0; i < l; i++) {\n          product = a[i] * b + carry;\n          carry = Math.floor(product / base);\n          r[i] = product - carry * base;\n        }\n\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n\n        return r;\n      }\n\n      function shiftLeft(x, n) {\n        var r = [];\n\n        while (n-- > 0) r.push(0);\n\n        return r.concat(x);\n      }\n\n      function multiplyKaratsuba(x, y) {\n        var n = Math.max(x.length, y.length);\n        if (n <= 30) return multiplyLong(x, y);\n        n = Math.ceil(n / 2);\n        var b = x.slice(n),\n            a = x.slice(0, n),\n            d = y.slice(n),\n            c = y.slice(0, n);\n        var ac = multiplyKaratsuba(a, c),\n            bd = multiplyKaratsuba(b, d),\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n        trim(product);\n        return product;\n      }\n\n      function useKaratsuba(l1, l2) {\n        return -.012 * l1 - .012 * l2 + 15e-6 * l1 * l2 > 0;\n      }\n\n      BigInteger.prototype.multiply = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value,\n            sign = this.sign !== n.sign,\n            abs;\n\n        if (n.isSmall) {\n          if (b === 0) return Integer[0];\n          if (b === 1) return this;\n          if (b === -1) return this.negate();\n          abs = Math.abs(b);\n\n          if (abs < BASE) {\n            return new BigInteger(multiplySmall(a, abs), sign);\n          }\n\n          b = smallToArray(abs);\n        }\n\n        if (useKaratsuba(a.length, b.length)) return new BigInteger(multiplyKaratsuba(a, b), sign);\n        return new BigInteger(multiplyLong(a, b), sign);\n      };\n\n      BigInteger.prototype.times = BigInteger.prototype.multiply;\n\n      function multiplySmallAndArray(a, b, sign) {\n        if (a < BASE) {\n          return new BigInteger(multiplySmall(b, a), sign);\n        }\n\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n      }\n\n      SmallInteger.prototype._multiplyBySmall = function (a) {\n        if (isPrecise(a.value * this.value)) {\n          return new SmallInteger(a.value * this.value);\n        }\n\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n      };\n\n      BigInteger.prototype._multiplyBySmall = function (a) {\n        if (a.value === 0) return Integer[0];\n        if (a.value === 1) return this;\n        if (a.value === -1) return this.negate();\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n      };\n\n      SmallInteger.prototype.multiply = function (v) {\n        return parseValue(v)._multiplyBySmall(this);\n      };\n\n      SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n\n      function square(a) {\n        var l = a.length,\n            r = createArray(l + l),\n            base = BASE,\n            product,\n            carry,\n            i,\n            a_i,\n            a_j;\n\n        for (i = 0; i < l; i++) {\n          a_i = a[i];\n          carry = 0 - a_i * a_i;\n\n          for (var j = i; j < l; j++) {\n            a_j = a[j];\n            product = 2 * (a_i * a_j) + r[i + j] + carry;\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n          }\n\n          r[i + l] = carry;\n        }\n\n        trim(r);\n        return r;\n      }\n\n      BigInteger.prototype.square = function () {\n        return new BigInteger(square(this.value), false);\n      };\n\n      SmallInteger.prototype.square = function () {\n        var value = this.value * this.value;\n        if (isPrecise(value)) return new SmallInteger(value);\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n      };\n\n      function divMod1(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            base = BASE,\n            result = createArray(b.length),\n            divisorMostSignificantDigit = b[b_l - 1],\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\n            remainder = multiplySmall(a, lambda),\n            divisor = multiplySmall(b, lambda),\n            quotientDigit,\n            shift,\n            carry,\n            borrow,\n            i,\n            l,\n            q;\n        if (remainder.length <= a_l) remainder.push(0);\n        divisor.push(0);\n        divisorMostSignificantDigit = divisor[b_l - 1];\n\n        for (shift = a_l - b_l; shift >= 0; shift--) {\n          quotientDigit = base - 1;\n\n          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n          }\n\n          carry = 0;\n          borrow = 0;\n          l = divisor.length;\n\n          for (i = 0; i < l; i++) {\n            carry += quotientDigit * divisor[i];\n            q = Math.floor(carry / base);\n            borrow += remainder[shift + i] - (carry - q * base);\n            carry = q;\n\n            if (borrow < 0) {\n              remainder[shift + i] = borrow + base;\n              borrow = -1;\n            } else {\n              remainder[shift + i] = borrow;\n              borrow = 0;\n            }\n          }\n\n          while (borrow !== 0) {\n            quotientDigit -= 1;\n            carry = 0;\n\n            for (i = 0; i < l; i++) {\n              carry += remainder[shift + i] - base + divisor[i];\n\n              if (carry < 0) {\n                remainder[shift + i] = carry + base;\n                carry = 0;\n              } else {\n                remainder[shift + i] = carry;\n                carry = 1;\n              }\n            }\n\n            borrow += carry;\n          }\n\n          result[shift] = quotientDigit;\n        }\n\n        remainder = divModSmall(remainder, lambda)[0];\n        return [arrayToSmall(result), arrayToSmall(remainder)];\n      }\n\n      function divMod2(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            result = [],\n            part = [],\n            base = BASE,\n            guess,\n            xlen,\n            highx,\n            highy,\n            check;\n\n        while (a_l) {\n          part.unshift(a[--a_l]);\n          trim(part);\n\n          if (compareAbs(part, b) < 0) {\n            result.push(0);\n            continue;\n          }\n\n          xlen = part.length;\n          highx = part[xlen - 1] * base + part[xlen - 2];\n          highy = b[b_l - 1] * base + b[b_l - 2];\n\n          if (xlen > b_l) {\n            highx = (highx + 1) * base;\n          }\n\n          guess = Math.ceil(highx / highy);\n\n          do {\n            check = multiplySmall(b, guess);\n            if (compareAbs(check, part) <= 0) break;\n            guess--;\n          } while (guess);\n\n          result.push(guess);\n          part = subtract(part, check);\n        }\n\n        result.reverse();\n        return [arrayToSmall(result), arrayToSmall(part)];\n      }\n\n      function divModSmall(value, lambda) {\n        var length = value.length,\n            quotient = createArray(length),\n            base = BASE,\n            i,\n            q,\n            remainder,\n            divisor;\n        remainder = 0;\n\n        for (i = length - 1; i >= 0; --i) {\n          divisor = remainder * base + value[i];\n          q = truncate(divisor / lambda);\n          remainder = divisor - q * lambda;\n          quotient[i] = q | 0;\n        }\n\n        return [quotient, remainder | 0];\n      }\n\n      function divModAny(self, v) {\n        var value,\n            n = parseValue(v);\n        var a = self.value,\n            b = n.value;\n        var quotient;\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n\n        if (self.isSmall) {\n          if (n.isSmall) {\n            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n          }\n\n          return [Integer[0], self];\n        }\n\n        if (n.isSmall) {\n          if (b === 1) return [self, Integer[0]];\n          if (b == -1) return [self.negate(), Integer[0]];\n          var abs = Math.abs(b);\n\n          if (abs < BASE) {\n            value = divModSmall(a, abs);\n            quotient = arrayToSmall(value[0]);\n            var remainder = value[1];\n            if (self.sign) remainder = -remainder;\n\n            if (typeof quotient === \"number\") {\n              if (self.sign !== n.sign) quotient = -quotient;\n              return [new SmallInteger(quotient), new SmallInteger(remainder)];\n            }\n\n            return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\n          }\n\n          b = smallToArray(abs);\n        }\n\n        var comparison = compareAbs(a, b);\n        if (comparison === -1) return [Integer[0], self];\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\n        if (a.length + b.length <= 200) value = divMod1(a, b);else value = divMod2(a, b);\n        quotient = value[0];\n        var qSign = self.sign !== n.sign,\n            mod = value[1],\n            mSign = self.sign;\n\n        if (typeof quotient === \"number\") {\n          if (qSign) quotient = -quotient;\n          quotient = new SmallInteger(quotient);\n        } else quotient = new BigInteger(quotient, qSign);\n\n        if (typeof mod === \"number\") {\n          if (mSign) mod = -mod;\n          mod = new SmallInteger(mod);\n        } else mod = new BigInteger(mod, mSign);\n\n        return [quotient, mod];\n      }\n\n      BigInteger.prototype.divmod = function (v) {\n        var result = divModAny(this, v);\n        return {\n          quotient: result[0],\n          remainder: result[1]\n        };\n      };\n\n      SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n\n      BigInteger.prototype.divide = function (v) {\n        return divModAny(this, v)[0];\n      };\n\n      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n\n      BigInteger.prototype.mod = function (v) {\n        return divModAny(this, v)[1];\n      };\n\n      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n\n      BigInteger.prototype.pow = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value,\n            value,\n            x,\n            y;\n        if (b === 0) return Integer[1];\n        if (a === 0) return Integer[0];\n        if (a === 1) return Integer[1];\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n\n        if (n.sign) {\n          return Integer[0];\n        }\n\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n\n        if (this.isSmall) {\n          if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n        }\n\n        x = this;\n        y = Integer[1];\n\n        while (true) {\n          if (b & 1 === 1) {\n            y = y.times(x);\n            --b;\n          }\n\n          if (b === 0) break;\n          b /= 2;\n          x = x.square();\n        }\n\n        return y;\n      };\n\n      SmallInteger.prototype.pow = BigInteger.prototype.pow;\n\n      BigInteger.prototype.modPow = function (exp, mod) {\n        exp = parseValue(exp);\n        mod = parseValue(mod);\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n        var r = Integer[1],\n            base = this.mod(mod);\n\n        while (exp.isPositive()) {\n          if (base.isZero()) return Integer[0];\n          if (exp.isOdd()) r = r.multiply(base).mod(mod);\n          exp = exp.divide(2);\n          base = base.square().mod(mod);\n        }\n\n        return r;\n      };\n\n      SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n\n      function compareAbs(a, b) {\n        if (a.length !== b.length) {\n          return a.length > b.length ? 1 : -1;\n        }\n\n        for (var i = a.length - 1; i >= 0; i--) {\n          if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n        }\n\n        return 0;\n      }\n\n      BigInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n        if (n.isSmall) return 1;\n        return compareAbs(a, b);\n      };\n\n      SmallInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = Math.abs(this.value),\n            b = n.value;\n\n        if (n.isSmall) {\n          b = Math.abs(b);\n          return a === b ? 0 : a > b ? 1 : -1;\n        }\n\n        return -1;\n      };\n\n      BigInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n\n        if (v === -Infinity) {\n          return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n\n        if (this.sign !== n.sign) {\n          return n.sign ? 1 : -1;\n        }\n\n        if (n.isSmall) {\n          return this.sign ? -1 : 1;\n        }\n\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\n      };\n\n      BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n\n      SmallInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n\n        if (v === -Infinity) {\n          return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n\n        if (n.isSmall) {\n          return a == b ? 0 : a > b ? 1 : -1;\n        }\n\n        if (a < 0 !== n.sign) {\n          return a < 0 ? -1 : 1;\n        }\n\n        return a < 0 ? 1 : -1;\n      };\n\n      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n\n      BigInteger.prototype.equals = function (v) {\n        return this.compare(v) === 0;\n      };\n\n      SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n\n      BigInteger.prototype.notEquals = function (v) {\n        return this.compare(v) !== 0;\n      };\n\n      SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n\n      BigInteger.prototype.greater = function (v) {\n        return this.compare(v) > 0;\n      };\n\n      SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n\n      BigInteger.prototype.lesser = function (v) {\n        return this.compare(v) < 0;\n      };\n\n      SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n\n      BigInteger.prototype.greaterOrEquals = function (v) {\n        return this.compare(v) >= 0;\n      };\n\n      SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n\n      BigInteger.prototype.lesserOrEquals = function (v) {\n        return this.compare(v) <= 0;\n      };\n\n      SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n\n      BigInteger.prototype.isEven = function () {\n        return (this.value[0] & 1) === 0;\n      };\n\n      SmallInteger.prototype.isEven = function () {\n        return (this.value & 1) === 0;\n      };\n\n      BigInteger.prototype.isOdd = function () {\n        return (this.value[0] & 1) === 1;\n      };\n\n      SmallInteger.prototype.isOdd = function () {\n        return (this.value & 1) === 1;\n      };\n\n      BigInteger.prototype.isPositive = function () {\n        return !this.sign;\n      };\n\n      SmallInteger.prototype.isPositive = function () {\n        return this.value > 0;\n      };\n\n      BigInteger.prototype.isNegative = function () {\n        return this.sign;\n      };\n\n      SmallInteger.prototype.isNegative = function () {\n        return this.value < 0;\n      };\n\n      BigInteger.prototype.isUnit = function () {\n        return false;\n      };\n\n      SmallInteger.prototype.isUnit = function () {\n        return Math.abs(this.value) === 1;\n      };\n\n      BigInteger.prototype.isZero = function () {\n        return false;\n      };\n\n      SmallInteger.prototype.isZero = function () {\n        return this.value === 0;\n      };\n\n      BigInteger.prototype.isDivisibleBy = function (v) {\n        var n = parseValue(v);\n        var value = n.value;\n        if (value === 0) return false;\n        if (value === 1) return true;\n        if (value === 2) return this.isEven();\n        return this.mod(n).equals(Integer[0]);\n      };\n\n      SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n\n      function isBasicPrime(v) {\n        var n = v.abs();\n        if (n.isUnit()) return false;\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n        if (n.lesser(49)) return true;\n      }\n\n      function millerRabinTest(n, a) {\n        var nPrev = n.prev(),\n            b = nPrev,\n            r = 0,\n            d,\n            t,\n            i,\n            x;\n\n        while (b.isEven()) b = b.divide(2), r++;\n\n        next: for (i = 0; i < a.length; i++) {\n          if (n.lesser(a[i])) continue;\n          x = bigInt(a[i]).modPow(b, n);\n          if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\n\n          for (d = r - 1; d != 0; d--) {\n            x = x.square().mod(n);\n            if (x.isUnit()) return false;\n            if (x.equals(nPrev)) continue next;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n      BigInteger.prototype.isPrime = function (strict) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var bits = n.bitLength();\n        if (bits <= 64) return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\n        var logN = Math.log(2) * bits;\n        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt(i + 2));\n        }\n\n        return millerRabinTest(n, a);\n      };\n\n      SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n\n      BigInteger.prototype.isProbablePrime = function (iterations) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var t = iterations === undefined ? 5 : iterations;\n\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt.randBetween(2, n.minus(2)));\n        }\n\n        return millerRabinTest(n, a);\n      };\n\n      SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n\n      BigInteger.prototype.modInv = function (n) {\n        var t = bigInt.zero,\n            newT = bigInt.one,\n            r = parseValue(n),\n            newR = this.abs(),\n            q,\n            lastT,\n            lastR;\n\n        while (!newR.equals(bigInt.zero)) {\n          q = r.divide(newR);\n          lastT = t;\n          lastR = r;\n          t = newT;\n          r = newR;\n          newT = lastT.subtract(q.multiply(newT));\n          newR = lastR.subtract(q.multiply(newR));\n        }\n\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n\n        if (t.compare(0) === -1) {\n          t = t.add(n);\n        }\n\n        if (this.isNegative()) {\n          return t.negate();\n        }\n\n        return t;\n      };\n\n      SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n\n      BigInteger.prototype.next = function () {\n        var value = this.value;\n\n        if (this.sign) {\n          return subtractSmall(value, 1, this.sign);\n        }\n\n        return new BigInteger(addSmall(value, 1), this.sign);\n      };\n\n      SmallInteger.prototype.next = function () {\n        var value = this.value;\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n        return new BigInteger(MAX_INT_ARR, false);\n      };\n\n      BigInteger.prototype.prev = function () {\n        var value = this.value;\n\n        if (this.sign) {\n          return new BigInteger(addSmall(value, 1), true);\n        }\n\n        return subtractSmall(value, 1, this.sign);\n      };\n\n      SmallInteger.prototype.prev = function () {\n        var value = this.value;\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n        return new BigInteger(MAX_INT_ARR, true);\n      };\n\n      var powersOfTwo = [1];\n\n      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n\n      var powers2Length = powersOfTwo.length,\n          highestPower2 = powersOfTwo[powers2Length - 1];\n\n      function shift_isSmall(n) {\n        return (typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE || n instanceof BigInteger && n.value.length <= 1;\n      }\n\n      BigInteger.prototype.shiftLeft = function (n) {\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n\n        n = +n;\n        if (n < 0) return this.shiftRight(-n);\n        var result = this;\n        if (result.isZero()) return result;\n\n        while (n >= powers2Length) {\n          result = result.multiply(highestPower2);\n          n -= powers2Length - 1;\n        }\n\n        return result.multiply(powersOfTwo[n]);\n      };\n\n      SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n\n      BigInteger.prototype.shiftRight = function (n) {\n        var remQuo;\n\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n\n        n = +n;\n        if (n < 0) return this.shiftLeft(-n);\n        var result = this;\n\n        while (n >= powers2Length) {\n          if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n          remQuo = divModAny(result, highestPower2);\n          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n          n -= powers2Length - 1;\n        }\n\n        remQuo = divModAny(result, powersOfTwo[n]);\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n      };\n\n      SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n\n      function bitwise(x, y, fn) {\n        y = parseValue(y);\n        var xSign = x.isNegative(),\n            ySign = y.isNegative();\n        var xRem = xSign ? x.not() : x,\n            yRem = ySign ? y.not() : y;\n        var xDigit = 0,\n            yDigit = 0;\n        var xDivMod = null,\n            yDivMod = null;\n        var result = [];\n\n        while (!xRem.isZero() || !yRem.isZero()) {\n          xDivMod = divModAny(xRem, highestPower2);\n          xDigit = xDivMod[1].toJSNumber();\n\n          if (xSign) {\n            xDigit = highestPower2 - 1 - xDigit;\n          }\n\n          yDivMod = divModAny(yRem, highestPower2);\n          yDigit = yDivMod[1].toJSNumber();\n\n          if (ySign) {\n            yDigit = highestPower2 - 1 - yDigit;\n          }\n\n          xRem = xDivMod[0];\n          yRem = yDivMod[0];\n          result.push(fn(xDigit, yDigit));\n        }\n\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n\n        for (var i = result.length - 1; i >= 0; i -= 1) {\n          sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n        }\n\n        return sum;\n      }\n\n      BigInteger.prototype.not = function () {\n        return this.negate().prev();\n      };\n\n      SmallInteger.prototype.not = BigInteger.prototype.not;\n\n      BigInteger.prototype.and = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a & b;\n        });\n      };\n\n      SmallInteger.prototype.and = BigInteger.prototype.and;\n\n      BigInteger.prototype.or = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a | b;\n        });\n      };\n\n      SmallInteger.prototype.or = BigInteger.prototype.or;\n\n      BigInteger.prototype.xor = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a ^ b;\n        });\n      };\n\n      SmallInteger.prototype.xor = BigInteger.prototype.xor;\n      var LOBMASK_I = 1 << 30,\n          LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n\n      function roughLOB(n) {\n        var v = n.value,\n            x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\n        return x & -x;\n      }\n\n      function integerLogarithm(value, base) {\n        if (base.compareTo(value) <= 0) {\n          var tmp = integerLogarithm(value, base.square(base));\n          var p = tmp.p;\n          var e = tmp.e;\n          var t = p.multiply(base);\n          return t.compareTo(value) <= 0 ? {\n            p: t,\n            e: e * 2 + 1\n          } : {\n            p: p,\n            e: e * 2\n          };\n        }\n\n        return {\n          p: bigInt(1),\n          e: 0\n        };\n      }\n\n      BigInteger.prototype.bitLength = function () {\n        var n = this;\n\n        if (n.compareTo(bigInt(0)) < 0) {\n          n = n.negate().subtract(bigInt(1));\n        }\n\n        if (n.compareTo(bigInt(0)) === 0) {\n          return bigInt(0);\n        }\n\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n      };\n\n      SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n\n      function max(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.greater(b) ? a : b;\n      }\n\n      function min(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.lesser(b) ? a : b;\n      }\n\n      function gcd(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        if (a.equals(b)) return a;\n        if (a.isZero()) return b;\n        if (b.isZero()) return a;\n        var c = Integer[1],\n            d,\n            t;\n\n        while (a.isEven() && b.isEven()) {\n          d = Math.min(roughLOB(a), roughLOB(b));\n          a = a.divide(d);\n          b = b.divide(d);\n          c = c.multiply(d);\n        }\n\n        while (a.isEven()) {\n          a = a.divide(roughLOB(a));\n        }\n\n        do {\n          while (b.isEven()) {\n            b = b.divide(roughLOB(b));\n          }\n\n          if (a.greater(b)) {\n            t = b;\n            b = a;\n            a = t;\n          }\n\n          b = b.subtract(a);\n        } while (!b.isZero());\n\n        return c.isUnit() ? a : a.multiply(c);\n      }\n\n      function lcm(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        return a.divide(gcd(a, b)).multiply(b);\n      }\n\n      function randBetween(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        var low = min(a, b),\n            high = max(a, b);\n        var range = high.subtract(low).add(1);\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\n        var length = range.value.length - 1;\n        var result = [],\n            restricted = true;\n\n        for (var i = length; i >= 0; i--) {\n          var top = restricted ? range.value[i] : BASE;\n          var digit = truncate(Math.random() * top);\n          result.unshift(digit);\n          if (digit < top) restricted = false;\n        }\n\n        result = arrayToSmall(result);\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\n      }\n\n      var parseBase = function (text, base) {\n        var length = text.length;\n        var i;\n        var absBase = Math.abs(base);\n\n        for (var i = 0; i < length; i++) {\n          var c = text[i].toLowerCase();\n          if (c === \"-\") continue;\n\n          if (/[a-z0-9]/.test(c)) {\n            if (/[0-9]/.test(c) && +c >= absBase) {\n              if (c === \"1\" && absBase === 1) continue;\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            } else if (c.charCodeAt(0) - 87 >= absBase) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n          }\n        }\n\n        if (2 <= base && base <= 36) {\n          if (length <= LOG_MAX_INT / Math.log(base)) {\n            var result = parseInt(text, base);\n\n            if (isNaN(result)) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n\n            return new SmallInteger(parseInt(text, base));\n          }\n        }\n\n        base = parseValue(base);\n        var digits = [];\n        var isNegative = text[0] === \"-\";\n\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\n          var c = text[i].toLowerCase(),\n              charCode = c.charCodeAt(0);\n          if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));else if (c === \"<\") {\n            var start = i;\n\n            do {\n              i++;\n            } while (text[i] !== \">\");\n\n            digits.push(parseValue(text.slice(start + 1, i)));\n          } else throw new Error(c + \" is not a valid character\");\n        }\n\n        return parseBaseFromArray(digits, base, isNegative);\n      };\n\n      function parseBaseFromArray(digits, base, isNegative) {\n        var val = Integer[0],\n            pow = Integer[1],\n            i;\n\n        for (i = digits.length - 1; i >= 0; i--) {\n          val = val.add(digits[i].times(pow));\n          pow = pow.times(base);\n        }\n\n        return isNegative ? val.negate() : val;\n      }\n\n      function stringify(digit) {\n        if (digit <= 35) {\n          return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit);\n        }\n\n        return \"<\" + digit + \">\";\n      }\n\n      function toBase(n, base) {\n        base = bigInt(base);\n\n        if (base.isZero()) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n        }\n\n        if (base.equals(-1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          if (n.isNegative()) return {\n            value: [].concat.apply([], Array.apply(null, Array(-n)).map(Array.prototype.valueOf, [1, 0])),\n            isNegative: false\n          };\n          var arr = Array.apply(null, Array(+n - 1)).map(Array.prototype.valueOf, [0, 1]);\n          arr.unshift([1]);\n          return {\n            value: [].concat.apply([], arr),\n            isNegative: false\n          };\n        }\n\n        var neg = false;\n\n        if (n.isNegative() && base.isPositive()) {\n          neg = true;\n          n = n.abs();\n        }\n\n        if (base.equals(1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          return {\n            value: Array.apply(null, Array(+n)).map(Number.prototype.valueOf, 1),\n            isNegative: neg\n          };\n        }\n\n        var out = [];\n        var left = n,\n            divmod;\n\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\n          divmod = left.divmod(base);\n          left = divmod.quotient;\n          var digit = divmod.remainder;\n\n          if (digit.isNegative()) {\n            digit = base.minus(digit).abs();\n            left = left.next();\n          }\n\n          out.push(digit.toJSNumber());\n        }\n\n        out.push(left.toJSNumber());\n        return {\n          value: out.reverse(),\n          isNegative: neg\n        };\n      }\n\n      function toBaseString(n, base) {\n        var arr = toBase(n, base);\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(stringify).join(\"\");\n      }\n\n      BigInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n\n      SmallInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n\n      BigInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix !== 10) return toBaseString(this, radix);\n        var v = this.value,\n            l = v.length,\n            str = String(v[--l]),\n            zeros = \"0000000\",\n            digit;\n\n        while (--l >= 0) {\n          digit = String(v[l]);\n          str += zeros.slice(digit.length) + digit;\n        }\n\n        var sign = this.sign ? \"-\" : \"\";\n        return sign + str;\n      };\n\n      SmallInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix != 10) return toBaseString(this, radix);\n        return String(this.value);\n      };\n\n      BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () {\n        return this.toString();\n      };\n\n      BigInteger.prototype.valueOf = function () {\n        return parseInt(this.toString(), 10);\n      };\n\n      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n\n      SmallInteger.prototype.valueOf = function () {\n        return this.value;\n      };\n\n      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n\n      function parseStringValue(v) {\n        if (isPrecise(+v)) {\n          var x = +v;\n          if (x === truncate(x)) return new SmallInteger(x);\n          throw new Error(\"Invalid integer: \" + v);\n        }\n\n        var sign = v[0] === \"-\";\n        if (sign) v = v.slice(1);\n        var split = v.split(/e/i);\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n\n        if (split.length === 2) {\n          var exp = split[1];\n          if (exp[0] === \"+\") exp = exp.slice(1);\n          exp = +exp;\n          if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n          var text = split[0];\n          var decimalPlace = text.indexOf(\".\");\n\n          if (decimalPlace >= 0) {\n            exp -= text.length - decimalPlace - 1;\n            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n          }\n\n          if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n          text += new Array(exp + 1).join(\"0\");\n          v = text;\n        }\n\n        var isValid = /^([0-9][0-9]*)$/.test(v);\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\n        var r = [],\n            max = v.length,\n            l = LOG_BASE,\n            min = max - l;\n\n        while (max > 0) {\n          r.push(+v.slice(min, max));\n          min -= l;\n          if (min < 0) min = 0;\n          max -= l;\n        }\n\n        trim(r);\n        return new BigInteger(r, sign);\n      }\n\n      function parseNumberValue(v) {\n        if (isPrecise(v)) {\n          if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n          return new SmallInteger(v);\n        }\n\n        return parseStringValue(v.toString());\n      }\n\n      function parseValue(v) {\n        if (typeof v === \"number\") {\n          return parseNumberValue(v);\n        }\n\n        if (typeof v === \"string\") {\n          return parseStringValue(v);\n        }\n\n        return v;\n      }\n\n      for (var i = 0; i < 1e3; i++) {\n        Integer[i] = new SmallInteger(i);\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\n      }\n\n      Integer.one = Integer[1];\n      Integer.zero = Integer[0];\n      Integer.minusOne = Integer[-1];\n      Integer.max = max;\n      Integer.min = min;\n      Integer.gcd = gcd;\n      Integer.lcm = lcm;\n\n      Integer.isInstance = function (x) {\n        return x instanceof BigInteger || x instanceof SmallInteger;\n      };\n\n      Integer.randBetween = randBetween;\n\n      Integer.fromArray = function (digits, base, isNegative) {\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n      };\n\n      return Integer;\n    }();\n\n    if (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n      module.exports = bigInt;\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n      define(\"big-integer\", [], function () {\n        return bigInt;\n      });\n    }\n\n    return bigInt;\n  }(),\n\n  /* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n  bigDec: function (n) {\n    \"use strict\";\n\n    var e,\n        i,\n        t,\n        r = 9e15,\n        s = 1e9,\n        o = \"0123456789abcdef\",\n        u = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",\n        c = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",\n        f = {\n      precision: 20,\n      rounding: 4,\n      modulo: 1,\n      toExpNeg: -7,\n      toExpPos: 21,\n      minE: -r,\n      maxE: r,\n      crypto: !1\n    },\n        h = !0,\n        a = \"[DecimalError] \",\n        d = a + \"Invalid argument: \",\n        l = a + \"Precision limit exceeded\",\n        p = a + \"crypto unavailable\",\n        g = Math.floor,\n        w = Math.pow,\n        m = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n        v = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n        N = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n        b = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        E = 1e7,\n        x = 7,\n        M = u.length - 1,\n        y = c.length - 1,\n        q = {\n      name: \"[object Decimal]\"\n    };\n\n    function O(n) {\n      var e,\n          i,\n          t,\n          r = n.length - 1,\n          s = \"\",\n          o = n[0];\n\n      if (r > 0) {\n        for (s += o, e = 1; e < r; e++) t = n[e] + \"\", (i = x - t.length) && (s += S(i)), s += t;\n\n        o = n[e], (i = x - (t = o + \"\").length) && (s += S(i));\n      } else if (0 === o) return \"0\";\n\n      for (; o % 10 == 0;) o /= 10;\n\n      return s + o;\n    }\n\n    function F(n, e, i) {\n      if (n !== ~~n || n < e || n > i) throw Error(d + n);\n    }\n\n    function A(n, e, i, t) {\n      var r, s, o, u;\n\n      for (s = n[0]; s >= 10; s /= 10) --e;\n\n      return --e < 0 ? (e += x, r = 0) : (r = Math.ceil((e + 1) / x), e %= x), s = w(10, x - e), u = n[r] % s | 0, null == t ? e < 3 ? (0 == e ? u = u / 100 | 0 : 1 == e && (u = u / 10 | 0), o = i < 4 && 99999 == u || i > 3 && 49999 == u || 5e4 == u || 0 == u) : o = (i < 4 && u + 1 == s || i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 100 | 0) == w(10, e - 2) - 1 || (u == s / 2 || 0 == u) && 0 == (n[r + 1] / s / 100 | 0) : e < 4 ? (0 == e ? u = u / 1e3 | 0 : 1 == e ? u = u / 100 | 0 : 2 == e && (u = u / 10 | 0), o = (t || i < 4) && 9999 == u || !t && i > 3 && 4999 == u) : o = ((t || i < 4) && u + 1 == s || !t && i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 1e3 | 0) == w(10, e - 3) - 1, o;\n    }\n\n    function D(n, e, i) {\n      for (var t, r, s = [0], u = 0, c = n.length; u < c;) {\n        for (r = s.length; r--;) s[r] *= e;\n\n        for (s[0] += o.indexOf(n.charAt(u++)), t = 0; t < s.length; t++) s[t] > i - 1 && (void 0 === s[t + 1] && (s[t + 1] = 0), s[t + 1] += s[t] / i | 0, s[t] %= i);\n      }\n\n      return s.reverse();\n    }\n\n    q.absoluteValue = q.abs = function () {\n      var n = new this.constructor(this);\n      return n.s < 0 && (n.s = 1), P(n);\n    }, q.ceil = function () {\n      return P(new this.constructor(this), this.e + 1, 2);\n    }, q.comparedTo = q.cmp = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s = this,\n          o = s.d,\n          u = (n = new s.constructor(n)).d,\n          c = s.s,\n          f = n.s;\n      if (!o || !u) return c && f ? c !== f ? c : o === u ? 0 : !o ^ c < 0 ? 1 : -1 : NaN;\n      if (!o[0] || !u[0]) return o[0] ? c : u[0] ? -f : 0;\n      if (c !== f) return c;\n      if (s.e !== n.e) return s.e > n.e ^ c < 0 ? 1 : -1;\n\n      for (e = 0, i = (t = o.length) < (r = u.length) ? t : r; e < i; ++e) if (o[e] !== u[e]) return o[e] > u[e] ^ c < 0 ? 1 : -1;\n\n      return t === r ? 0 : t > r ^ c < 0 ? 1 : -1;\n    }, q.cosine = q.cos = function () {\n      var n,\n          e,\n          i = this,\n          r = i.constructor;\n      return i.d ? i.d[0] ? (n = r.precision, e = r.rounding, r.precision = n + Math.max(i.e, i.sd()) + x, r.rounding = 1, i = function (n, e) {\n        var i,\n            t,\n            r = e.d.length;\n        r < 32 ? (i = Math.ceil(r / 3), t = Math.pow(4, -i).toString()) : (i = 16, t = \"2.3283064365386962890625e-10\");\n        n.precision += i, e = W(n, 1, e.times(t), new n(1));\n\n        for (var s = i; s--;) {\n          var o = e.times(e);\n          e = o.times(o).minus(o).times(8).plus(1);\n        }\n\n        return n.precision -= i, e;\n      }(r, J(r, i)), r.precision = n, r.rounding = e, P(2 == t || 3 == t ? i.neg() : i, n, e, !0)) : new r(1) : new r(NaN);\n    }, q.cubeRoot = q.cbrt = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a = this,\n          d = a.constructor;\n      if (!a.isFinite() || a.isZero()) return new d(a);\n\n      for (h = !1, (s = a.s * Math.pow(a.s * a, 1 / 3)) && Math.abs(s) != 1 / 0 ? t = new d(s.toString()) : (i = O(a.d), (s = ((n = a.e) - i.length + 1) % 3) && (i += 1 == s || -2 == s ? \"0\" : \"00\"), s = Math.pow(i, 1 / 3), n = g((n + 1) / 3) - (n % 3 == (n < 0 ? -1 : 2)), (t = new d(i = s == 1 / 0 ? \"5e\" + n : (i = s.toExponential()).slice(0, i.indexOf(\"e\") + 1) + n)).s = a.s), o = (n = d.precision) + 3;;) if (f = (c = (u = t).times(u).times(u)).plus(a), t = Z(f.plus(a).times(u), f.plus(c), o + 2, 1), O(u.d).slice(0, o) === (i = O(t.d)).slice(0, o)) {\n        if (\"9999\" != (i = i.slice(o - 3, o + 1)) && (r || \"4999\" != i)) {\n          +i && (+i.slice(1) || \"5\" != i.charAt(0)) || (P(t, n + 1, 1), e = !t.times(t).times(t).eq(a));\n          break;\n        }\n\n        if (!r && (P(u, n + 1, 0), u.times(u).times(u).eq(a))) {\n          t = u;\n          break;\n        }\n\n        o += 4, r = 1;\n      }\n\n      return h = !0, P(t, n, d.rounding, e);\n    }, q.decimalPlaces = q.dp = function () {\n      var n,\n          e = this.d,\n          i = NaN;\n\n      if (e) {\n        if (i = ((n = e.length - 1) - g(this.e / x)) * x, n = e[n]) for (; n % 10 == 0; n /= 10) i--;\n        i < 0 && (i = 0);\n      }\n\n      return i;\n    }, q.dividedBy = q.div = function (n) {\n      return Z(this, new this.constructor(n));\n    }, q.dividedToIntegerBy = q.divToInt = function (n) {\n      var e = this.constructor;\n      return P(Z(this, new e(n), 0, 1, 1), e.precision, e.rounding);\n    }, q.equals = q.eq = function (n) {\n      return 0 === this.cmp(n);\n    }, q.floor = function () {\n      return P(new this.constructor(this), this.e + 1, 3);\n    }, q.greaterThan = q.gt = function (n) {\n      return this.cmp(n) > 0;\n    }, q.greaterThanOrEqualTo = q.gte = function (n) {\n      var e = this.cmp(n);\n      return 1 == e || 0 === e;\n    }, q.hyperbolicCosine = q.cosh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s = this,\n          o = s.constructor,\n          u = new o(1);\n      if (!s.isFinite()) return new o(s.s ? 1 / 0 : NaN);\n      if (s.isZero()) return u;\n      i = o.precision, t = o.rounding, o.precision = i + Math.max(s.e, s.sd()) + 4, o.rounding = 1, (r = s.d.length) < 32 ? (n = Math.ceil(r / 3), e = Math.pow(4, -n).toString()) : (n = 16, e = \"2.3283064365386962890625e-10\"), s = W(o, 1, s.times(e), new o(1), !0);\n\n      for (var c, f = n, h = new o(8); f--;) c = s.times(s), s = u.minus(c.times(h.minus(c.times(h))));\n\n      return P(s, o.precision = i, o.rounding = t, !0);\n    }, q.hyperbolicSine = q.sinh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      if (!r.isFinite() || r.isZero()) return new s(r);\n      if (e = s.precision, i = s.rounding, s.precision = e + Math.max(r.e, r.sd()) + 4, s.rounding = 1, (t = r.d.length) < 3) r = W(s, 2, r, r, !0);else {\n        n = (n = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | n, r = W(s, 2, r = r.times(Math.pow(5, -n)), r, !0);\n\n        for (var o, u = new s(5), c = new s(16), f = new s(20); n--;) o = r.times(r), r = r.times(u.plus(o.times(c.times(o).plus(f))));\n      }\n      return s.precision = e, s.rounding = i, P(r, e, i, !0);\n    }, q.hyperbolicTangent = q.tanh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 7, t.rounding = 1, Z(i.sinh(), i.cosh(), t.precision = n, t.rounding = e)) : new t(i.s);\n    }, q.inverseCosine = q.acos = function () {\n      var n,\n          e = this,\n          i = e.constructor,\n          t = e.abs().cmp(1),\n          r = i.precision,\n          s = i.rounding;\n      return -1 !== t ? 0 === t ? e.isNeg() ? _(i, r, s) : new i(0) : new i(NaN) : e.isZero() ? _(i, r + 4, s).times(.5) : (i.precision = r + 6, i.rounding = 1, e = e.asin(), n = _(i, r + 4, s).times(.5), i.precision = r, i.rounding = s, n.minus(e));\n    }, q.inverseHyperbolicCosine = q.acosh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.lte(1) ? new t(i.eq(1) ? 0 : NaN) : i.isFinite() ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(Math.abs(i.e), i.sd()) + 4, t.rounding = 1, h = !1, i = i.times(i).minus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln()) : new t(i);\n    }, q.inverseHyperbolicSine = q.asinh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return !i.isFinite() || i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 2 * Math.max(Math.abs(i.e), i.sd()) + 6, t.rounding = 1, h = !1, i = i.times(i).plus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln());\n    }, q.inverseHyperbolicTangent = q.atanh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      return r.isFinite() ? r.e >= 0 ? new s(r.abs().eq(1) ? r.s / 0 : r.isZero() ? r : NaN) : (n = s.precision, e = s.rounding, t = r.sd(), Math.max(t, n) < 2 * -r.e - 1 ? P(new s(r), n, e, !0) : (s.precision = i = t - r.e, r = Z(r.plus(1), new s(1).minus(r), i + n, 1), s.precision = n + 4, s.rounding = 1, r = r.ln(), s.precision = n, s.rounding = e, r.times(.5))) : new s(NaN);\n    }, q.inverseSine = q.asin = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      return r.isZero() ? new s(r) : (e = r.abs().cmp(1), i = s.precision, t = s.rounding, -1 !== e ? 0 === e ? ((n = _(s, i + 4, t).times(.5)).s = r.s, n) : new s(NaN) : (s.precision = i + 6, s.rounding = 1, r = r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(), s.precision = i, s.rounding = t, r.times(2)));\n    }, q.inverseTangent = q.atan = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = this,\n          a = f.constructor,\n          d = a.precision,\n          l = a.rounding;\n\n      if (f.isFinite()) {\n        if (f.isZero()) return new a(f);\n        if (f.abs().eq(1) && d + 4 <= y) return (o = _(a, d + 4, l).times(.25)).s = f.s, o;\n      } else {\n        if (!f.s) return new a(NaN);\n        if (d + 4 <= y) return (o = _(a, d + 4, l).times(.5)).s = f.s, o;\n      }\n\n      for (a.precision = u = d + 10, a.rounding = 1, n = i = Math.min(28, u / x + 2 | 0); n; --n) f = f.div(f.times(f).plus(1).sqrt().plus(1));\n\n      for (h = !1, e = Math.ceil(u / x), t = 1, c = f.times(f), o = new a(f), r = f; -1 !== n;) if (r = r.times(c), s = o.minus(r.div(t += 2)), r = r.times(c), void 0 !== (o = s.plus(r.div(t += 2))).d[e]) for (n = e; o.d[n] === s.d[n] && n--;);\n\n      return i && (o = o.times(2 << i - 1)), h = !0, P(o, a.precision = d, a.rounding = l, !0);\n    }, q.isFinite = function () {\n      return !!this.d;\n    }, q.isInteger = q.isInt = function () {\n      return !!this.d && g(this.e / x) > this.d.length - 2;\n    }, q.isNaN = function () {\n      return !this.s;\n    }, q.isNegative = q.isNeg = function () {\n      return this.s < 0;\n    }, q.isPositive = q.isPos = function () {\n      return this.s > 0;\n    }, q.isZero = function () {\n      return !!this.d && 0 === this.d[0];\n    }, q.lessThan = q.lt = function (n) {\n      return this.cmp(n) < 0;\n    }, q.lessThanOrEqualTo = q.lte = function (n) {\n      return this.cmp(n) < 1;\n    }, q.logarithm = q.log = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = this.constructor,\n          a = f.precision,\n          d = f.rounding;\n      if (null == n) n = new f(10), e = !0;else {\n        if (i = (n = new f(n)).d, n.s < 0 || !i || !i[0] || n.eq(1)) return new f(NaN);\n        e = n.eq(10);\n      }\n      if (i = this.d, this.s < 0 || !i || !i[0] || this.eq(1)) return new f(i && !i[0] ? -1 / 0 : 1 != this.s ? NaN : i ? 0 : 1 / 0);\n      if (e) if (i.length > 1) s = !0;else {\n        for (r = i[0]; r % 10 == 0;) r /= 10;\n\n        s = 1 !== r;\n      }\n      if (h = !1, o = B(this, u = a + 5), t = e ? U(f, u + 10) : B(n, u), A((c = Z(o, t, u, 1)).d, r = a, d)) do {\n        if (o = B(this, u += 10), t = e ? U(f, u + 10) : B(n, u), c = Z(o, t, u, 1), !s) {\n          +O(c.d).slice(r + 1, r + 15) + 1 == 1e14 && (c = P(c, a + 1, 0));\n          break;\n        }\n      } while (A(c.d, r += 10, d));\n      return h = !0, P(c, a, d);\n    }, q.minus = q.sub = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = this,\n          w = p.constructor;\n      if (n = new w(n), !p.d || !n.d) return p.s && n.s ? p.d ? n.s = -n.s : n = new w(n.d || p.s !== n.s ? p : NaN) : n = new w(NaN), n;\n      if (p.s != n.s) return n.s = -n.s, p.plus(n);\n\n      if (f = p.d, l = n.d, u = w.precision, c = w.rounding, !f[0] || !l[0]) {\n        if (l[0]) n.s = -n.s;else {\n          if (!f[0]) return new w(3 === c ? -0 : 0);\n          n = new w(p);\n        }\n        return h ? P(n, u, c) : n;\n      }\n\n      if (i = g(n.e / x), a = g(p.e / x), f = f.slice(), s = a - i) {\n        for ((d = s < 0) ? (e = f, s = -s, o = l.length) : (e = l, i = a, o = f.length), s > (t = Math.max(Math.ceil(u / x), o) + 2) && (s = t, e.length = 1), e.reverse(), t = s; t--;) e.push(0);\n\n        e.reverse();\n      } else {\n        for ((d = (t = f.length) < (o = l.length)) && (o = t), t = 0; t < o; t++) if (f[t] != l[t]) {\n          d = f[t] < l[t];\n          break;\n        }\n\n        s = 0;\n      }\n\n      for (d && (e = f, f = l, l = e, n.s = -n.s), o = f.length, t = l.length - o; t > 0; --t) f[o++] = 0;\n\n      for (t = l.length; t > s;) {\n        if (f[--t] < l[t]) {\n          for (r = t; r && 0 === f[--r];) f[r] = E - 1;\n\n          --f[r], f[t] += E;\n        }\n\n        f[t] -= l[t];\n      }\n\n      for (; 0 === f[--o];) f.pop();\n\n      for (; 0 === f[0]; f.shift()) --i;\n\n      return f[0] ? (n.d = f, n.e = L(f, i), h ? P(n, u, c) : n) : new w(3 === c ? -0 : 0);\n    }, q.modulo = q.mod = function (n) {\n      var e,\n          i = this,\n          t = i.constructor;\n      return n = new t(n), !i.d || !n.s || n.d && !n.d[0] ? new t(NaN) : !n.d || i.d && !i.d[0] ? P(new t(i), t.precision, t.rounding) : (h = !1, 9 == t.modulo ? (e = Z(i, n.abs(), 0, 3, 1)).s *= n.s : e = Z(i, n, 0, t.modulo, 1), e = e.times(n), h = !0, i.minus(e));\n    }, q.naturalExponential = q.exp = function () {\n      return H(this);\n    }, q.naturalLogarithm = q.ln = function () {\n      return B(this);\n    }, q.negated = q.neg = function () {\n      var n = new this.constructor(this);\n      return n.s = -n.s, P(n);\n    }, q.plus = q.add = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d = this,\n          l = d.constructor;\n      if (n = new l(n), !d.d || !n.d) return d.s && n.s ? d.d || (n = new l(n.d || d.s === n.s ? d : NaN)) : n = new l(NaN), n;\n      if (d.s != n.s) return n.s = -n.s, d.minus(n);\n      if (f = d.d, a = n.d, u = l.precision, c = l.rounding, !f[0] || !a[0]) return a[0] || (n = new l(d)), h ? P(n, u, c) : n;\n\n      if (s = g(d.e / x), t = g(n.e / x), f = f.slice(), r = s - t) {\n        for (r < 0 ? (i = f, r = -r, o = a.length) : (i = a, t = s, o = f.length), r > (o = (s = Math.ceil(u / x)) > o ? s + 1 : o + 1) && (r = o, i.length = 1), i.reverse(); r--;) i.push(0);\n\n        i.reverse();\n      }\n\n      for ((o = f.length) - (r = a.length) < 0 && (r = o, i = a, a = f, f = i), e = 0; r;) e = (f[--r] = f[r] + a[r] + e) / E | 0, f[r] %= E;\n\n      for (e && (f.unshift(e), ++t), o = f.length; 0 == f[--o];) f.pop();\n\n      return n.d = f, n.e = L(f, t), h ? P(n, u, c) : n;\n    }, q.precision = q.sd = function (n) {\n      var e,\n          i = this;\n      if (void 0 !== n && n !== !!n && 1 !== n && 0 !== n) throw Error(d + n);\n      return i.d ? (e = k(i.d), n && i.e + 1 > e && (e = i.e + 1)) : e = NaN, e;\n    }, q.round = function () {\n      var n = this,\n          e = n.constructor;\n      return P(new e(n), n.e + 1, e.rounding);\n    }, q.sine = q.sin = function () {\n      var n,\n          e,\n          i = this,\n          r = i.constructor;\n      return i.isFinite() ? i.isZero() ? new r(i) : (n = r.precision, e = r.rounding, r.precision = n + Math.max(i.e, i.sd()) + x, r.rounding = 1, i = function (n, e) {\n        var i,\n            t = e.d.length;\n        if (t < 3) return W(n, 2, e, e);\n        i = (i = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | i, e = e.times(Math.pow(5, -i)), e = W(n, 2, e, e);\n\n        for (var r, s = new n(5), o = new n(16), u = new n(20); i--;) r = e.times(e), e = e.times(s.plus(r.times(o.times(r).minus(u))));\n\n        return e;\n      }(r, J(r, i)), r.precision = n, r.rounding = e, P(t > 2 ? i.neg() : i, n, e, !0)) : new r(NaN);\n    }, q.squareRoot = q.sqrt = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o = this,\n          u = o.d,\n          c = o.e,\n          f = o.s,\n          a = o.constructor;\n      if (1 !== f || !u || !u[0]) return new a(!f || f < 0 && (!u || u[0]) ? NaN : u ? o : 1 / 0);\n\n      for (h = !1, 0 == (f = Math.sqrt(+o)) || f == 1 / 0 ? (((e = O(u)).length + c) % 2 == 0 && (e += \"0\"), f = Math.sqrt(e), c = g((c + 1) / 2) - (c < 0 || c % 2), t = new a(e = f == 1 / 0 ? \"1e\" + c : (e = f.toExponential()).slice(0, e.indexOf(\"e\") + 1) + c)) : t = new a(f.toString()), i = (c = a.precision) + 3;;) if (t = (s = t).plus(Z(o, s, i + 2, 1)).times(.5), O(s.d).slice(0, i) === (e = O(t.d)).slice(0, i)) {\n        if (\"9999\" != (e = e.slice(i - 3, i + 1)) && (r || \"4999\" != e)) {\n          +e && (+e.slice(1) || \"5\" != e.charAt(0)) || (P(t, c + 1, 1), n = !t.times(t).eq(o));\n          break;\n        }\n\n        if (!r && (P(s, c + 1, 0), s.times(s).eq(o))) {\n          t = s;\n          break;\n        }\n\n        i += 4, r = 1;\n      }\n\n      return h = !0, P(t, c, a.rounding, n);\n    }, q.tangent = q.tan = function () {\n      var n,\n          e,\n          i = this,\n          r = i.constructor;\n      return i.isFinite() ? i.isZero() ? new r(i) : (n = r.precision, e = r.rounding, r.precision = n + 10, r.rounding = 1, (i = i.sin()).s = 1, i = Z(i, new r(1).minus(i.times(i)).sqrt(), n + 10, 0), r.precision = n, r.rounding = e, P(2 == t || 4 == t ? i.neg() : i, n, e, !0)) : new r(NaN);\n    }, q.times = q.mul = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a = this,\n          d = a.constructor,\n          l = a.d,\n          p = (n = new d(n)).d;\n      if (n.s *= a.s, !(l && l[0] && p && p[0])) return new d(!n.s || l && !l[0] && !p || p && !p[0] && !l ? NaN : l && p ? 0 * n.s : n.s / 0);\n\n      for (i = g(a.e / x) + g(n.e / x), (c = l.length) < (f = p.length) && (s = l, l = p, p = s, o = c, c = f, f = o), s = [], t = o = c + f; t--;) s.push(0);\n\n      for (t = f; --t >= 0;) {\n        for (e = 0, r = c + t; r > t;) u = s[r] + p[t] * l[r - t - 1] + e, s[r--] = u % E | 0, e = u / E | 0;\n\n        s[r] = (s[r] + e) % E | 0;\n      }\n\n      for (; !s[--o];) s.pop();\n\n      return e ? ++i : s.shift(), n.d = s, n.e = L(s, i), h ? P(n, d.precision, d.rounding) : n;\n    }, q.toBinary = function (n, e) {\n      return z(this, 2, n, e);\n    }, q.toDecimalPlaces = q.toDP = function (n, e) {\n      var i = this,\n          t = i.constructor;\n      return i = new t(i), void 0 === n ? i : (F(n, 0, s), void 0 === e ? e = t.rounding : F(e, 0, 8), P(i, n + i.e + 1, e));\n    }, q.toExponential = function (n, e) {\n      var i,\n          t = this,\n          r = t.constructor;\n      return void 0 === n ? i = R(t, !0) : (F(n, 0, s), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n + 1, e), !0, n + 1)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, q.toFixed = function (n, e) {\n      var i,\n          t,\n          r = this,\n          o = r.constructor;\n      return void 0 === n ? i = R(r) : (F(n, 0, s), void 0 === e ? e = o.rounding : F(e, 0, 8), i = R(t = P(new o(r), n + r.e + 1, e), !1, n + t.e + 1)), r.isNeg() && !r.isZero() ? \"-\" + i : i;\n    }, q.toFraction = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          l,\n          p,\n          g = this,\n          m = g.d,\n          v = g.constructor;\n      if (!m) return new v(g);\n      if (f = i = new v(1), t = c = new v(0), o = (s = (e = new v(t)).e = k(m) - g.e - 1) % x, e.d[0] = w(10, o < 0 ? x + o : o), null == n) n = s > 0 ? e : f;else {\n        if (!(u = new v(n)).isInt() || u.lt(f)) throw Error(d + u);\n        n = u.gt(e) ? s > 0 ? e : f : u;\n      }\n\n      for (h = !1, u = new v(O(m)), a = v.precision, v.precision = s = m.length * x * 2; l = Z(u, e, 0, 1, 1), 1 != (r = i.plus(l.times(t))).cmp(n);) i = t, t = r, r = f, f = c.plus(l.times(r)), c = r, r = e, e = u.minus(l.times(r)), u = r;\n\n      return r = Z(n.minus(i), t, 0, 1, 1), c = c.plus(r.times(f)), i = i.plus(r.times(t)), c.s = f.s = g.s, p = Z(f, t, s, 1).minus(g).abs().cmp(Z(c, i, s, 1).minus(g).abs()) < 1 ? [f, t] : [c, i], v.precision = a, h = !0, p;\n    }, q.toHexadecimal = q.toHex = function (n, e) {\n      return z(this, 16, n, e);\n    }, q.toNearest = function (n, e) {\n      var i = this,\n          t = i.constructor;\n\n      if (i = new t(i), null == n) {\n        if (!i.d) return i;\n        n = new t(1), e = t.rounding;\n      } else {\n        if (n = new t(n), void 0 === e ? e = t.rounding : F(e, 0, 8), !i.d) return n.s ? i : n;\n        if (!n.d) return n.s && (n.s = i.s), n;\n      }\n\n      return n.d[0] ? (h = !1, i = Z(i, n, 0, e, 1).times(n), h = !0, P(i)) : (n.s = i.s, i = n), i;\n    }, q.toNumber = function () {\n      return +this;\n    }, q.toOctal = function (n, e) {\n      return z(this, 8, n, e);\n    }, q.toPower = q.pow = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u = this,\n          c = u.constructor,\n          f = +(n = new c(n));\n      if (!(u.d && n.d && u.d[0] && n.d[0])) return new c(w(+u, f));\n      if ((u = new c(u)).eq(1)) return u;\n      if (t = c.precision, s = c.rounding, n.eq(1)) return P(u, t, s);\n      if ((e = g(n.e / x)) >= n.d.length - 1 && (i = f < 0 ? -f : f) <= 9007199254740991) return r = T(c, u, i, t), n.s < 0 ? new c(1).div(r) : P(r, t, s);\n\n      if ((o = u.s) < 0) {\n        if (e < n.d.length - 1) return new c(NaN);\n        if (0 == (1 & n.d[e]) && (o = 1), 0 == u.e && 1 == u.d[0] && 1 == u.d.length) return u.s = o, u;\n      }\n\n      return (e = 0 != (i = w(+u, f)) && isFinite(i) ? new c(i + \"\").e : g(f * (Math.log(\"0.\" + O(u.d)) / Math.LN10 + u.e + 1))) > c.maxE + 1 || e < c.minE - 1 ? new c(e > 0 ? o / 0 : 0) : (h = !1, c.rounding = u.s = 1, i = Math.min(12, (e + \"\").length), (r = H(n.times(B(u, t + i)), t)).d && A((r = P(r, t + 5, 1)).d, t, s) && (e = t + 10, +O((r = P(H(n.times(B(u, e + i)), e), e + 5, 1)).d).slice(t + 1, t + 15) + 1 == 1e14 && (r = P(r, t + 1, 0))), r.s = o, h = !0, c.rounding = s, P(r, t, s));\n    }, q.toPrecision = function (n, e) {\n      var i,\n          t = this,\n          r = t.constructor;\n      return void 0 === n ? i = R(t, t.e <= r.toExpNeg || t.e >= r.toExpPos) : (F(n, 1, s), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n, e), n <= t.e || t.e <= r.toExpNeg, n)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, q.toSignificantDigits = q.toSD = function (n, e) {\n      var i = this.constructor;\n      return void 0 === n ? (n = i.precision, e = i.rounding) : (F(n, 1, s), void 0 === e ? e = i.rounding : F(e, 0, 8)), P(new i(this), n, e);\n    }, q.toString = function () {\n      var n = this,\n          e = n.constructor,\n          i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() && !n.isZero() ? \"-\" + i : i;\n    }, q.truncated = q.trunc = function () {\n      return P(new this.constructor(this), this.e + 1, 1);\n    }, q.valueOf = q.toJSON = function () {\n      var n = this,\n          e = n.constructor,\n          i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() ? \"-\" + i : i;\n    };\n\n    var Z = function () {\n      function n(n, e, i) {\n        var t,\n            r = 0,\n            s = n.length;\n\n        for (n = n.slice(); s--;) t = n[s] * e + r, n[s] = t % i | 0, r = t / i | 0;\n\n        return r && n.unshift(r), n;\n      }\n\n      function e(n, e, i, t) {\n        var r, s;\n        if (i != t) s = i > t ? 1 : -1;else for (r = s = 0; r < i; r++) if (n[r] != e[r]) {\n          s = n[r] > e[r] ? 1 : -1;\n          break;\n        }\n        return s;\n      }\n\n      function t(n, e, i, t) {\n        for (var r = 0; i--;) n[i] -= r, r = n[i] < e[i] ? 1 : 0, n[i] = r * t + n[i] - e[i];\n\n        for (; !n[0] && n.length > 1;) n.shift();\n      }\n\n      return function (r, s, o, u, c, f) {\n        var h,\n            a,\n            d,\n            l,\n            p,\n            w,\n            m,\n            v,\n            N,\n            b,\n            M,\n            y,\n            q,\n            O,\n            F,\n            A,\n            D,\n            Z,\n            R,\n            L,\n            U = r.constructor,\n            _ = r.s == s.s ? 1 : -1,\n            k = r.d,\n            S = s.d;\n\n        if (!(k && k[0] && S && S[0])) return new U(r.s && s.s && (k ? !S || k[0] != S[0] : S) ? k && 0 == k[0] || !S ? 0 * _ : _ / 0 : NaN);\n\n        for (f ? (p = 1, a = r.e - s.e) : (f = E, p = x, a = g(r.e / p) - g(s.e / p)), R = S.length, D = k.length, b = (N = new U(_)).d = [], d = 0; S[d] == (k[d] || 0); d++);\n\n        if (S[d] > (k[d] || 0) && a--, null == o ? (O = o = U.precision, u = U.rounding) : O = c ? o + (r.e - s.e) + 1 : o, O < 0) b.push(1), w = !0;else {\n          if (O = O / p + 2 | 0, d = 0, 1 == R) {\n            for (l = 0, S = S[0], O++; (d < D || l) && O--; d++) F = l * f + (k[d] || 0), b[d] = F / S | 0, l = F % S | 0;\n\n            w = l || d < D;\n          } else {\n            for ((l = f / (S[0] + 1) | 0) > 1 && (S = n(S, l, f), k = n(k, l, f), R = S.length, D = k.length), A = R, y = (M = k.slice(0, R)).length; y < R;) M[y++] = 0;\n\n            (L = S.slice()).unshift(0), Z = S[0], S[1] >= f / 2 && ++Z;\n\n            do {\n              l = 0, (h = e(S, M, R, y)) < 0 ? (q = M[0], R != y && (q = q * f + (M[1] || 0)), (l = q / Z | 0) > 1 ? (l >= f && (l = f - 1), 1 == (h = e(m = n(S, l, f), M, v = m.length, y = M.length)) && (l--, t(m, R < v ? L : S, v, f))) : (0 == l && (h = l = 1), m = S.slice()), (v = m.length) < y && m.unshift(0), t(M, m, y, f), -1 == h && (h = e(S, M, R, y = M.length)) < 1 && (l++, t(M, R < y ? L : S, y, f)), y = M.length) : 0 === h && (l++, M = [0]), b[d++] = l, h && M[0] ? M[y++] = k[A] || 0 : (M = [k[A]], y = 1);\n            } while ((A++ < D || void 0 !== M[0]) && O--);\n\n            w = void 0 !== M[0];\n          }\n\n          b[0] || b.shift();\n        }\n        if (1 == p) N.e = a, i = w;else {\n          for (d = 1, l = b[0]; l >= 10; l /= 10) d++;\n\n          N.e = d + a * p - 1, P(N, c ? o + N.e + 1 : o, u, w);\n        }\n        return N;\n      };\n    }();\n\n    function P(n, e, i, t) {\n      var r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = n.constructor;\n\n      n: if (null != e) {\n        if (!(d = n.d)) return n;\n\n        for (r = 1, u = d[0]; u >= 10; u /= 10) r++;\n\n        if ((s = e - r) < 0) s += x, o = e, c = (a = d[l = 0]) / w(10, r - o - 1) % 10 | 0;else if ((l = Math.ceil((s + 1) / x)) >= (u = d.length)) {\n          if (!t) break n;\n\n          for (; u++ <= l;) d.push(0);\n\n          a = c = 0, r = 1, o = (s %= x) - x + 1;\n        } else {\n          for (a = u = d[l], r = 1; u >= 10; u /= 10) r++;\n\n          c = (o = (s %= x) - x + r) < 0 ? 0 : a / w(10, r - o - 1) % 10 | 0;\n        }\n        if (t = t || e < 0 || void 0 !== d[l + 1] || (o < 0 ? a : a % w(10, r - o - 1)), f = i < 4 ? (c || t) && (0 == i || i == (n.s < 0 ? 3 : 2)) : c > 5 || 5 == c && (4 == i || t || 6 == i && (s > 0 ? o > 0 ? a / w(10, r - o) : 0 : d[l - 1]) % 10 & 1 || i == (n.s < 0 ? 8 : 7)), e < 1 || !d[0]) return d.length = 0, f ? (e -= n.e + 1, d[0] = w(10, (x - e % x) % x), n.e = -e || 0) : d[0] = n.e = 0, n;\n        if (0 == s ? (d.length = l, u = 1, l--) : (d.length = l + 1, u = w(10, x - s), d[l] = o > 0 ? (a / w(10, r - o) % w(10, o) | 0) * u : 0), f) for (;;) {\n          if (0 == l) {\n            for (s = 1, o = d[0]; o >= 10; o /= 10) s++;\n\n            for (o = d[0] += u, u = 1; o >= 10; o /= 10) u++;\n\n            s != u && (n.e++, d[0] == E && (d[0] = 1));\n            break;\n          }\n\n          if (d[l] += u, d[l] != E) break;\n          d[l--] = 0, u = 1;\n        }\n\n        for (s = d.length; 0 === d[--s];) d.pop();\n      }\n\n      return h && (n.e > p.maxE ? (n.d = null, n.e = NaN) : n.e < p.minE && (n.e = 0, n.d = [0])), n;\n    }\n\n    function R(n, e, i) {\n      if (!n.isFinite()) return V(n);\n      var t,\n          r = n.e,\n          s = O(n.d),\n          o = s.length;\n      return e ? (i && (t = i - o) > 0 ? s = s.charAt(0) + \".\" + s.slice(1) + S(t) : o > 1 && (s = s.charAt(0) + \".\" + s.slice(1)), s = s + (n.e < 0 ? \"e\" : \"e+\") + n.e) : r < 0 ? (s = \"0.\" + S(-r - 1) + s, i && (t = i - o) > 0 && (s += S(t))) : r >= o ? (s += S(r + 1 - o), i && (t = i - r - 1) > 0 && (s = s + \".\" + S(t))) : ((t = r + 1) < o && (s = s.slice(0, t) + \".\" + s.slice(t)), i && (t = i - o) > 0 && (r + 1 === o && (s += \".\"), s += S(t))), s;\n    }\n\n    function L(n, e) {\n      var i = n[0];\n\n      for (e *= x; i >= 10; i /= 10) e++;\n\n      return e;\n    }\n\n    function U(n, e, i) {\n      if (e > M) throw h = !0, i && (n.precision = i), Error(l);\n      return P(new n(u), e, 1, !0);\n    }\n\n    function _(n, e, i) {\n      if (e > y) throw Error(l);\n      return P(new n(c), e, i, !0);\n    }\n\n    function k(n) {\n      var e = n.length - 1,\n          i = e * x + 1;\n\n      if (e = n[e]) {\n        for (; e % 10 == 0; e /= 10) i--;\n\n        for (e = n[0]; e >= 10; e /= 10) i++;\n      }\n\n      return i;\n    }\n\n    function S(n) {\n      for (var e = \"\"; n--;) e += \"0\";\n\n      return e;\n    }\n\n    function T(n, e, i, t) {\n      var r,\n          s = new n(1),\n          o = Math.ceil(t / x + 4);\n\n      for (h = !1;;) {\n        if (i % 2 && G((s = s.times(e)).d, o) && (r = !0), 0 === (i = g(i / 2))) {\n          i = s.d.length - 1, r && 0 === s.d[i] && ++s.d[i];\n          break;\n        }\n\n        G((e = e.times(e)).d, o);\n      }\n\n      return h = !0, s;\n    }\n\n    function I(n) {\n      return 1 & n.d[n.d.length - 1];\n    }\n\n    function C(n, e, i) {\n      for (var t, r = new n(e[0]), s = 0; ++s < e.length;) {\n        if (!(t = new n(e[s])).s) {\n          r = t;\n          break;\n        }\n\n        r[i](t) && (r = t);\n      }\n\n      return r;\n    }\n\n    function H(n, e) {\n      var i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = 0,\n          a = 0,\n          d = 0,\n          l = n.constructor,\n          p = l.rounding,\n          g = l.precision;\n      if (!n.d || !n.d[0] || n.e > 17) return new l(n.d ? n.d[0] ? n.s < 0 ? 0 : 1 / 0 : 1 : n.s ? n.s < 0 ? 0 : n : NaN);\n\n      for (null == e ? (h = !1, c = g) : c = e, u = new l(.03125); n.e > -2;) n = n.times(u), d += 5;\n\n      for (c += t = Math.log(w(2, d)) / Math.LN10 * 2 + 5 | 0, i = s = o = new l(1), l.precision = c;;) {\n        if (s = P(s.times(n), c, 1), i = i.times(++a), O((u = o.plus(Z(s, i, c, 1))).d).slice(0, c) === O(o.d).slice(0, c)) {\n          for (r = d; r--;) o = P(o.times(o), c, 1);\n\n          if (null != e) return l.precision = g, o;\n          if (!(f < 3 && A(o.d, c - t, p, f))) return P(o, l.precision = g, p, h = !0);\n          l.precision = c += 10, i = s = u = new l(1), a = 0, f++;\n        }\n\n        o = u;\n      }\n    }\n\n    function B(n, e) {\n      var i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = 1,\n          g = n,\n          w = g.d,\n          m = g.constructor,\n          v = m.rounding,\n          N = m.precision;\n      if (g.s < 0 || !w || !w[0] || !g.e && 1 == w[0] && 1 == w.length) return new m(w && !w[0] ? -1 / 0 : 1 != g.s ? NaN : w ? 0 : g);\n      if (null == e ? (h = !1, a = N) : a = e, m.precision = a += 10, t = (i = O(w)).charAt(0), !(Math.abs(s = g.e) < 15e14)) return f = U(m, a + 2, N).times(s + \"\"), g = B(new m(t + \".\" + i.slice(1)), a - 10).plus(f), m.precision = N, null == e ? P(g, N, v, h = !0) : g;\n\n      for (; t < 7 && 1 != t || 1 == t && i.charAt(1) > 3;) t = (i = O((g = g.times(n)).d)).charAt(0), p++;\n\n      for (s = g.e, t > 1 ? (g = new m(\"0.\" + i), s++) : g = new m(t + \".\" + i.slice(1)), d = g, c = o = g = Z(g.minus(1), g.plus(1), a, 1), l = P(g.times(g), a, 1), r = 3;;) {\n        if (o = P(o.times(l), a, 1), O((f = c.plus(Z(o, new m(r), a, 1))).d).slice(0, a) === O(c.d).slice(0, a)) {\n          if (c = c.times(2), 0 !== s && (c = c.plus(U(m, a + 2, N).times(s + \"\"))), c = Z(c, new m(p), a, 1), null != e) return m.precision = N, c;\n          if (!A(c.d, a - 10, v, u)) return P(c, m.precision = N, v, h = !0);\n          m.precision = a += 10, f = o = g = Z(d.minus(1), d.plus(1), a, 1), l = P(g.times(g), a, 1), r = u = 1;\n        }\n\n        c = f, r += 2;\n      }\n    }\n\n    function V(n) {\n      return String(n.s * n.s / 0);\n    }\n\n    function j(n, e) {\n      var i, t, r;\n\n      for ((i = e.indexOf(\".\")) > -1 && (e = e.replace(\".\", \"\")), (t = e.search(/e/i)) > 0 ? (i < 0 && (i = t), i += +e.slice(t + 1), e = e.substring(0, t)) : i < 0 && (i = e.length), t = 0; 48 === e.charCodeAt(t); t++);\n\n      for (r = e.length; 48 === e.charCodeAt(r - 1); --r);\n\n      if (e = e.slice(t, r)) {\n        if (r -= t, n.e = i = i - t - 1, n.d = [], t = (i + 1) % x, i < 0 && (t += x), t < r) {\n          for (t && n.d.push(+e.slice(0, t)), r -= x; t < r;) n.d.push(+e.slice(t, t += x));\n\n          e = e.slice(t), t = x - e.length;\n        } else t -= r;\n\n        for (; t--;) e += \"0\";\n\n        n.d.push(+e), h && (n.e > n.constructor.maxE ? (n.d = null, n.e = NaN) : n.e < n.constructor.minE && (n.e = 0, n.d = [0]));\n      } else n.e = 0, n.d = [0];\n\n      return n;\n    }\n\n    function $(n, i) {\n      var t, r, s, o, u, c, f, a, l;\n      if (\"Infinity\" === i || \"NaN\" === i) return +i || (n.s = NaN), n.e = NaN, n.d = null, n;\n      if (v.test(i)) t = 16, i = i.toLowerCase();else if (m.test(i)) t = 2;else {\n        if (!N.test(i)) throw Error(d + i);\n        t = 8;\n      }\n\n      for ((o = i.search(/p/i)) > 0 ? (f = +i.slice(o + 1), i = i.substring(2, o)) : i = i.slice(2), u = (o = i.indexOf(\".\")) >= 0, r = n.constructor, u && (o = (c = (i = i.replace(\".\", \"\")).length) - o, s = T(r, new r(t), o, 2 * o)), o = l = (a = D(i, t, E)).length - 1; 0 === a[o]; --o) a.pop();\n\n      return o < 0 ? new r(0 * n.s) : (n.e = L(a, l), n.d = a, h = !1, u && (n = Z(n, s, 4 * c)), f && (n = n.times(Math.abs(f) < 54 ? Math.pow(2, f) : e.pow(2, f))), h = !0, n);\n    }\n\n    function W(n, e, i, t, r) {\n      var s,\n          o,\n          u,\n          c,\n          f = n.precision,\n          a = Math.ceil(f / x);\n\n      for (h = !1, c = i.times(i), u = new n(t);;) {\n        if (o = Z(u.times(c), new n(e++ * e++), f, 1), u = r ? t.plus(o) : t.minus(o), t = Z(o.times(c), new n(e++ * e++), f, 1), void 0 !== (o = u.plus(t)).d[a]) {\n          for (s = a; o.d[s] === u.d[s] && s--;);\n\n          if (-1 == s) break;\n        }\n\n        s = u, u = t, t = o, o = s, 0;\n      }\n\n      return h = !0, o.d.length = a + 1, o;\n    }\n\n    function J(n, e) {\n      var i,\n          r = e.s < 0,\n          s = _(n, n.precision, 1),\n          o = s.times(.5);\n\n      if ((e = e.abs()).lte(o)) return t = r ? 4 : 1, e;\n      if ((i = e.divToInt(s)).isZero()) t = r ? 3 : 2;else {\n        if ((e = e.minus(i.times(s))).lte(o)) return t = I(i) ? r ? 2 : 3 : r ? 4 : 1, e;\n        t = I(i) ? r ? 1 : 4 : r ? 3 : 2;\n      }\n      return e.minus(s).abs();\n    }\n\n    function z(n, e, t, r) {\n      var u,\n          c,\n          f,\n          h,\n          a,\n          d,\n          l,\n          p,\n          g,\n          w = n.constructor,\n          m = void 0 !== t;\n\n      if (m ? (F(t, 1, s), void 0 === r ? r = w.rounding : F(r, 0, 8)) : (t = w.precision, r = w.rounding), n.isFinite()) {\n        for (m ? (u = 2, 16 == e ? t = 4 * t - 3 : 8 == e && (t = 3 * t - 2)) : u = e, (f = (l = R(n)).indexOf(\".\")) >= 0 && (l = l.replace(\".\", \"\"), (g = new w(1)).e = l.length - f, g.d = D(R(g), 10, u), g.e = g.d.length), c = a = (p = D(l, 10, u)).length; 0 == p[--a];) p.pop();\n\n        if (p[0]) {\n          if (f < 0 ? c-- : ((n = new w(n)).d = p, n.e = c, p = (n = Z(n, g, t, r, 0, u)).d, c = n.e, d = i), f = p[t], h = u / 2, d = d || void 0 !== p[t + 1], d = r < 4 ? (void 0 !== f || d) && (0 === r || r === (n.s < 0 ? 3 : 2)) : f > h || f === h && (4 === r || d || 6 === r && 1 & p[t - 1] || r === (n.s < 0 ? 8 : 7)), p.length = t, d) for (; ++p[--t] > u - 1;) p[t] = 0, t || (++c, p.unshift(1));\n\n          for (a = p.length; !p[a - 1]; --a);\n\n          for (f = 0, l = \"\"; f < a; f++) l += o.charAt(p[f]);\n\n          if (m) {\n            if (a > 1) if (16 == e || 8 == e) {\n              for (f = 16 == e ? 4 : 3, --a; a % f; a++) l += \"0\";\n\n              for (a = (p = D(l, u, e)).length; !p[a - 1]; --a);\n\n              for (f = 1, l = \"1.\"; f < a; f++) l += o.charAt(p[f]);\n            } else l = l.charAt(0) + \".\" + l.slice(1);\n            l = l + (c < 0 ? \"p\" : \"p+\") + c;\n          } else if (c < 0) {\n            for (; ++c;) l = \"0\" + l;\n\n            l = \"0.\" + l;\n          } else if (++c > a) for (c -= a; c--;) l += \"0\";else c < a && (l = l.slice(0, c) + \".\" + l.slice(c));\n        } else l = m ? \"0p+0\" : \"0\";\n\n        l = (16 == e ? \"0x\" : 2 == e ? \"0b\" : 8 == e ? \"0o\" : \"\") + l;\n      } else l = V(n);\n\n      return n.s < 0 ? \"-\" + l : l;\n    }\n\n    function G(n, e) {\n      if (n.length > e) return n.length = e, !0;\n    }\n\n    function K(n) {\n      return new this(n).abs();\n    }\n\n    function Q(n) {\n      return new this(n).acos();\n    }\n\n    function X(n) {\n      return new this(n).acosh();\n    }\n\n    function Y(n, e) {\n      return new this(n).plus(e);\n    }\n\n    function nn(n) {\n      return new this(n).asin();\n    }\n\n    function en(n) {\n      return new this(n).asinh();\n    }\n\n    function tn(n) {\n      return new this(n).atan();\n    }\n\n    function rn(n) {\n      return new this(n).atanh();\n    }\n\n    function sn(n, e) {\n      n = new this(n), e = new this(e);\n      var i,\n          t = this.precision,\n          r = this.rounding,\n          s = t + 4;\n      return n.s && e.s ? n.d || e.d ? !e.d || n.isZero() ? (i = e.s < 0 ? _(this, t, r) : new this(0)).s = n.s : !n.d || e.isZero() ? (i = _(this, s, 1).times(.5)).s = n.s : e.s < 0 ? (this.precision = s, this.rounding = 1, i = this.atan(Z(n, e, s, 1)), e = _(this, s, 1), this.precision = t, this.rounding = r, i = n.s < 0 ? i.minus(e) : i.plus(e)) : i = this.atan(Z(n, e, s, 1)) : (i = _(this, s, 1).times(e.s > 0 ? .25 : .75)).s = n.s : i = new this(NaN), i;\n    }\n\n    function on(n) {\n      return new this(n).cbrt();\n    }\n\n    function un(n) {\n      return P(n = new this(n), n.e + 1, 2);\n    }\n\n    function cn(n) {\n      if (!n || \"object\" != typeof n) throw Error(a + \"Object expected\");\n      var e,\n          i,\n          t,\n          o = !0 === n.defaults,\n          u = [\"precision\", 1, s, \"rounding\", 0, 8, \"toExpNeg\", -r, 0, \"toExpPos\", 0, r, \"maxE\", 0, r, \"minE\", -r, 0, \"modulo\", 0, 9];\n\n      for (e = 0; e < u.length; e += 3) if (i = u[e], o && (this[i] = f[i]), void 0 !== (t = n[i])) {\n        if (!(g(t) === t && t >= u[e + 1] && t <= u[e + 2])) throw Error(d + i + \": \" + t);\n        this[i] = t;\n      }\n\n      if (i = \"crypto\", o && (this[i] = f[i]), void 0 !== (t = n[i])) {\n        if (!0 !== t && !1 !== t && 0 !== t && 1 !== t) throw Error(d + i + \": \" + t);\n\n        if (t) {\n          if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw Error(p);\n          this[i] = !0;\n        } else this[i] = !1;\n      }\n\n      return this;\n    }\n\n    function fn(n) {\n      return new this(n).cos();\n    }\n\n    function hn(n) {\n      return new this(n).cosh();\n    }\n\n    function an(n, e) {\n      return new this(n).div(e);\n    }\n\n    function dn(n) {\n      return new this(n).exp();\n    }\n\n    function ln(n) {\n      return P(n = new this(n), n.e + 1, 3);\n    }\n\n    function pn() {\n      var n,\n          e,\n          i = new this(0);\n\n      for (h = !1, n = 0; n < arguments.length;) if ((e = new this(arguments[n++])).d) i.d && (i = i.plus(e.times(e)));else {\n        if (e.s) return h = !0, new this(1 / 0);\n        i = e;\n      }\n\n      return h = !0, i.sqrt();\n    }\n\n    function gn(n) {\n      return n instanceof e || n && \"[object Decimal]\" === n.name || !1;\n    }\n\n    function wn(n) {\n      return new this(n).ln();\n    }\n\n    function mn(n, e) {\n      return new this(n).log(e);\n    }\n\n    function vn(n) {\n      return new this(n).log(2);\n    }\n\n    function Nn(n) {\n      return new this(n).log(10);\n    }\n\n    function bn() {\n      return C(this, arguments, \"lt\");\n    }\n\n    function En() {\n      return C(this, arguments, \"gt\");\n    }\n\n    function xn(n, e) {\n      return new this(n).mod(e);\n    }\n\n    function Mn(n, e) {\n      return new this(n).mul(e);\n    }\n\n    function yn(n, e) {\n      return new this(n).pow(e);\n    }\n\n    function qn(n) {\n      var e,\n          i,\n          t,\n          r,\n          o = 0,\n          u = new this(1),\n          c = [];\n      if (void 0 === n ? n = this.precision : F(n, 1, s), t = Math.ceil(n / x), this.crypto) {\n        if (crypto.getRandomValues) for (e = crypto.getRandomValues(new Uint32Array(t)); o < t;) (r = e[o]) >= 429e7 ? e[o] = crypto.getRandomValues(new Uint32Array(1))[0] : c[o++] = r % 1e7;else {\n          if (!crypto.randomBytes) throw Error(p);\n\n          for (e = crypto.randomBytes(t *= 4); o < t;) (r = e[o] + (e[o + 1] << 8) + (e[o + 2] << 16) + ((127 & e[o + 3]) << 24)) >= 214e7 ? crypto.randomBytes(4).copy(e, o) : (c.push(r % 1e7), o += 4);\n\n          o = t / 4;\n        }\n      } else for (; o < t;) c[o++] = 1e7 * Math.random() | 0;\n\n      for (t = c[--o], n %= x, t && n && (r = w(10, x - n), c[o] = (t / r | 0) * r); 0 === c[o]; o--) c.pop();\n\n      if (o < 0) i = 0, c = [0];else {\n        for (i = -1; 0 === c[0]; i -= x) c.shift();\n\n        for (t = 1, r = c[0]; r >= 10; r /= 10) t++;\n\n        t < x && (i -= x - t);\n      }\n      return u.e = i, u.d = c, u;\n    }\n\n    function On(n) {\n      return P(n = new this(n), n.e + 1, this.rounding);\n    }\n\n    function Fn(n) {\n      return (n = new this(n)).d ? n.d[0] ? n.s : 0 * n.s : n.s || NaN;\n    }\n\n    function An(n) {\n      return new this(n).sin();\n    }\n\n    function Dn(n) {\n      return new this(n).sinh();\n    }\n\n    function Zn(n) {\n      return new this(n).sqrt();\n    }\n\n    function Pn(n, e) {\n      return new this(n).sub(e);\n    }\n\n    function Rn(n) {\n      return new this(n).tan();\n    }\n\n    function Ln(n) {\n      return new this(n).tanh();\n    }\n\n    function Un(n) {\n      return P(n = new this(n), n.e + 1, 1);\n    }\n\n    return (e = function n(e) {\n      var i, t, r;\n\n      function s(n) {\n        var e,\n            i,\n            t,\n            r = this;\n        if (!(r instanceof s)) return new s(n);\n        if (r.constructor = s, n instanceof s) return r.s = n.s, void (h ? !n.d || n.e > s.maxE ? (r.e = NaN, r.d = null) : n.e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = n.e, r.d = n.d.slice()) : (r.e = n.e, r.d = n.d ? n.d.slice() : n.d));\n\n        if (\"number\" == (t = typeof n)) {\n          if (0 === n) return r.s = 1 / n < 0 ? -1 : 1, r.e = 0, void (r.d = [0]);\n\n          if (n < 0 ? (n = -n, r.s = -1) : r.s = 1, n === ~~n && n < 1e7) {\n            for (e = 0, i = n; i >= 10; i /= 10) e++;\n\n            return void (h ? e > s.maxE ? (r.e = NaN, r.d = null) : e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = e, r.d = [n]) : (r.e = e, r.d = [n]));\n          }\n\n          return 0 * n != 0 ? (n || (r.s = NaN), r.e = NaN, void (r.d = null)) : j(r, n.toString());\n        }\n\n        if (\"string\" !== t) throw Error(d + n);\n        return 45 === n.charCodeAt(0) ? (n = n.slice(1), r.s = -1) : r.s = 1, b.test(n) ? j(r, n) : $(r, n);\n      }\n\n      if (s.prototype = q, s.ROUND_UP = 0, s.ROUND_DOWN = 1, s.ROUND_CEIL = 2, s.ROUND_FLOOR = 3, s.ROUND_HALF_UP = 4, s.ROUND_HALF_DOWN = 5, s.ROUND_HALF_EVEN = 6, s.ROUND_HALF_CEIL = 7, s.ROUND_HALF_FLOOR = 8, s.EUCLID = 9, s.config = s.set = cn, s.clone = n, s.isDecimal = gn, s.abs = K, s.acos = Q, s.acosh = X, s.add = Y, s.asin = nn, s.asinh = en, s.atan = tn, s.atanh = rn, s.atan2 = sn, s.cbrt = on, s.ceil = un, s.cos = fn, s.cosh = hn, s.div = an, s.exp = dn, s.floor = ln, s.hypot = pn, s.ln = wn, s.log = mn, s.log10 = Nn, s.log2 = vn, s.max = bn, s.min = En, s.mod = xn, s.mul = Mn, s.pow = yn, s.random = qn, s.round = On, s.sign = Fn, s.sin = An, s.sinh = Dn, s.sqrt = Zn, s.sub = Pn, s.tan = Rn, s.tanh = Ln, s.trunc = Un, void 0 === e && (e = {}), e && !0 !== e.defaults) for (r = [\"precision\", \"rounding\", \"toExpNeg\", \"toExpPos\", \"maxE\", \"minE\", \"modulo\", \"crypto\"], i = 0; i < r.length;) e.hasOwnProperty(t = r[i++]) || (e[t] = this[t]);\n      return s.config(e), s;\n    }(f)).default = e.Decimal = e, u = new e(u), c = new e(c), e;\n  }() //    bigDec: require('decimal.js')\n\n});\n\nif (typeof module !== 'undefined') {\n  module.exports = nerdamer;\n}\n\n;","map":{"version":3,"sources":["/Users/nadol/Desktop/reactjs/my-app/node_modules/nerdamer/nerdamer.core.js"],"names":["nerdamer","imports","version","_","Parser","bigInt","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","roots","x","y","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","regex","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","zero","parts","String","toLowerCase","split","e","pop","coeff_array","slice","Array","join","dec","isPrime","n","q","floor","sqrt","isNumber","allNumeric","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","symbols","firstObject","args","sort","arraySum","sum","map","separate","symbol","o","expand","insert","key","sym","clone","each","isConstant","fname","fillHoles","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","isVariableSymbol","isArray","isInt","toString","isNegative","lessThan","stringify","inBrackets","str","stringReplace","from","to","with_str","substr","customType","custom","sameSign","a","b","format","call","arguments","shift","new_str","replace","match","index","arg","range","start","end","step","keys","both","compare","sym1","sym2","scope","comparison","random","block","parse","setFunction","params_array","body","functions","mapped_function","params","arrayMax","max","apply","arrayMin","min","arrayClone","new_array","arrayAddSlices","slices","retval","delta","nroots","unwrapPARENS","toLinear","_roots","toPolarFormArray","evaluate","r","den","p","formula","t","fromArray","root","negate","multiply","imaginary","comboSort","combined","na","nb","decompose_fn","fn","wrt","as_obj","ax","stripVar","subtract","divide","nround","s","Number","MAX_VALUE","round","getU","u","v","clearU","indx","hasOwnProperty","even","evenFraction","arrayUnique","item","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","setting","f","opt","current_setting","importFunctions","arguments2Array","getCoeffs","coeffs","term","contains","coeff","convertToVector","vector","elements","generatePrimes","upto","last_prime","allNumbers","allConstants","isPi","isE","DivisionByZero","ParseError","UndefinedError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","exceptions","Big","cos","sin","Math2","csc","sec","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","derivative","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","absn","ni","done","epsilon","w","d","EPSILON","idx","bigpow","Frac","isInteger","nthroot","gamma","z","g","C","bigfactorial","times","bigLog","quick","k","invert","factorial","is_int","NaN","dfactorial","GCD","QGCD","gcd","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","lcprime","prime","lt","rho","xf","cz","mod","minus","sm","boxfactor","safety","fib","integer_part","simpson","get_value","side","dx","xi","num_integrate","tol","maxdepth","adsimp","fa","fm","fb","V0","depth","state","nanEncountered","f1","f2","sl","sr","s2","m","V1","V2","maxDepthCount","integrate","Ci","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","xk","dk","dk0","d0","powb","dk_dec","gte","xn","ld","same_delta","decimal","sech","csch","sinh","coth","tanh","asinh","acosh","atanh","log10","LOG10E","trunc","ceil","text","option","useGroup","asHash","wrapCondition","valueOf","frac","exec","negative","quotient","digits","passed","prefix","cycle","numer","denom","divmod","remainder","operator","om","collectSymbols","pg","pwg","isComposite","charAt","cv","parens","primeFactors","getExpression","expression_number","asType","expression","text_","txt","latex","LaTeX","first_arg","subs","buildFunction","Build","build","isInfinity","prec","isPolynomial","isPoly","sub","for_symbol","operation","otype","callback","eq","gt","greaterThan","lte","numerator","getNum","denominator","getDenom","hasFunction","containsFunction","variable","toTeX","Scientific","startsWith","isScientific","fromScientific","convert","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","copy","rounded","substring","next_two","ed","simple","Fraction","is_neg","isFrac","nstr","m_dc","simplify","isOne","neg","n1","narr","unshift","qcompare","absEquals","isnegative","lcm","USE_BIG","div","infinity","shell","unwrapSQRT","all","isLinear","hyp","re","im","theta","realpart","imagpart","trig","isSimple","powSimp","powers","mfactors","out_","in_","xt","symfunction","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","isImaginary","names","multiplyPower","p2","p1","setPower","retainSign","isSymbolic","isInverse","properties","isConversion","isUnit","toUnitMultiplier","keepSign","deep","distributeMultiplier","power_only","is_one","distributeExponent","cp","isImgSymbol","keyForGroup","action","existing","hash","attach","combine","contents","is_parens","fn_name","sort_fn","expand_symbol","collected","concat","isCombination","bin","preprocessors","actions","Slice","upper","lower","Collection","append","getItems","pretty_print","collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","removeDen","sq","asech","acsch","acoth","atan2","getQuadrant","trigh","units","postfix","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","radians","degrees","continued_fraction","scientific","pfactor","matrix","imatrix","determinant","size","transpose","dot","cross","vecget","vecset","vectrim","matget","matset","matgetrow","matsetrow","matgetcol","matsetcol","IF","is_in","conjugate","polarform","rectform","union","intersection","difference","intersects","is_subset","print","findFunction","fmodules","fmodule","override","which","with_what","restore","what","extend","force_call","extended","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","bigConvert","operator_filter_regex","ostr","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","prepare_expression","group1","group2","first","before","e_org","g1","g2","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","callPeekers","tokenize","trim","col","L","lpos","tokens","scopes","target","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","chunkify","operator_str","_operators","ch","add_token","at","token","add_function","set_last_position","position","adjust_column_position","last_token_is_numeric","is_multiplication","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","next_is_comma","getter","il","element","subbed","Node","left","right","toHTML","indent","tab","repeat","html","tree","location","toObject","expression_string","objectify","chunkAtCommas","chunks","rem_brackets","expression_or_obj","TeX","cdot","nobj","braces","expr","lb","ub","argSplit","ms","V","M","_symbol","cf","symbol1","symbol2","rows","l2","cols","is_negative","img","qa","tw","nn","rem","sigfigs","asbig","original","symMinMax","numVal","a_val","b_val","SYMBOLIC_MIN_MAX","getval","aval","bval","base","log_sym","log_base","img_part","sIsConstant","toExponential","quadrant","isFinite","clean","new_den","new_num","pn","hascomposites","sp","composites","non_composites","isDenom","prod","finalResult","identity","tolerance","col_index","vec1","vec2","mat","set1","set2","testSQRT","testPow","fct","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","powEQ","v1","v2","aIsComposite","bIsComposite","h1","h2","PN","PNEQ","valEQ","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","ONN","isSymbolP1","isSymbolP2","toEX","isEven","bm","logV","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","aIsZero","bIsZero","bIsConstant","aIsConstant","bIsInt","nre","nim","abs_b","sgn","aa","_a","_b","a1","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","opts","qc","quickConversion","fullConversion","parseInt","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","t_varray","input","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","bracketTypes","square","brace","angle","filterTokens","filtered","raw_tokens","parse_next","get","items","arrayPrefill","val","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","el","lw","rl","F","zeroMatrix","raw_values","raw","nc","isSquare","toRightTriangular","isSingular","augment","rr","ki","np","kp","els","divisor","inverse_elements","new_element","fel","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","f_array","alias","Function","LOG_FNS","Utils","groups","PARSER","libExports","fndec","multi_options","convertToLaTeX","convertFromLaTeX","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","ref_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","disallowed","api","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","plus","a_l","b_l","borrow","subtractAny","subtractSmall","small","multiplyLong","a_i","b_j","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","useKaratsuba","l1","multiplySmallAndArray","_multiplyBySmall","a_j","divMod1","divisorMostSignificantDigit","quotientDigit","divModSmall","divMod2","part","guess","xlen","highx","highy","check","reverse","divModAny","self","qSign","mSign","over","modPow","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","lesser","greaterOrEquals","geq","lesserOrEquals","leq","isDivisibleBy","isBasicPrime","millerRabinTest","nPrev","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","newT","one","newR","lastT","lastR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","shiftRight","remQuo","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","low","high","restricted","digit","absBase","charCodeAt","charCode","parseBaseFromArray","toBase","out","toBaseString","zeros","toJSON","parseStringValue","decimalPlace","isValid","parseNumberValue","minusOne","isInstance","module","exports","define","amd","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","W","J","cubeRoot","cbrt","Z","decimalPlaces","dp","dividedBy","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","U","naturalExponential","H","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","T","LN10","toPrecision","toSignificantDigits","toSD","truncated","G","I","search","$","K","X","Y","en","rn","sn","on","un","cn","defaults","getRandomValues","randomBytes","hn","an","dn","gn","wn","Nn","En","Mn","yn","qn","Uint32Array","On","Fn","An","Dn","Zn","Pn","Rn","Ln","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal"],"mappings":"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","sourcesContent":["/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\n\nvar nerdamer = (function (imports) {\n    \"use strict\";\n\n//version ====================================================================== \n    var version = '1.1.2';\n\n//inits ========================================================================\n    var _ = new Parser(); //nerdamer's parser\n\n    //import bigInt\n    var bigInt = imports.bigInt;\n    var bigDec = imports.bigDec;\n    //set the precision to js precision\n    bigDec.set({\n        precision: 250\n    });\n\n    var Groups = {};\n\n    //container of pregenerated primes\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\n\n//Settings ===================================================================== \n    var CUSTOM_OPERATORS = {};\n\n    var Settings = {\n        //the max number up to which to cache primes. Making this too high causes performance issues\n        init_primes: 1000,\n\n        exclude: [],\n        //If you don't care about division by zero for example then this can be set to true. \n        //Has some nasty side effects so choose carefully.\n        suppress_errors: false,\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n        //cos(9) for convenience but parse to number will always try to return a number if set to true. \n        PARSE2NUMBER: false,\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\n        SAFE: false,\n        //the symbol to use for imaginary symbols\n        IMAGINARY: 'i',\n        //the modules used to link numeric function holders\n        FUNCTION_MODULES: [Math],\n        //Allow certain characters\n        ALLOW_CHARS: ['π'],\n        //Allow nerdamer to convert multi-character variables\n        USE_MULTICHARACTER_VARS: true,\n        //Allow changing of power operator\n        POWER_OPERATOR: '^',\n        //The variable validation regex\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n        //Aliases\n        ALIASES: {\n            'π': 'pi',\n            '∞': 'Infinity'\n        },\n        POSITIVE_MULTIPLIERS: false,\n        //Cached items\n        CACHE: {},\n        //Print out warnings or not\n        SILENCE_WARNINGS: false,\n        //Precision\n        PRECISION: 80,\n        //function mappings\n        VECTOR: 'vector',\n        PARENTHESIS: 'parens',\n        SQRT: 'sqrt',\n        ABS: 'abs',\n        FACTORIAL: 'factorial',\n        DOUBLEFACTORIAL: 'dfactorial',\n        //reference pi and e\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n        PI: Math.PI,\n        E: Math.E,\n        LOG: 'log', \n        LOG10: 'log10',\n        LOG10_LATEX: 'log_{10}',\n        MAX_EXP: 200000\n    };\n\n    (function () {\n        Settings.CACHE.roots = {};\n        var x = 40,\n                y = 40;\n        for (var i = 2; i <= x; i++) {\n            for (var j = 2; j <= y; j++) {\n                var nthpow = bigInt(i).pow(j);\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\n            }\n        }\n    })();\n    \n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n    //The groups that help with organizing during parsing. Note that for FN is still a function even \n    //when it's raised to a symbol, which typically results in an EX\n    var N = Groups.N = 1, // A number\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5). \n            S = Groups.S = 3, // A single variable e.g. x. \n            EX = Groups.EX = 4, // An exponential\n            FN = Groups.FN = 5, // A function\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n    var CONST_HASH = Settings.CONST_HASH = '#';\n\n    var PARENTHESIS = Settings.PARENTHESIS;\n\n    var SQRT = Settings.SQRT;\n\n    var ABS = Settings.ABS;\n\n    var FACTORIAL = Settings.FACTORIAL;\n\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\n\n    //the storage container \"memory\" for parsed expressions\n    var EXPRESSIONS = [];\n\n    //variables\n    var VARS = {};\n\n    //the container used to store all the reserved functions\n    var RESERVED = [];\n\n    var WARNINGS = [];\n\n    /**\n     * Use this when errors are suppressible\n     * @param {String} msg\n     * @param {object} ErrorObj \n     */\n    var err = function (msg, ErrorObj) {\n        if (!Settings.suppress_errors) {\n            if (ErrorObj)\n                throw new ErrorObj(msg);\n            else\n                throw new Error(msg);\n        }\n    };\n\n//Utils ======================================================================== \n    var customError = function (name) {\n        var E = function (message) {\n            this.name = name;\n            this.message = message !== undefined ? message : '';\n            var error = new Error(this.message);\n            error.name = this.name;\n            this.stack = error.stack;\n        }; //create an empty error\n        E.prototype = Object.create(Error.prototype);\n        return E;\n    };\n\n    /**\n     * Checks to see if value is one of nerdamer's reserved names\n     * @param {String} value\n     * @return boolean\n     */\n    var isReserved = function (value) {\n        return RESERVED.indexOf(value) !== -1;\n    };\n\n    /**\n     * Checks to see that all symbols in array are the same\n     * @param {Symbol[]} arr\n     * @returns {bool}\n     */\n    var allSame = function (arr) {\n        var last = arr[0];\n        for (var i = 1, l = arr.length; i < l; i++)\n            if (!arr[i].equals(last))\n                return false;\n        return true;\n    };\n\n    /**\n     * Used to pass warnings or low severity errors about the library\n     * @param msg\n     */\n    var warn = function (msg) {\n        WARNINGS.push(msg);\n        if (Settings.SHOW_WARNINGS && console && console.warn) {\n            console.warn(msg);\n        }\n    };\n\n    /**\n     * Enforces rule: \"must start with a letter or underscore and \n     * can have any number of underscores, letters, and numbers thereafter.\"\n     * @param name The name of the symbol being checked\n     * @param {String} typ - The type of symbols that's being validated\n     * @throws {Exception}  - Throws an exception on fail\n     */\n    var validateName = function (name, typ) {\n        typ = typ || 'variable';\n        if (Settings.ALLOW_CHARS.indexOf(name) !== -1)\n            return;\n        var regex = Settings.VALIDATION_REGEX;\n        if (!(regex.test(name))) {\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n        }\n    };\n\n    /**\n     * Convert number from scientific format to decimal format\n     * @param {Number} num\n     */\n    var scientificToDecimal = function (num) {\n        var nsign = Math.sign(num);\n        //remove the sign\n        num = Math.abs(num);\n        //if the number is in scientific notation remove it\n        if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n            var zero = '0',\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\n                    e = parts.pop(), //store the exponential part\n                    l = Math.abs(e), //get the number of zeros\n                    sign = e / l,\n                    coeff_array = parts[0].split('.');\n            if (sign === -1) {\n                l = l - coeff_array[0].length;\n                if (l < 0) {\n                  num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n                } \n                else {\n                  num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n                }\n            } \n            else {\n                var dec = coeff_array[1];\n                if (dec)\n                    l = l - dec.length;\n                if (l < 0) {\n                  num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n                } else {\n                  num = coeff_array.join('') + new Array(l + 1).join(zero);\n                }\n            }\n        }\n\n        return nsign < 0 ? '-'+num : num;\n    };\n    /**\n     * Checks if number is a prime number\n     * @param {Number} n - the number to be checked\n     */\n    var isPrime = function (n) {\n        var q = Math.floor(Math.sqrt(n));\n        for (var i = 2; i <= q; i++) {\n            if (n % i === 0)\n                return false;\n        }\n        return true;\n    };\n    \n    /**\n     * Checks if n is a number\n     * @param {any} n \n     */\n    var isNumber = function(n) {\n        return /^\\d+\\.?\\d*$/.test(n);\n    };\n    \n    /**\n     * Checks to see if an array contains only numeric values\n     * @param {Array} arr \n     */\n    var allNumeric = function(arr) {\n        for(var i=0; i<arr.length; i++)\n            if(!isNumber(arr[i]))\n                return false;\n        return true;\n    };\n    /**\n     * Checks to see if a number or Symbol is a fraction\n     * @param {Number|Symbol} num\n     * @returns {boolean}\n     */\n    var isFraction = function (num) {\n        if (isSymbol(num))\n            return isFraction(num.multiplier.toDecimal());\n        return (num % 1 !== 0);\n    };\n\n    /**\n     * Checks to see if the object provided is a Symbol\n     * @param {Object} obj\n     */\n    var isSymbol = function (obj) {\n        return (obj instanceof Symbol);\n    };\n\n    /**\n     * Checks to see if the object provided is an Expression\n     * @param {Object} obj\n     */\n    var isExpression = function (obj) {\n        return (obj instanceof Expression);\n    };\n\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly \n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated \n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n    var variables = function (obj, poly, vars) {\n        vars = vars || {\n            c: [],\n            add: function (value) {\n                if (this.c.indexOf(value) === -1 && isNaN(value))\n                    this.c.push(value);\n            }\n        };\n\n        if (isSymbol(obj)) {\n            var group = obj.group,\n                    prevgroup = obj.previousGroup;\n            if (group === EX)\n                variables(obj.power, poly, vars);\n\n            if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n                for (var x in obj.symbols) {\n                    variables(obj.symbols[x], poly, vars);\n                }\n            }\n            else if (group === S || prevgroup === S) {\n                //very crude needs fixing. TODO\n                if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\n                    vars.add(obj.value);\n            }\n            else if (group === PL || prevgroup === PL) {\n                variables(firstObject(obj.symbols), poly, vars);\n            }\n            else if (group === EX) {\n                if (!isNaN(obj.value))\n                    vars.add(obj.value);\n                variables(obj.power, poly, vars);\n            }\n            else if (group === FN && !poly) {\n                for (var i = 0; i < obj.args.length; i++) {\n                    variables(obj.args[i], poly, vars);\n                }\n            }\n        }\n\n        return vars.c.sort();\n    };\n    \n    /**\n     * Returns the sum of an array\n     * @param {Array} arr\n     * @returns {Symbol}\n     */\n    var arraySum = function(arr) {\n        var sum = new Symbol(0);\n        arr.map(function(x) {\n            sum = _.add(sum, x);\n        });\n        return sum;\n    };\n\n    /**\n     * Separates out the variables into terms of variabls. \n     * e.g. x+y+x*y+sqrt(2)+pi returns \n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n     * @param {type} symbol\n     * @param {type} o\n     * @returns {undefined}\n     * @throws {Error} for expontentials\n     */\n    var separate = function (symbol, o) {\n        symbol = _.expand(symbol);\n        o = o || {};\n        var insert = function (key, sym) {\n            if (!o[key])\n                o[key] = new Symbol(0);\n            o[key] = _.add(o[key], sym.clone());\n        };\n        symbol.each(function (x) {\n            if (x.isConstant('all'))\n                insert('constants', x);\n            else if (x.group === S) {\n                insert(x.value, x);\n            }\n            else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n                separate(x.args[0]);\n            }\n            else if (x.group === EX || x.group === FN) {\n                throw new Error('Unable to separate. Term cannot be a function!');\n            }\n            else {\n                insert(variables(x).join(' '), x);\n            }\n        });\n\n        return o;\n    };\n\n    /**\n     * Fills holes in an array with zero symbol or generates one with n zeroes\n     * @param {Array} arr \n     * @param {Number} n \n     */\n    var fillHoles = function (arr, n) {\n        n = n || arr.length;\n        for (var i = 0; i < n; i++) {\n            var sym = arr[i];\n            if (!sym)\n                arr[i] = new Symbol(0);\n        }\n        return arr;\n    };\n\n    /**\n     * \n     * Checks to see if the object provided is a Vector\n     * @param {Object} obj\n     */\n    var isVector = function (obj) {\n        return (obj instanceof Vector);\n    };\n\n    /**\n     * Checks to see if the object provided is a Matrix\n     * @param {Object} obj\n     */\n    var isMatrix = function (obj) {\n        return (obj instanceof Matrix);\n    };\n    \n    var isSet = function(obj) {\n        return (obj instanceof Set);\n    };\n    \n    /**\n     * Checks to see if a symbol is in group N\n     * @param {Symbol} symbol\n     */\n    var isNumericSymbol = function (symbol) {\n        return symbol.group === N || symbol.group === P;\n    };\n\n    /**\n     * Checks to see if a symbol is a variable with no multiplier nor power\n     * @param {Symbol} symbol\n     */\n    var isVariableSymbol = function (symbol) {\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n    };\n\n    /**\n     * Checks to see if the object provided is an Array\n     * @param {Object} arr\n     */\n    var isArray = function (arr) {\n        return Array.isArray(arr);\n    };\n\n    /**\n     * Checks to see if a number is an integer\n     * @param {Number} num\n     */\n    var isInt = function (num) {\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n    };\n\n    /**\n     * @param {Number|Symbol} obj\n     * @returns {boolean}\n     */\n    var isNegative = function (obj) {\n        if (isSymbol(obj)) {\n            obj = obj.multiplier;\n        }\n        return obj.lessThan(0);\n    };\n    /**\n     * Safely stringify object\n     * @param o\n     */\n    var stringify = function(o) {\n        if(!o)\n            return o;\n        return String(o);\n    };\n    \n    /**\n     * @param {String} str\n     * @returns {String} - returns a formatted string surrounded by brackets\n     */\n    var inBrackets = function (str) {\n        return '(' + str + ')';\n    };\n\n    /**\n     * A helper function to replace parts of string\n     * @param {String} str - The original string\n     * @param {Integer} from - The starting index\n     * @param {Integer} to - The ending index\n     * @param {String} with_str - The replacement string\n     * @returns {String} - A formatted string\n     */\n    var stringReplace = function (str, from, to, with_str) {\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\n    };\n\n    /**\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n     * @param {Object} obj\n     * @returns {boolean}\n     */\n    var customType = function (obj) {\n        return obj !== undefined && obj.custom;\n    };\n\n    /**\n     * Checks to see if numbers are both negative or are both positive\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {boolean}\n     */\n    var sameSign = function (a, b) {\n        return (a < 0) === (b < 0);\n    };\n\n    /**\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\n     * @example format('{0} nice, {0} sweet', 'something')\n     * //returns 'something nice, something sweet'\n     */\n    var format = function () {\n        var args = [].slice.call(arguments),\n                str = args.shift();\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n            var arg = args[index];\n            return typeof arg === 'function' ? arg() : arg;\n        });\n\n        return new_str;\n    };\n    \n    /**\n     * Generates an array with values within a range. Multiplies by a step if provided\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} step\n     */\n    var range = function(start, end, step) {\n        var arr = [];\n        step = step || 1;\n        for(var i=start; i<=end; i++) \n            arr.push(i*step);\n        return arr;\n    };\n    \n    /**\n     * Returns an array of all the keys in an array\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var keys = Object.keys;\n\n    /**\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects \n     * so only use if you need any first random or if there's only one item in the object\n     * @param {Object} obj\n     * @param {String} key Return this key as first object\n     * @param {Boolean} both\n     * @returns {*}\n     */\n    var firstObject = function (obj, key, both) {\n        for (var x in obj)\n            break;\n        if (key)\n            return x;\n        if(both)\n            return {\n                key: x,\n                obj: obj[x]\n            };\n        return obj[x];\n    };\n\n    /**\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n     * @param {Symbol} sym1\n     * @param {Symbol} sym2\n     * @param {String[]} vars - an optional array of variables to use\n     * @returns {bool}\n     */\n    var compare = function (sym1, sym2, vars) {\n        var n = 5; //a random number between 1 and 5 is good enough\n        var scope = {}; // scope object with random numbers generated using vars\n        var comparison;\n        for (var i = 0; i < vars.length; i++)\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n        block('PARSE2NUMBER', function () {\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n        });\n        return comparison;\n    };\n\n    /**\n     * Is used to set a user defined function using the function assign operator\n     * @param {String} name\n     * @param {String[]} params_array\n     * @param {String} body\n     * @returns {Boolean}\n     */\n    var setFunction = function (name, params_array, body) {\n        validateName(name);\n        if (!isReserved(name)) {\n            params_array = params_array || variables(_.parse(body));\n            _.functions[name] = [_.mapped_function, params_array.length, {\n                    name: name,\n                    params: params_array,\n                    body: body\n                }];\n            return body;\n        }\n        return null;\n    };\n\n    /**\n     * Returns the minimum number in an array\n     * @param {Array} arr\n     * @returns {Number} \n     */\n    var arrayMax = function (arr) {\n        return Math.max.apply(undefined, arr);\n    };\n\n    /**\n     * Returns the maximum number in an array\n     * @param {Array} arr\n     * @returns {Number} \n     */\n    var arrayMin = function (arr) {\n        return Math.min.apply(undefined, arr);\n    };\n\n    /**\n     * Clones array with clonable items\n     * @param {Array} arr\n     * @returns {Array}\n     */\n    var arrayClone = function (arr) {\n        var new_array = [], l = arr.length;\n        for (var i = 0; i < l; i++)\n            new_array[i] = arr[i].clone();\n        return new_array;\n    };\n\n    /**\n     * Fills numbers between array values\n     * @param {Numbers[]} arr\n     * @param {Integer} slices\n     */\n    var arrayAddSlices = function(arr, slices) {\n        slices = slices || 20;\n        var retval = [];\n        var c, delta, e;\n        retval.push(arr[0]); //push the beginning\n        for(var i=0; i<arr.length-1; i++) {\n            c = arr[i];\n            delta = arr[i+1]-c; //get the difference\n            e = delta/slices; //chop it up in the desired number of slices\n            for(var j=0; j<slices; j++) {\n                c += e; //add the mesh to the last slice\n                retval.push(c);\n            }\n        }\n\n        return retval;\n    };\n\n     /**\n     * Gets nth roots of a number\n     * @param {Symbol} symbol\n     * @returns {Vector}\n     */\n    var nroots = function(symbol) {\n        var a, b;\n\n        if(symbol.group === FN && symbol.fname === '') {\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n            b = _.parse(symbol.power);\n        }\n        else if(symbol.group === P) {\n            a = _.parse(symbol.value);\n            b = _.parse(symbol.power);\n        }\n\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\n            var _roots = [];\n            \n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\n            var r = parts[0];\n            \n            //var r = _.parse(a).abs().toString();\n\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n            var x = _.arg(a);\n            var n = b.multiplier.den.toString();\n            var p = b.multiplier.num.toString();\n\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n            for(var i=0; i<n; i++) {\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n            }\n            return Vector.fromArray(_roots);\n        }\n        else if(symbol.isConstant(true, true)) {\n            var sign = symbol.sign();\n            var x = evaluate(symbol.abs());\n            var root = _.sqrt(x);\n\n            var _roots = [root.clone(), root.negate()];\n\n            if(sign < 0)\n                _roots = _roots.map(function(x) {\n                    return _.multiply(x, Symbol.imaginary());\n                });\n                \n        }\n        else {\n            _roots = [_.parse(symbol)];\n        }\n\n        return Vector.fromArray(_roots);\n    };\n\n    /**\n     * Sorts and array given 2 parameters\n     * @param {String} a\n     * @param {String} b\n     */\n    var comboSort = function (a, b) {\n        var l = a.length,\n                combined = []; //the linker\n        for (var i = 0; i < a.length; i++) {\n            combined.push([a[i], b[i]]); //create the map\n        }\n\n        combined.sort(function (x, y) {\n            return x[0] - y[0];\n        });\n\n        var na = [], nb = [];\n\n        for (i = 0; i < l; i++) {\n            na.push(combined[i][0]);\n            nb.push(combined[i][1]);\n        }\n\n        return [na, nb];\n    };\n    /**\n     * TODO: Pick a more descriptive name and better description\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n     * Example a*x^2+b wrt x\n     * @param {Symbol} fn\n     * @param {String} wrt\n     * @param {bool} as_obj\n     */\n    var decompose_fn = function (fn, wrt, as_obj) {\n        wrt = String(wrt); //convert to string\n        var ax, a, x, b;\n        if (fn.group === CP) {\n            var t = _.expand(fn.clone()).stripVar(wrt);\n            ax = _.subtract(fn.clone(), t.clone());\n            b = t;\n        }\n        else\n            ax = fn.clone();\n        a = ax.stripVar(wrt);\n        x = _.divide(ax.clone(), a.clone());\n        b = b || new Symbol(0);\n        if (as_obj)\n            return {\n                a: a,\n                x: x,\n                ax: ax,\n                b: b\n            };\n        return [a, x, ax, b];\n    };\n    /**\n     * Rounds a number up to x decimal places\n     * @param {Number} x\n     * @param {Number} s\n     */\n    var nround = function (x, s) {\n        if(isInt(x)) {\n            if(x >= Number.MAX_VALUE)\n                return x.toString();\n            return Number(x);\n        }\n            \n        s = typeof s === 'undefined' ? 14 : s;\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n    };\n\n    /**\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\n     * instance a is used in the symbol then it keeps going down the line until\n     * one is found that's not in use. If all letters are taken then it\n     * starts appending numbers. \n     * IMPORTANT! It assumes that the substitution will be undone\n     * beore the user gets to interact with the object again.\n     * @param {Symbol} symbol\n     */\n    var getU = function (symbol) {\n        //start with u\n        var u = 'u', //start with u\n                v = u, //init with u\n                c = 0, //postfix number\n                vars = variables(symbol);\n        //make sure this variable isn't reserved and isn't in the variable list\n        while (!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\n            v = u + c++;\n        //get an empty slot. It seems easier to just push but the\n        //problem is that we may have some which are created by clearU\n        for (var i = 0, l = RESERVED.length; i <= l; i++)\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\n            if (!RESERVED[i]) {\n                RESERVED[i] = v; //reserve the variable\n                break;\n            }\n        return v;\n    };\n\n    /**\n     * Clears the u variable so it's no longer reserved\n     * @param {String} u\n     */\n    var clearU = function (u) {\n        var indx = RESERVED.indexOf(u);\n        if (indx !== -1)\n            RESERVED[indx] = undefined;\n    };\n\n    /**\n     * Loops through each item in object and calls function with item as param\n     * @param {Object|Array} obj\n     * @param {Function} fn \n     */\n    var each = function (obj, fn) {\n        if (isArray(obj)) {\n            var l = obj.length;\n            for (var i = 0; i < l; i++)\n                fn.call(obj, i);\n        }\n        else {\n            for (var x in obj)\n                if (obj.hasOwnProperty(x))\n                    fn.call(obj, x);\n        }\n    };\n\n    /**\n     * Checks to see if a number is an even number\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var even = function (num) {\n        return num % 2 === 0;\n    };\n\n    /**\n     * Checks to see if a fraction is divisible by 2\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var evenFraction = function (num) {\n        return 1 / (num % 1) % 2 === 0;\n    };\n\n    /**\n     * Strips duplicates out of an array\n     * @param {Array} arr\n     */\n    var arrayUnique = function (arr) {\n        var l = arr.length, a = [];\n        for (var i = 0; i < l; i++) {\n            var item = arr[i];\n            if (a.indexOf(item) === -1)\n                a.push(item);\n        }\n        return a;\n    };\n    \n    /**\n     * Removes duplicates from an array. Returns a new array\n     * @param {Array} arr\n     * @param {Function} condition\n     */\n    var removeDuplicates = function(arr, condition) {\n        var conditionType = typeof condition;\n\n        if(conditionType !== 'function' || conditionType === 'undefined') {\n            condition = function(a, b) {\n                return a === b;\n            };\n        }\n\n        var seen = [];\n\n        while(arr.length) {\n            var a = arr[0];\n            //only one element left so we're done\n            if(arr.length === 1) {\n                seen.push(a);\n                break;\n            }\n            var temp = [];\n            seen.push(a); //we already scanned these\n            for(var i=1; i<arr.length; i++) {\n                var b = arr[i];\n                //if the number is outside the specified tolerance\n                if(!condition(a, b))\n                    temp.push(b);\n            }\n            //start over with the remainder\n            arr = temp;\n        }\n\n        return seen;\n    };\n    \n    /**\n     * Reserves the names in an object so they cannot be used as function names\n     * @param {Object} obj\n     */\n    var reserveNames = function (obj) {\n        var add = function (item) {\n            if (RESERVED.indexOf(item) === -1)\n                RESERVED.push(item);\n        };\n\n        if (typeof obj === 'string')\n            add(obj);\n        else {\n            each(obj, function (x) {\n                add(x);\n            });\n        }\n    };\n\n    /**\n     * Removes an item from either an array or an object. If the object is an array, the index must be \n     * specified after the array. If it's an object then the key must be specified\n     * @param {Object|Array} obj\n     * @param {Integer} indexOrKey\n     */\n    var remove = function (obj, indexOrKey) {\n        var result;\n        if (isArray(obj)) {\n            result = obj.splice(indexOrKey, 1)[0];\n        }\n        else {\n            result = obj[indexOrKey];\n            delete obj[indexOrKey];\n        }\n        return result;\n    };\n\n    /**\n     * Creates a temporary block in which one of the global settings is temporarily modified while\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n     * answer for a period you would set PARSE2NUMBER to true in the block.\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n     * @param {String} setting - The setting being accessed\n     * @param {Function} f \n     * @param {boolean} opt - The value of the setting in the block\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\n     */\n    var block = function (setting, f, opt, obj) {\n        var current_setting = Settings[setting];\n        Settings[setting] = opt === undefined ? true : !!opt;\n        var retval = f.call(obj);\n        Settings[setting] = current_setting;\n        return retval;\n    };\n\n    /**\n     * provide a mechanism for accessing functions directly. Not yet complete!!! \n     * Some functions will return undefined. This can maybe just remove the \n     * function object at some point when all functions are eventually \n     * housed in the global function object. Returns ALL parser available \n     * functions. Parser.functions may not contain all functions\n     */\n    var importFunctions = function () {\n        var o = {};\n        for (var x in _.functions)\n            o[x] = _.functions[x][0];\n        return o;\n    };\n\n    /**\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n     * @param {Array|object} obj\n     */\n    var arguments2Array = function (obj) {\n        return [].slice.call(obj);\n    };\n\n    /**\n     * Returns the coefficients of a symbol\n     * @param {Symbol} symbol\n     * @param {Symbol} wrt\n     */\n    var getCoeffs = function (symbol, wrt) {\n        var coeffs = [];\n        //we loop through the symbols and stick them in their respective \n        //containers e.g. y*x^2 goes to index 2\n        symbol.each(function (term) {\n            if (term.contains(wrt)) {\n                //we want only the coefficient which in this case will be everything but the variable\n                //e.g. a*b*x -> a*b if the variable to solve for is x\n                var coeff = term.stripVar(wrt),\n                        x = _.divide(term.clone(), coeff.clone()),\n                        p = x.power.toDecimal();\n            }\n            else {\n                coeff = term;\n                p = 0;\n            }\n            var e = coeffs[p];\n            //if it exists just add it to it\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\n\n        }, true);\n\n        for (var i = 0; i < coeffs.length; i++)\n            if (!coeffs[i])\n                coeffs[i] = new Symbol(0);\n        //fill the holes\n        return coeffs;\n    };\n\n    /**\n     * As the name states. It forces evaluation of the expression \n     * @param {Symbol} symbol\n     * @param {Symbol} o\n     */\n    var evaluate = function (symbol, o) {\n        return block('PARSE2NUMBER', function () {\n            return _.parse(symbol, o);\n        }, true);\n    };\n\n    /**\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\n     * @param {String[]|String|Symbol|Number|Number[]} x \n     */\n    var convertToVector = function (x) {\n        if (isArray(x)) {\n            var vector = new Vector([]);\n            for (var i = 0; i < x.length; i++)\n                vector.elements.push(convertToVector(x[i]));\n            return vector;\n        }\n        //Ensure that a nerdamer ready object is returned\n        if (!isSymbol(x))\n            return _.parse(x);\n        return x;\n    };\n\n    /**\n     * Generates prime numbers up to a specified number\n     * @param {Number} upto \n     */\n    var generatePrimes = function (upto) {\n        //get the last prime in the array\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\n        //no need to check if we've already encountered the number. Just check the cache.\n        for (var i = last_prime; i < upto; i++) {\n            if (isPrime(i))\n                PRIMES.push(i);\n        }\n    };\n    /**\n     * Checks to see if all arguments are numbers\n     * @param {object} args\n     */\n    var allNumbers = function (args) {\n        for (var i = 0; i < args.length; i++)\n            if (args[i].group !== N)\n                return false;\n        return true;\n    };\n    /*\n     * Checks if all arguments aren't just all number but if they\n     * are constants as well e.g. pi, e.\n     * @param {object} args \n     */\n    var allConstants = function (args) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].isPi() || args[i].isE())\n                continue;\n            if (!args[i].isConstant(true))\n                return false;\n        }\n        return true;\n    };\n\n\n//Exceptions ===================================================================\n    //Is thrown for division by zero\n    var DivisionByZero = customError('DivisionByZero');\n    //Is throw if an error occured during parsing\n    var ParseError = customError('ParseError');\n    //Is thrown if the expression results in undefined\n    var UndefinedError = customError('UndefinedError');\n    //Is throw if a function exceeds x amount of iterations\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\n    //Is thrown if the parser receives an incorrect type\n    var NerdamerTypeError = customError('NerdamerTypeError');\n    //Is thrown if bracket parity is not correct\n    var ParityError = customError('ParityError');\n    //Is thrown if an unexpectd or incorrect operator is encountered\n    var OperatorError = customError('OperatorError');\n    //Is thrown if an index is out of range.\n    var OutOfRangeError = customError('OutOfRangeError');\n    //Is thrown if dimensions are incorrect. Mostly for matrices\n    var DimensionError = customError('DimensionError');\n    //Is thrown if variable name violates naming rule\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\n    //Is thrown if the limits of the library are exceeded for a function\n    //This can be that the function become unstable passed a value\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\n    //Is throw if the value is an incorrect LH or RH value\n    var NerdamerValueError = customError('NerdamerValueError');\n    //Is throw if the value is an incorrect LH or RH value\n    var SolveError = customError('SolveError');\n\n    var exceptions = {\n        DivisionByZero: DivisionByZero,\n        ParseError: ParseError,\n        UndefinedError: UndefinedError,\n        MaximumIterationsReached: MaximumIterationsReached,\n        NerdamerTypeError: NerdamerTypeError,\n        ParityError: ParityError,\n        OperatorError: OperatorError,\n        OutOfRangeError: OutOfRangeError,\n        DimensionError: DimensionError,\n        InvalidVariableNameError: InvalidVariableNameError,\n        ValueLimitExceededError: ValueLimitExceededError,\n        NerdamerValueError: NerdamerValueError,\n        SolveError: SolveError\n    };\n//Big ========================================================================== \n    var Big = {\n        cos: function (x) {\n            return new Symbol(bigDec.cos(x.multiplier.toDecimal()));\n        },\n        sin: function (x) {\n            return new Symbol(bigDec.sin(x.multiplier.toDecimal()));\n        }\n    };\n//Math2 ======================================================================== \n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the \n    //functions within are pretty self-explanatory.\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n    var Math2 = {\n        csc: function (x) {\n            return 1 / Math.sin(x);\n        },\n        sec: function (x) {\n            return 1 / Math.cos(x);\n        },\n        cot: function (x) {\n            return 1 / Math.tan(x);\n        },\n\t\tacsc: function(x) { return Math.asin(1/x); },\n        asec: function(x) { \n            return Math.acos(1/x); \n        },\n        acot: function(x) { \n            return (Math.PI / 2) - Math.atan(x);\n        },\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n        erf: function (x) {\n            var t = 1 / (1 + 0.5 * Math.abs(x));\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\n                    t * (1.00002368 +\n                            t * (0.37409196 +\n                                    t * (0.09678418 +\n                                            t * (-0.18628806 +\n                                                    t * (0.27886807 +\n                                                            t * (-1.13520398 +\n                                                                    t * (1.48851587 +\n                                                                            t * (-0.82215223 +\n                                                                                    t * (0.17087277)))))))))\n                    );\n            return x >= 0 ? result : -result;\n        },\n        diff: function(f) {\n            var h = 0.001;\n            \n            var derivative = function(x) { \n                return (f(x + h) - f(x - h)) / (2 * h); \n            };\n            \n            return derivative;\n        },\n        median: function (...values) {\n            values.sort(function (a, b) {\n                return a - b;\n            });\n\n            var half = Math.floor(values.length / 2);\n\n            if (values.length % 2)\n                return values[half];\n\n            return (values[half - 1] + values[half]) / 2.0;\n        },\n        /*\n         * Reverses continued fraction calculation\n         * @param {obj} contd\n         * @returns {Number}\n         */\n        fromContinued: function (contd) {\n            var arr = contd.fractions.slice();\n            var e = 1 / arr.pop();\n            for (var i = 0, l = arr.length; i < l; i++) {\n                e = 1 / (arr.pop() + e);\n            }\n            return contd.sign * (contd.whole + e);\n        },\n        /*\n         * Calculates continued fractions\n         * @param {Number} n\n         * @param {Number} x The number of places\n         * @returns {Number}\n         */\n        continuedFraction: function (n, x) {\n            x = x || 20;\n            var sign = Math.sign(n); /*store the sign*/\n            var absn = Math.abs(n); /*get the absolute value of the number*/\n            var whole = Math.floor(absn); /*get the whole*/\n            var ni = absn - whole; /*subtract the whole*/\n            var c = 0; /*the counter to keep track of iterations*/\n            var done = false;\n            var epsilon = 1e-14;\n            var max = 1e7;\n            var e, w;\n            var retval = {\n                whole: whole,\n                sign: sign,\n                fractions: []\n            };\n            /*start calculating*/\n            while (!done && ni !== 0) {\n                /*invert and get the whole*/\n                e = 1 / ni;\n                w = Math.floor(e);\n                if (w > max) {\n                    /*this signals that we may have already gone too far*/\n                    var d = Math2.fromContinued(retval) - n;\n                    if (d <= Number.EPSILON)\n                        break;\n                }\n                /*add to result*/\n                retval.fractions.push(w);\n                /*move the ni to the decimal*/\n                ni = e - w;\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n                if (ni <= epsilon || c >= x - 1)\n                    done = true;\n                c++;\n            }\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n            var idx = retval.fractions.length - 1;\n            if (retval.fractions[idx] === 1) {\n                retval.fractions.pop();\n                /*increase the last one by one*/\n                retval.fractions[--idx]++;\n            }\n            return retval;\n        },\n        bigpow: function (n, p) {\n            if (!(n instanceof Frac))\n                n = Frac.create(n);\n            if (!(p instanceof Frac))\n                p = Frac.create(p);\n            var retval = new Frac(0);\n            if (p.isInteger()) {\n                retval.num = n.num.pow(p.toString());\n                retval.den = n.den.pow(p.toString());\n            }\n            else {\n                var num = Frac.create(Math.pow(n.num, p.num));\n                var den = Frac.create(Math.pow(n.den, p.num));\n\n                retval.num = Math2.nthroot(num, p.den.toString());\n                retval.den = Math2.nthroot(den, p.den);\n            }\n            return retval;\n        },\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n        gamma: function (z) {\n            var g = 7;\n            var C = [\n                0.99999999999980993,\n                676.5203681218851,\n                -1259.1392167224028,\n                771.32342877765313,\n                -176.61502916214059,\n                12.507343278686905,\n                -0.13857109526572012,\n                9.9843695780195716e-6,\n                1.5056327351493116e-7]\n                    ;\n\n            if (z < 0.5)\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\n            else {\n                z -= 1;\n\n                var x = C[0];\n                for (var i = 1; i < g + 2; i++)\n                    x += C[i] / (z + i);\n\n                var t = z + g + 0.5;\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n            }\n        },\n        //factorial\n        bigfactorial: function (x) {\n            var retval = new bigInt(1);\n            for (var i = 2; i <= x; i++)\n                retval = retval.times(i);\n            return new Frac(retval);\n        },\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\n        bigLog: function (x) {\n            varn            if (CACHE[x]) {\n                return Frac.quick.apply(null, CACHE[x].split('/'));\n            }\n            x = new Frac(x);\n            var n = 80;\n            var retval = new Frac(0);\n            var a = x.subtract(new Frac(1));\n            var b = x.add(new Frac(1));\n            for (var i = 0; i < n; i++) {\n                var t = new Frac(2 * i + 1);\n                var k = Math2.bigpow(a.divide(b), t);\n                var r = t.clone().invert().multiply(k);\n                retval = retval.add(r);\n\n            }\n            return retval.multiply(new Frac(2));\n        },\n        //the factorial function but using the big library instead\n        factorial: function (x) {\n            var is_int = x % 1 === 0;\n            \n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n            if (is_int && x < 0)\n                return NaN;\n            \n            if(!is_int)\n                return Math2.gamma(x+1);\n            \n            var retval = 1;\n            for (var i = 2; i <= x; i++)\n                retval = retval * i;\n            return retval;\n        },\n        //double factorial\n        //http://mathworld.wolfram.com/DoubleFactorial.html\n        dfactorial: function (x) {\n            if (isInt(x)) {\n                var even = x % 2 === 0;\n                /* If x = even then n = x/2 else n = (x-1)/2*/\n                var n = even ? x / 2 : (x + 1) / 2;\n                /*the return value*/\n                var r = new Frac(1);\n                /*start the loop*/\n                if (even)\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\n                else\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n            }\n            else {\n                /*Not yet extended to bigNum*/\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n            }\n\n            /*done*/\n            return r;\n        },\n        GCD: function () {\n            var args = arrayUnique([].slice.call(arguments)\n                    .map(function (x) {\n                        return Math.abs(x);\n                    })).sort(),\n                    a = Math.abs(args.shift()),\n                    n = args.length;\n\n            while (n-- > 0) {\n                var b = Math.abs(args.shift());\n                while (true) {\n                    a %= b;\n                    if (a === 0) {\n                        a = b;\n                        break;\n                    }\n                    b %= a;\n                    if (b === 0)\n                        break;\n                    ;\n                }\n            }\n            return a;\n        },\n        QGCD: function () {\n            var args = [].slice.call(arguments);\n            var a = args[0];\n            for (var i = 1; i < args.length; i++) {\n                var b = args[i];\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n                a = b.gcd(a);\n                if (sign < 0)\n                    a.negate();\n            }\n            return a;\n        },\n        LCM: function (a, b) {\n            return (a * b) / Math2.GCD(a, b);\n        },\n        //pow but with the handling of negative numbers\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n        pow: function (b, e) {\n            if (b < 0) {\n                if (Math.abs(e) < 1) {\n                    /*nth root of a negative number is imaginary when n is even*/\n                    if (1 / e % 2 === 0)\n                        return NaN;\n                    return -Math.pow(Math.abs(b), e);\n                }\n            }\n            return Math.pow(b, e);\n        },\n        factor: function (n) {\n            n = Number(n);\n            var sign = Math.sign(n); /*store the sign*/\n            /*move the number to absolute value*/\n            n = Math.abs(n);\n            var ifactors = Math2.ifactor(n);\n            var factors = new Symbol();\n            factors.symbols = {};\n            factors.group = CB;\n            for (var x in ifactors) {\n                var factor = new Symbol(1);\n                factor.group = P; /*cheat a little*/\n                factor.value = x;\n                factor.power = new Symbol(ifactors[x]);\n                factors.symbols[x] = factor;\n            }\n            factors.updateHash();\n            \n            if(n === 1) {\n                factors = new Symbol(n);\n            }\n            \n            /*put back the sign*/\n            if(sign < 0)\n                factors.negate();\n            \n            return factors;\n        },\n        /**\n         * Uses trial division\n         * @param {Integer} n - the number being factored\n         * @param {object} factors -  the factors object\n         * @returns {object}\n         */\n        sfactor: function (n, factors) {\n            factors = factors || {};\n            var r = Math.floor(Math.sqrt(n));\n            var lcprime = PRIMES[PRIMES.length - 1];\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n            /*takes too long*/\n            if (r > lcprime && n < 1e6)\n                generatePrimes(r);\n            var l = PRIMES.length;\n            for (var i = 0; i < l; i++) {\n                var prime = PRIMES[i];\n                /*trial division*/\n                while (n % prime === 0) {\n                    n = n / prime;\n                    factors[prime] = (factors[prime] || 0) + 1;\n                }\n            }\n            if (n > 1)\n                factors[n] = 1;\n            return factors;\n        },\n        /**\n         * Pollard's rho\n         * @param {Integer} n\n         * @returns {object}\n         */\n        ifactor: function (n) {\n            n = String(n);\n\n            if (n === '0')\n                return {'0': 1};\n            n = new bigInt(n); /*convert to bigInt for safety*/\n            var sign = n.sign ? -1 : 1;\n            n = n.abs();\n            var factors = {}; /*factor object being returned.*/\n            if (n.lt('65536')) { /*less than 2^16 just use trial division*/\n                factors = Math2.sfactor(n, factors);\n            }\n            else {\n                var add = function (e) {\n                    if (!e.isPrime()) {\n                        factors = Math2.sfactor(e, factors);\n                    }\n                    else\n                        factors[e] = (factors[e] || 0) + 1;\n                };\n\n                while (!n.abs().equals(1)) {\n                    if (n.isPrime()) {\n                        add(n);\n                        break;\n                    }\n                    else {\n                        function rho(c) {\n                            var xf = new bigInt(c),\n                                    cz = 2,\n                                    x = new bigInt(c),\n                                    factor = new bigInt(1);\n\n                            while (factor.equals(1)) {\n                                for (var i = 0; i <= cz && factor.equals(1); i++) {\n                                    x = x.pow(2).add(1).mod(n);\n                                    factor = bigInt.gcd(x.minus(xf).abs(), n);\n                                }\n\n                                cz = cz * 2;\n                                xf = x;\n                            }\n                            if (factor.equals(n)) {\n                                return rho(c + 1);\n                            }\n                            return factor;\n                        }\n                        var factor = rho(2);\n                        add(factor);\n                        /*divide out the factor*/\n                        n = n.divide(factor);\n                    }\n                }\n            }\n\n            /*put the sign back*/\n            if (sign === -1) {\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\n                factors['-' + sm] = factors[sm];\n                delete factors[sm];\n            }\n\n            return factors;\n        },\n        //factors a number into rectangular box. If sides are primes that this will be\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n        boxfactor: function (n, max) {\n            max = max || 200; //stop after this number of iterations\n            var c, r,\n                    d = Math.floor((5 / 12) * n), //the divisor\n                    i = 0, //number of iterations\n                    safety = false;\n            while (true) {\n                c = Math.floor(n / d);\n                r = n % d;\n                if (r === 0)\n                    break; //we're done\n                if (safety)\n                    return [n, 1];\n                d = Math.max(r, d - r);\n                i++;\n                safety = i > max;\n            }\n            return [c, d, i];\n        },\n        fib: function (n) {\n            var sign = Math.sign(n);\n            n = Math.abs(n);\n            sign = even(n) ? sign : Math.abs(sign);\n            var a = 0, b = 1, f = 1;\n            for (var i = 2; i <= n; i++) {\n                f = a + b;\n                a = b;\n                b = f;\n            }\n            return f * sign;\n        },\n        mod: function (x, y) {\n            return x % y;\n        },\n        //http://mathworld.wolfram.com/IntegerPart.html\n        integer_part: function (x) {\n            var sign = Math.sign(x);\n            return sign * Math.floor(Math.abs(x));\n        },\n        simpson: function (f, a, b, step) {\n            var get_value = function (f, x, side) {\n                var v = f(x);\n                var d = 0.000000000001;\n                if (isNaN(v)) {\n                    v = f(side === 1 ? x + d : x - d);\n                }\n                return v;\n            };\n\n            step = step || 0.0001;\n            //calculate the number of intervals\n            var n = Math.abs(Math.floor((b - a) / step));\n            //simpson's rule requires an even number of intervals. If it's not then add 1\n            if (n % 2 !== 0)\n                n++;\n            //get the interval size\n            var dx = (b - a) / n;\n            //get x0\n            var retval = get_value(f, a, 1);\n\n            //get the middle part 4x1+2x2+4x3 ...\n            //but first set a flag to see if it's even or odd. \n            //The first one is odd so we start there\n            var even = false;\n            //get x1\n            var xi = a + dx;\n            //the coefficient\n            var c, k;\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\n            for (var i = 1; i < n; i++) {\n                c = even ? 2 : 4;\n                k = c * get_value(f, xi, 1);\n                retval += k;\n                //flip the even flag\n                even = !even;\n                //increment xi\n                xi += dx;\n            }\n\n            //add xn\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\n\n        },\n        /**\n         * https://github.com/scijs/integrate-adaptive-simpson\n         * @param {Function} f - the function being integrated\n         * @param {Number} a - lower bound\n         * @param {Number} b - upper bound\n         * @param {Number} tol - step width\n         * @param {Number} maxdepth\n         * @returns {Number}\n         */\n        num_integrate: function (f, a, b, tol, maxdepth) {\n            if (maxdepth < 0)\n                throw new Error('max depth cannot be negative');\n\n            /* This algorithm adapted from pseudocode in:*/\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n                if (state.nanEncountered) {\n                    return NaN;\n                }\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n                h = b - a;\n                f1 = f(a + h * 0.25);\n                f2 = f(b - h * 0.25);\n                /* Simple check for NaN:*/\n                if (isNaN(f1)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n                /* Simple check for NaN:*/\n                if (isNaN(f2)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n\n                sl = h * (fa + 4 * f1 + fm) / 12;\n                sr = h * (fm + 4 * f2 + fb) / 12;\n                s2 = sl + sr;\n                err = (s2 - V0) / 15;\n\n                if (state.maxDepthCount > 1000 * maxdepth) {\n                    return;\n                }\n\n\n                if (depth > maxdepth) {\n                    state.maxDepthCount++;\n                    return s2 + err;\n                }\n                else if (Math.abs(err) < tol) {\n                    return s2 + err;\n                }\n                else {\n                    m = a + h * 0.5;\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n                    if (isNaN(V1)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n                    if (isNaN(V2)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n\n                    return V1 + V2;\n                }\n            }\n\n            function integrate(f, a, b, tol, maxdepth) {\n                var state = {\n                    maxDepthCount: 0,\n                    nanEncountered: false\n                };\n\n                if (tol === undefined) {\n                    tol = 1e-9;\n                }\n                if (maxdepth === undefined) {\n                    /*Issue #458 - This was lowered because of performance issues. */\n                    /*This was suspected from before but is now confirmed with this issue*/\n                    maxdepth = 45;\n                }\n\n                var fa = f(a);\n                var fm = f(0.5 * (a + b));\n                var fb = f(b);\n\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n                if (state.maxDepthCount > 0) {\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n                }\n\n                if (state.nanEncountered) {\n                    throw new Error('Function does not converge over interval!');\n                }\n\n                return result;\n            }\n            var retval;\n\n            try {\n                retval = integrate(f, a, b, tol, maxdepth);\n            }\n            catch (e) {\n                /*fallback to non-adaptive*/\n                return Math2.simpson(f, a, b);\n            }\n            return nround(retval, 12);\n        },\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\n        //CosineIntegral\n        Ci: function (x) {\n            var n = 20,\n                    /*roughly Euler–Mascheroni*/\n                    g = 0.5772156649015329, \n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                /*cache 2n*/\n                var n2 = 2 * i; \n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\n            }\n            return Math.log(x) + g + sum;\n        },\n        /*SineIntegral*/\n        Si: function (x) {\n            var n = 20,\n                    sum = 0;\n            for (var i = 0; i < n; i++) {\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\n            }\n            return sum;\n        },\n        /*ExponentialIntegral*/\n        Ei: function (x) {\n            if (Number(x) === 0)\n                return -Infinity;\n            var n = 30,\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\n            }\n            return g + Math.abs(Math.log(x)) + sum;\n        },\n        /*Hyperbolic Sine Integral*/\n        /*http://mathworld.wolfram.com/Shi.html*/\n        Shi: function (x) {\n            var n = 30,\n                    sum = 0,\n                    k, t;\n            for (var i = 0; i < n; i++) {\n                k = 2 * i;\n                t = k + 1;\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n            }\n            return sum;\n        },\n        /*the cosine integral function*/\n        Chi: function (x) {\n            var dx, g, f;\n            dx = 0.001;\n            g = 0.5772156649015328606;\n            f = function (t) {\n                return (Math.cosh(t) - 1) / t;\n            };\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n        },\n        /*the log integral*/\n        Li: function (x) {\n            return Math2.Ei(Math2.bigLog(x));\n        },\n        /*the gamma incomplete function*/\n        gamma_incomplete: function (n, x) {\n            var t = n - 1,\n                    sum = 0,\n                    x = x || 0;\n            for (var i = 0; i < t; i++) {\n                sum += Math.pow(x, i) / Math2.factorial(i);\n            }\n            return Math2.factorial(t) * Math.exp(-x) * sum;\n        },\n        /*\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\n         * if x > 0 then 1\n         * if x == 0 then 1/2\n         * if x < 0 then 0\n         */\n        step: function (x) {\n            if (x > 0)\n                return 1;\n            if (x < 0)\n                return 0;\n            return 0.5;\n        },\n        /*\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\n         * if |x| > 1/2 then 0\n         * if |x| == 1/2 then 1/2\n         * if |x| < 1/2 then 1\n         */\n        rect: function (x) {\n            var x = Math.abs(x);\n            if (x === 0.5)\n                return x;\n            if (x > 0.5)\n                return 0;\n            return 1;\n        },\n        /*\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\n         * if x == 0 then 1\n         * otherwise sin(x)/x\n         */\n        sinc: function (x) {\n            if (x.equals(0))\n                return 1;\n            return Math.sin(x) / x;\n        },\n        /*\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\n         * if |x| >= 1 then 0\n         * if |x| < then 1-|x|\n         */\n        tri: function (x) {\n            x = Math.abs(x);\n            if (x >= 1)\n                return 0;\n            return 1 - x;\n        },\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\n        nthroot: function (A, n) {\n            /*make sure the input is of type Frac*/\n            if (!(A instanceof Frac))\n                A = new Frac(A.toString());\n            if (!(n instanceof Frac))\n                n = new Frac(n.toString());\n            if (n.equals(1))\n                return A;\n            /*begin algorithm*/\n            var xk = A.divide(new Frac(2)); /*x0*/\n            var e = new Frac(1e-15);\n            var dk, dk0, d0;\n            var a = n.clone().invert(),\n                    b = n.subtract(new Frac(1));\n            do {\n                var powb = Math2.bigpow(xk, b);\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n                dk = Frac.create(dk_dec);\n                if (d0)\n                    break;\n\n                xk = xk.add(dk);\n                /*check to see if there's no change from the last xk*/\n                var dk_dec = dk.toDecimal();\n                d0 = dk0 ? dk0 === dk_dec : false;\n                dk0 = dk_dec;\n            }\n            while (dk.abs().gte(e))\n\n            return xk;\n        },\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n        /*Just the square root function but big :)*/\n        sqrt: function (n) {\n            if (!(n instanceof Frac))\n                n = new Frac(n);\n            var xn, d, ld, same_delta;\n            var c = 0; /*counter*/\n            var done = false;\n            var delta = new Frac(1e-20);\n            xn = n.divide(new Frac(2));\n            var safety = 1000;\n            do {\n                /*break if we're not converging*/\n                if (c > safety)\n                    throw new Error('Unable to calculate square root for ' + n);\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\n                xn = new Frac(xn.decimal(30));\n                /*get the difference from the true square*/\n                d = n.subtract(xn.multiply(xn));\n                /*if the square of the calculated number is close enough to the number*/\n                /*we're getting the square root or the last delta was the same as the new delta*/\n                /*then we're done*/\n                same_delta = ld ? ld.equals(d) : false;\n                if (d.clone().abs().lessThan(delta) || same_delta)\n                    done = true;\n                /*store the calculated delta*/\n                ld = d;\n                c++; /*increase the counter*/\n            }\n            while (!done)\n\n            return xn;\n        }\n    };\n    //link the Math2 object to Settings.FUNCTION_MODULES\n    Settings.FUNCTION_MODULES.push(Math2);\n    reserveNames(Math2); //reserve the names in Math2\n\n\n//Polyfills ==================================================================== \n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n    Math.sign = Math.sign || function (x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return x;\n        }\n        return x > 0 ? 1 : -1;\n    };\n\n    Math.cosh = Math.cosh || function (x) {\n        var y = Math.exp(x);\n        return (y + 1 / y) / 2;\n    };\n\n    Math.sech = Math.sech || function (x) {\n        return 1 / Math.cosh(x);\n    };\n\n    Math.csch = Math.csch || function (x) {\n        return 1 / Math.sinh(x);\n    };\n\n    Math.coth = Math.coth || function (x) {\n        return 1 / Math.tanh(x);\n    };\n\n    Math.sinh = Math.sinh || function (x) {\n        var y = Math.exp(x);\n        return (y - 1 / y) / 2;\n    };\n\n    Math.tanh = Math.tanh || function (x) {\n        if (x === Infinity) {\n            return 1;\n        }\n        else if (x === -Infinity) {\n            return -1;\n        }\n        else {\n            var y = Math.exp(2 * x);\n            return (y - 1) / (y + 1);\n        }\n    };\n\n    Math.asinh = Math.asinh || function (x) {\n        if (x === -Infinity) {\n            return x;\n        }\n        else {\n            return Math.log(x + Math.sqrt(x * x + 1));\n        }\n    };\n\n    Math.acosh = Math.acosh || function (x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n    };\n\n    Math.atanh = Math.atanh || function (x) {\n        return Math.log((1 + x) / (1 - x)) / 2;\n    };\n\n    Math.log10 = Math.log10 || function (x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n\n    Math.trunc = Math.trunc || function (x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n\n//Global functions ============================================================= \n    /**\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector. \n     * If all else fails it *assumes* the object has a toString method and will call that.\n     * \n     * @param {Object} obj\n     * @param {String} option get is as a hash \n     * @param {int} useGroup\n     * @returns {String}\n     */\n    function text(obj, option, useGroup) {\n        var asHash = option === 'hash',\n                //whether to wrap numbers in brackets\n                wrapCondition = undefined,\n                opt = asHash ? undefined : option;\n\n        function toString(obj) {\n            switch (option)\n            {\n                case 'decimals':\n                case 'decimal':\n                    wrapCondition = wrapCondition || function (str) {\n                        return false;\n                    };\n                    return obj.valueOf();\n                case 'recurring':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf(\"'\") !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var negative = false;\n                    var m = Number(parts[0]);\n                    if (m < 0) {\n                        m = -m;\n                        negative = true;\n                    }\n                    var n = Number(parts[1]);\n                    if (!n)\n                        n = 1;\n\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\n                    quotient = quotient.toString() + \".\";\n                    while (c && c < n) {\n                        c *= 10;\n                        quotient += \"0\";\n                    }\n                    var digits = \"\", passed = [], i = 0;\n                    while (true) {\n                        if (typeof passed[c] !== 'undefined') {\n                            var prefix = digits.slice(0, passed[c]),\n                                    cycle = digits.slice(passed[c]),\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n                        }\n                        var q = Math.floor(c / n), r = c - q * n;\n                        passed[c] = i;\n                        digits += q.toString();\n                        i += 1;\n                        c = 10 * r;\n                    }\n                case 'mixed':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var numer = new bigInt(parts[0]);\n                    var denom = new bigInt(parts[1]);\n                    if (denom.equals(0))\n                        denom = new bigInt(1);\n\n                    //return the quotient plus the remainder\n                    var divmod = numer.divmod(denom);\n                    var quotient = divmod.quotient;\n                    var remainder = divmod.remainder;\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\n                default:\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    return obj.toString();\n            }\n        }\n\n        //if the object is a symbol\n        if (isSymbol(obj)) {\n            var multiplier = '',\n                    power = '',\n                    sign = '',\n                    group = obj.group || useGroup,\n                    value = obj.value;\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\n            if (!asHash) {\n                //use asDecimal to get the object back as a decimal\n                var om = toString(obj.multiplier);\n                if (om == '-1') {\n                    sign = '-';\n                    om = '1';\n                }\n                //only add the multiplier if it's not 1\n                if (om != '1')\n                    multiplier = om;\n                //use asDecimal to get the object back as a decimal\n                var p = obj.power ? toString(obj.power) : '';\n                //only add the multiplier \n                if (p != '1') {\n                    //is it a symbol\n                    if (isSymbol(p)) {\n                        power = text(p, opt);\n                    }\n                    else {\n                        power = p;\n                    }\n                }\n            }\n\n            switch (group) {\n                case N:\n                    multiplier = '';\n\n                    //if it's numerical then all we need is the multiplier\n                    value = obj.multiplier == '-1' ? '1' : toString(obj.multiplier);\n                    power = '';\n                    break;\n                case PL:\n                    value = obj.collectSymbols(text, opt).join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CP:\n                    value = obj.collectSymbols(text, opt).join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CB:\n                    value = obj.collectSymbols(function (symbol) {\n                        var g = symbol.group;\n                        //both groups will already be in brackets if their power is greater than 1\n                        //so skip it.\n                        if ((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\n                            return inBrackets(text(symbol, opt));\n                        }\n                        return text(symbol, opt);\n                    }).join('*');\n                    break;\n                case EX:\n                    var pg = obj.previousGroup,\n                            pwg = obj.power.group;\n\n                    //PL are the exception. It's simpler to just collect and set the value\n                    if (pg === PL)\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n                    if (!(pg === N || pg === S || pg === FN) && !asHash) {\n                        value = inBrackets(value);\n                    }\n\n                    if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n                        power = inBrackets(power);\n                    }\n                    break;\n            }\n\n            if (group === FN) {\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n                    return text(symbol, opt);\n                }).join(','));\n            }\n            //TODO: Needs to be more efficient. Maybe. \n            if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n                var a = text(obj.args[0]);\n                var b = text(obj.args[1]);\n                if (obj.args[0].isComposite()) //preserve the brackets\n                    a = inBrackets(a);\n                if (obj.args[1].isComposite()) //preserve the brackets\n                    b = inBrackets(b);\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\n            }\n            //wrap the power since / is less than ^\n            //TODO: introduce method call isSimple\n            if (power && group !== EX && wrapCondition(power)) {\n                power = inBrackets(power);\n            }\n\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n            //by a multiplier and have to be in brackets to preserve the order of precedence\n            if (((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\n                    || !asHash && group === P && value == -1\n                    || obj.fname === PARENTHESIS) {\n\n                value = inBrackets(value);\n            }\n\n            var c = sign + multiplier;\n            if (multiplier && wrapCondition(multiplier))\n                c = inBrackets(c);\n\n            if (power < 0)\n                power = inBrackets(power);\n            if (multiplier)\n                c = c + '*';\n            if (power)\n                power = Settings.POWER_OPERATOR + power;\n\n            //this needs serious rethinking. Must fix\n            if (group === EX && value.charAt(0) === '-')\n                value = inBrackets(value);\n\n            var cv = c + value;\n\n            if (obj.parens)\n                cv = inBrackets(cv);\n\n            return cv + power;\n        }\n        else if (isVector(obj)) {\n            var l = obj.elements.length,\n                    c = [];\n            for (var i = 0; i < l; i++)\n                c.push(obj.elements[i].text(option));\n            return '[' + c.join(',') + ']';\n        }\n        else {\n            try {\n                return obj.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        }\n    }\n    /**\n     * Calculates prime factors for a number\n     * @param {int} num\n     * @returns {Array}\n     */\n\n    function primeFactors(num) {\n        if (isPrime(num))\n            return [num];\n        var l = num, i = 1, factors = [],\n                epsilon = 2.2204460492503130808472633361816E-16;\n        while (i < l) {\n            var quotient = num / i;\n            var whole = Math.floor(quotient);\n            var remainder = quotient - whole;\n            if (remainder <= epsilon && i > 1) {\n                if (PRIMES.indexOf(i) !== -1)\n                    PRIMES[i]=i;\n                factors.push(i);\n                l = whole;\n            }\n            i++;\n        }\n        \n        return factors.sort(function (a, b) {\n            return a - b;\n        });\n    };\n\n//Expression ===================================================================   \n    /** \n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and \n     * provides the user with some useful functions. If you want to provide the user with extra\n     * library functions then add them to this class's prototype.\n     * @param {Symbol} symbol\n     * @returns {Expression} wraps around the Symbol class\n     */\n    function Expression(symbol) {\n        //we don't want arrays wrapped\n        this.symbol = symbol;\n    }\n    /**\n     * Returns stored expression at index. For first index use 1 not 0.\n     * @param {bool} asType  \n     * @param {Integer} expression_number \n     */\n    Expression.getExpression = function (expression_number, asType) {\n        if (expression_number === 'last' || !expression_number)\n            expression_number = EXPRESSIONS.length;\n        if (expression_number === 'first')\n            expression_number = 1;\n        var index = expression_number - 1,\n                expression = EXPRESSIONS[index],\n                retval = expression ? new Expression(expression) : expression;\n        return retval;\n    };\n    Expression.prototype = {\n        /**\n         * Returns the text representation of the expression\n         * @param {String} opt - option of formatting numbers\n         * @param {Number} n The number of significant figures\n         * @returns {String}\n         */\n        text: function (opt, n) {\n            var round = typeof n === 'undefined';\n            n = n || 24; \n            opt = opt || 'decimals';\n            if (this.symbol.text_)\n                return this.symbol.text_(opt);\n            \n            if(this.symbol.group === N && (opt === 'decimals' || opt === 'decimal')) {\n                var txt = this.symbol.multiplier.toDecimal(n);\n                \n                //round as not to have a breaking change but only do so if no significant figures were specified\n                if(round && !isInt(txt)) \n                    txt = nround(txt, 19).toString();\n                return txt;\n            }\n            return text(this.symbol, opt);\n        },\n        /**\n         * Returns the latex representation of the expression\n         * @param {String} option - option for formatting numbers\n         * @returns {String}\n         */\n        latex: function (option) {\n            if (this.symbol.latex)\n                return this.symbol.latex(option);\n            return LaTeX.latex(this.symbol, option);\n        },\n        valueOf: function () {\n            return this.symbol.valueOf();\n        },\n\n        /**\n         * Evaluates the expression and tries to reduce it to a number if possible.\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\n         * Other than that it will just use it's own text and reparse\n         * @returns {Expression}\n         */\n        evaluate: function () {\n            var first_arg = arguments[0], expression, idx = 1;\n            //Enable getting of expressions using the % so for example %1 should get the first expression\n            if (typeof first_arg === 'string') {\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n            }\n            else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n                expression = first_arg.text();\n            }\n            else {\n                expression = this.symbol.text();\n                idx--;\n            }\n\n            var subs = arguments[idx] || {};\n\n            return new Expression(block('PARSE2NUMBER', function () {\n                return _.parse(expression, subs);\n            }, true));\n        },\n        /**\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of \n         * the default alphabetical order\n         * @param vars {Array}\n         */\n        buildFunction: function (vars) {\n            return Build.build(this.symbol, vars);\n        },\n        /**\n         * Checks to see if the expression is just a plain old number\n         * @returns {boolean}\n         */\n        isNumber: function () {\n            return isNumericSymbol(this.symbol);\n        },\n        /**\n         * Checks to see if the expression is infinity\n         * @returns {boolean}\n         */\n        isInfinity: function () {\n            return Math.abs(this.symbol.multiplier) === Infinity;\n        },\n        /**\n         * Returns all the variables in the expression\n         * @returns {Array}\n         */\n        variables: function () {\n            return variables(this.symbol);\n        },\n\n        toString: function () {\n            try {\n                if (isArray(this.symbol))\n                    return '[' + this.symbol.toString() + ']';\n                return this.symbol.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        },\n        //forces the symbol to be returned as a decimal\n        toDecimal: function (prec) {\n            Settings.precision = prec;\n            var dec = text(this.symbol, 'decimals');\n            Settings.precision = undefined;\n            return dec;\n        },\n        //checks to see if the expression is a fraction\n        isFraction: function () {\n            return isFraction(this.symbol);\n        },\n        //checks to see if the symbol is a multivariate polynomial\n        isPolynomial: function () {\n            return this.symbol.isPoly();\n        },\n        //performs a substitution\n        sub: function (symbol, for_symbol) {\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n        },\n        operation: function (otype, symbol) {\n            if (isExpression(symbol))\n                symbol = symbol.symbol;\n            else if (!isSymbol(symbol))\n                symbol = _.parse(symbol);\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n        },\n        add: function (symbol) {\n            return this.operation('add', symbol);\n        },\n        subtract: function (symbol) {\n            return this.operation('subtract', symbol);\n        },\n        multiply: function (symbol) {\n            return this.operation('multiply', symbol);\n        },\n        divide: function (symbol) {\n            return this.operation('divide', symbol);\n        },\n        pow: function (symbol) {\n            return this.operation('pow', symbol);\n        },\n        expand: function () {\n            return new Expression(_.expand(this.symbol));\n        },\n        each: function (callback, i) {\n            if (this.symbol.each)\n                this.symbol.each(callback, i);\n            else if (isArray(this.symbol)) {\n                for (var i = 0; i < this.symbol.length; i++)\n                    callback.call(this.symbol, this.symbol[i], i);\n            }\n            else\n                callback.call(this.symbol);\n        },\n        eq: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = _.subtract(this.symbol.clone(), value);\n                return d.equals(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        lt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.lessThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.greaterThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gte: function (value) {\n            return this.gt(value) || this.eq(value);\n        },\n        lte: function (value) {\n            return this.lt(value) || this.eq(value);\n        },\n\n        numerator: function () {\n            return new Expression(this.symbol.getNum());\n        },\n        denominator: function () {\n            return new Expression(this.symbol.getDenom());\n        },\n        hasFunction: function(f) {\n            return this.symbol.containsFunction(f);\n        },\n        contains: function(variable) {\n            return this.symbol.contains(variable);\n        }\n    };\n    //Aliases\n    Expression.prototype.toTeX = Expression.prototype.latex;\n\n//Scientific ===================================================================  \n    function Scientific(num) {\n        if (!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if (num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        } else {\n            this.sign = 1;\n        }\n\n        if (Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        } else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function (num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function (num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w + d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location - (zeroes + 1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function (num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if (num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num + 1);\n                //get the next two\n                var next_two = this.coeff.substring(num + 1, num + 3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if (next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded + ed;\n            }\n\n            return n;\n        },\n        copy: function () {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function (n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n            return (this.sign === -1 ? '-' : '') + coeff + 'e' + this.exponent;\n        }\n    };\n\n    Scientific.isScientific = function (num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function (num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function (num) {\n        var match = num.match(/^0*(.*)$/);\n        return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function (num) {\n        var match = num.match(/0*$/);\n        return match ? num.substring(0, num.length - match[0].length) : '';\n    };\n    Scientific.round = function (c, n) {\n        var coeff = nround(c, n);\n        var m = String(coeff).split('.').pop();\n        var d = n - m.length;\n        //if we're asking for more significant figures\n        if (d > 0) {\n            coeff = coeff + (new Array(d + 1).join(0));\n        }\n        return coeff;\n    };\n\n//Scientific ===================================================================\n    /*\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n     */\n\n    function Scientific(num) {\n        if(!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if(num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        }\n        else {\n            this.sign = 1;\n        }\n\n        if(Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        }\n        else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function(num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function(num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || ''; \n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w+d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location-(zeroes+1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0)+'.'+(coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function(num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if(num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num+1);\n                //get the next two\n                var next_two = this.coeff.substring(num+1, num+3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if(next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded+ed;\n            }\n\n            return n;\n        },\n        copy: function() {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function(n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n            return (this.sign === -1 ? '-' : '' )+coeff+'e'+this.exponent;\n        }\n    };\n\n    Scientific.isScientific = function(num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function(num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    }; \n    Scientific.removeLeadingZeroes = function(num) {\n      var match = num.match(/^0*(.*)$/);\n      return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function(num) {\n      var match = num.match(/0*$/);\n      return match ? num.substring(0, num.length-match[0].length) : '';\n    };\n\n\n//Frac =========================================================================    \n    function Frac(n) {\n        if (n instanceof Frac)\n            return n;\n        if (n === undefined)\n            return this;\n        try {\n            if (isInt(n)) {\n                try {\n                    this.num = bigInt(n);\n                    this.den = bigInt(1);\n                }\n                catch (e) {\n                    return Frac.simple(n);\n                }\n            }\n            else {\n                var frac = Fraction.convert(n);\n                this.num = new bigInt(frac[0]);\n                this.den = new bigInt(frac[1]);\n            }\n        }\n        catch (e) {\n            return Frac.simple(n);\n        }\n\n    }\n    //safe to use with negative numbers or other types\n    Frac.create = function (n) {\n        if (n instanceof Frac)\n            return n;\n        n = n.toString();\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\n        if (is_neg)\n            n = n.substr(1, n.length - 1); //remove the sign\n        var frac = new Frac(n);\n        //put the sign back\n        if (is_neg)\n            frac.negate();\n        return frac;\n    };\n    Frac.isFrac = function (o) {\n        return (o instanceof Frac);\n    };\n    Frac.quick = function (n, d) {\n        var frac = new Frac();\n        frac.num = new bigInt(n);\n        frac.den = new bigInt(d);\n        return frac;\n    };\n    Frac.simple = function (n) {\n        var nstr = String(scientificToDecimal(n)),\n                m_dc = nstr.split('.'),\n                num = m_dc.join(''),\n                den = 1,\n                l = (m_dc[1] || '').length;\n        for (var i = 0; i < l; i++)\n            den += '0';\n        var frac = Frac.quick(num, den);\n        return frac.simplify();\n    };\n    Frac.prototype = {\n        multiply: function (m) {\n            if (this.isOne()) {\n                return m.clone();\n            }\n            if (m.isOne()) {\n                return this.clone();\n            }\n\n            var c = this.clone();\n            c.num = c.num.multiply(m.num);\n            c.den = c.den.multiply(m.den);\n\n            return c.simplify();\n        },\n        divide: function (m) {\n            if (m.equals(0))\n                throw new DivisionByZero('Division by zero not allowed!');\n            return this.clone().multiply(m.clone().invert()).simplify();\n        },\n        subtract: function (m) {\n            return this.clone().add(m.clone().neg());\n        },\n        neg: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        add: function (m) {\n            var n1 = this.den, n2 = m.den, c = this.clone();\n            var a = c.num, b = m.num;\n            if (n1.equals(n2)) {\n                c.num = a.add(b);\n            }\n            else {\n                c.num = a.multiply(n2).add(b.multiply(n1));\n                c.den = n1.multiply(n2);\n            }\n\n            return c.simplify();\n        },\n        mod: function (m) {\n            var a = this.clone(),\n                    b = m.clone();\n            //make their denominators even and return the mod of their numerators\n            a.num = a.num.multiply(b.den);\n            a.den = a.den.multiply(b.den);\n            b.num = b.num.multiply(this.den);\n            b.den = b.den.multiply(this.den);\n            a.num = a.num.mod(b.num);\n            return a.simplify();\n        },\n        simplify: function () {\n            var gcd = bigInt.gcd(this.num, this.den);\n\n            this.num = this.num.divide(gcd);\n            this.den = this.den.divide(gcd);\n            return this;\n        },\n        clone: function () {\n            var m = new Frac();\n            m.num = new bigInt(this.num);\n            m.den = new bigInt(this.den);\n            return m;\n        },\n        decimal: function (prec) {\n            var sign = this.num.isNegative() ? '-' : '';\n            if (this.num.equals(this.den)) {\n                return '1';\n            }\n            //go plus one for rounding\n            prec = prec || Settings.PRECISION;\n            prec++;\n            var narr = [],\n                    n = this.num.abs(),\n                    d = this.den;\n            for (var i = 0; i < prec; i++) {\n                var w = n.divide(d), //divide out whole\n                        r = n.subtract(w.multiply(d)); //get remainder\n\n                narr.push(w);\n                if (r.equals(0))\n                    break;\n                n = r.times(10); //shift one dec place\n            }\n            var whole = narr.shift();\n            if (narr.length === 0) {\n                return sign + whole.toString();\n            }\n\n            if (i === prec) {\n                var lt = [];\n                //get the last two so we can round it\n                for (var i = 0; i < 2; i++)\n                    lt.unshift(narr.pop());\n                //put the last digit back by rounding the last two\n                narr.push(Math.round(lt.join('.')));\n            }\n\n            var dec = whole.toString() + '.' + narr.join('');\n            return sign + dec;\n        },\n        toDecimal: function (prec) {\n            if (prec || Settings.PRECISION) {\n                return this.decimal(prec);\n            }\n            else \n                return this.num / this.den;\n        },\n        qcompare: function (n) {\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\n        },\n        equals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].equals(q[1]);\n        },\n        absEquals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].abs().equals(q[1]);\n        },\n        //lazy check to be fixed. Sufficient for now but will cause future problems\n        greaterThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].gt(q[1]);\n        },\n        gte: function (n) {\n            return this.greaterThan(n) || this.equals(n);\n        },\n        lte: function (n) {\n            return this.lessThan(n) || this.equals(n);\n        },\n        lessThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].lt(q[1]);\n        },\n        isInteger: function () {\n            return this.den.equals(1);\n        },\n        negate: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        invert: function () {\n            var t = this.den;\n            //why invert 0/1? It'll become 1/0 and that's a lie.\n            if (!this.num.equals(0)) {\n                var isnegative = this.num.isNegative();\n                this.den = this.num.abs();\n                this.num = t;\n                if (isnegative)\n                    this.num = this.num.multiply(-1);\n            }\n\n            return this;\n        },\n        isOne: function () {\n            return this.num.equals(1) && this.den.equals(1);\n        },\n        sign: function () {\n            return this.num.isNegative() ? -1 : 1;\n        },\n        abs: function () {\n            this.num = this.num.abs();\n            return this;\n        },\n        gcd: function (f) {\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n        },\n        toString: function () {\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n        },\n        valueOf: function () {\n//            if(this.num == 24) throw new Error(999)\n            if (Settings.USE_BIG)\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n            return this.num / this.den;\n        },\n        isNegative: function () {\n            return this.toDecimal() < 0;\n        }\n    };\n\n//Symbol =======================================================================\n    /**\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group. \n     * All symbols except for \"numbers (group N)\" have a power. \n     * @class Primary data type for the Parser. \n     * @param {String} obj \n     * @returns {Symbol}\n     */\n    function Symbol(obj) {\n        var isInfinity = obj === 'Infinity';\n        //this enables the class to be instantiated without the new operator\n        if (!(this instanceof Symbol)) {\n            return new Symbol(obj);\n        }\n        ;\n        //define numeric symbols\n        if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj)) {\n            this.group = N;\n            this.value = CONST_HASH;\n            this.multiplier = new Frac(obj);\n        }\n        //define symbolic symbols\n        else {\n            this.group = S;\n            validateName(obj);\n            this.value = obj;\n            this.multiplier = new Frac(1);\n            this.imaginary = obj === Settings.IMAGINARY;\n            this.isInfinity = isInfinity;\n        }\n\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\n        //Although this is still redundant in constants, it simplifies the logic in\n        //other parts so we'll keep it\n        this.power = new Frac(1);\n\n        // Added to silence the strict warning.\n        return this;\n    }\n    /**\n     * Returns vanilla imaginary symbol\n     * @returns {Symbol}\n     */\n    Symbol.imaginary = function () {\n        var s = new Symbol(Settings.IMAGINARY);\n        s.imaginary = true;\n        return s;\n    };\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity \n     * @returns {Symbol} \n     */\n    Symbol.infinity = function (negative) {\n        var v = new Symbol('Infinity');\n        if (negative === -1)\n            v.negate();\n        return v;\n    };\n    Symbol.shell = function (group, value) {\n        var symbol = new Symbol(value);\n        symbol.group = group;\n        symbol.symbols = {};\n        symbol.length = 0;\n        return symbol;\n    };\n    //sqrt(x) -> x^(1/2)\n    Symbol.unwrapSQRT = function (symbol, all) {\n        var p = symbol.power;\n        if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n            var t = symbol.args[0].clone();\n            t.power = t.power.multiply(new Frac(1 / 2));\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\n            symbol = t;\n            if (all)\n                symbol.power = p.multiply(new Frac(1 / 2));\n        }\n\n        return symbol;\n    };\n    Symbol.hyp = function (a, b) {\n        a = a || new Symbol(0);\n        b = b || new Symbol(0);\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n    };\n    //converts to polar form array\n    Symbol.toPolarFormArray = function (symbol) {\n        var re, im, r, theta;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        r = Symbol.hyp(re, im);\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n        return [r, theta];\n    };\n    //removes parentheses\n    Symbol.unwrapPARENS = function (symbol) {\n        if (symbol.fname === '') {\n            var r = symbol.args[0];\n            r.power = r.power.multiply(symbol.power);\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\n            if (symbol.fname === '')\n                return Symbol.unwrapPARENS(r);\n            return r;\n        }\n        return symbol;\n    };\n    //quickly creates a Symbol\n    Symbol.create = function (value, power) {\n        power = power === undefined ? 1 : power;\n        return _.parse('(' + value + ')^(' + power + ')');\n    };\n    Symbol.prototype = {\n        isSimple: function () {\n            return this.power.equals(1) && this.multiplier.equals(1);\n        },\n        //returns a clone.\n        powSimp: function () {\n            if (this.group === CB) {\n                var powers = [],\n                        sign = this.multiplier.sign();\n                this.each(function (x) {\n                    var p = x.power;\n                    //why waste time if I can't do anything anyway\n                    if (isSymbol(p) || p.equals(1))\n                        return this.clone();\n                    powers.push(p);\n                });\n                var min = new Frac(arrayMin(powers));\n\n                //handle the coefficient\n                //handle the multiplier\n                var sign = this.multiplier.sign(),\n                        m = this.multiplier.clone().abs(),\n                        mfactors = Math2.ifactor(m);\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n                //we can then reduce it to 2*3*5*(15)^2 \n                var out_ = new Frac(1);\n                var in_ = new Frac(1);\n\n                for (var x in mfactors) {\n                    var n = new Frac(mfactors[x]);\n                    if (!n.lessThan(min)) {\n                        n = n.divide(min).subtract(new Frac(1));\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n                    }\n\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n                }\n                var t = new Symbol(in_);\n                this.each(function (x) {\n                    x = x.clone();\n                    x.power = x.power.divide(min);\n                    t = _.multiply(t, x);\n                });\n\n                var xt = _.symfunction(PARENTHESIS, [t]);\n                xt.power = min;\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\n\n                return xt;\n            }\n            return this.clone();\n        },\n        /**\n         * Checks to see if two functions are of equal value\n         * @param {Symbol} symbol\n         */\n        equals: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.value === symbol.value && this.power.equals(symbol.power)\n                    && this.multiplier.equals(symbol.multiplier)\n                    && this.group === symbol.group;\n        },\n        abs: function() {\n            var e = this.clone();\n            e.multiplier.abs();\n            return e;\n        },\n        // Greater than\n        gt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Greater than\n        gte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Less than\n        lt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        // Less than\n        lte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        /**\n         * Because nerdamer doesn't group symbols by polynomials but \n         * rather a custom grouping method, this has to be\n         * reinserted in order to make use of most algorithms. This function\n         * checks if the symbol meets the criteria of a polynomial.\n         * @param {bool} multivariate\n         * @returns {boolean}\n         */\n        isPoly: function (multivariate) {\n            var g = this.group,\n                    p = this.power;\n            //the power must be a integer so fail if it's not\n            if (!isInt(p) || p < 0)\n                return false;\n            //constants and first orders\n            if (g === N || g === S || this.isConstant(true))\n                return true;\n            var vars = variables(this);\n            if (g === CB && vars.length === 1) {\n                //the variable is assumed the only one that was found\n                var v = vars[0];\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\n                if (!v)\n                    return true;\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    //sqrt(x)\n                    if (sym.group === FN && !sym.args[0].isConstant())\n                        return false;\n                    if (!sym.contains(v) && !sym.isConstant(true))\n                        return false;\n                }\n                return true;\n            }\n            //PL groups. These only fail if a power is not an int\n            //this should handle cases such as x^2*t\n            if (this.isComposite() || g === CB && multivariate) {\n                //fail if we're not checking for multivariate polynomials\n                if (!multivariate && vars.length > 1)\n                    return false;\n                //loop though the symbols and check if they qualify\n                for (var x in this.symbols) {\n                    //we've already the symbols if we're not checking for multivariates at this point\n                    //so we check the sub-symbols\n                    if (!this.symbols[x].isPoly(multivariate))\n                        return false;\n                }\n                return true;\n            }\n            else\n                return false;\n\n            /*\n             //all tests must have passed so we must be dealing with a polynomial\n             return true;\n             */\n        },\n        //removes the requested variable from the symbol and returns the remainder\n        stripVar: function (x, exclude_x) {\n            var retval;\n            if ((this.group === PL || this.group === S) && this.value === x)\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\n            else if (this.group === CB && this.isLinear()) {\n                retval = new Symbol(1);\n                this.each(function (s) {\n                    if (!s.contains(x, true))\n                        retval = _.multiply(retval, s.clone());\n                });\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\n            }\n            else if (this.group === CP && !this.isLinear()) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === CP && this.isLinear()) {\n                retval = new Symbol(0);\n                this.each(function (s) {\n                    if (!s.contains(x)) {\n                        var t = s.clone();\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\n                        retval = _.add(retval, t);\n                    }\n                });\n                //BIG TODO!!! It doesn't make much sense\n                if (retval.equals(0))\n                    retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === EX && this.power.contains(x, true)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === FN && this.contains(x)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else\n                //wth? This should technically be the multiplier. \n                //Unfortunately this method wasn't very well thought out :`(.   \n                //should be: retval = new Symbol(this.multiplier);\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n                //this will break a bunch of unit tests so be ready to for the long haul\n                retval = this.clone();\n\n\n            return retval;\n        },\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a]. \n        toArray: function (v, arr) {\n            arr = arr || {\n                arr: [],\n                add: function (x, idx) {\n                    var e = this.arr[idx];\n                    this.arr[idx] = e ? _.add(e, x) : x;\n                }\n            };\n            var g = this.group;\n\n            if (g === S && this.contains(v)) {\n                arr.add(new Symbol(this.multiplier), this.power);\n            }\n            else if (g === CB) {\n                var a = this.stripVar(v),\n                        x = _.divide(this.clone(), a.clone());\n                var p = x.isConstant() ? 0 : x.power;\n                arr.add(a, p);\n            }\n            else if (g === PL && this.value === v) {\n                this.each(function (x, p) {\n                    arr.add(x.stripVar(v), p);\n                });\n            }\n            else if (g === CP) {\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n                //each case is handled above\n                this.each(function (x) {\n                    x.toArray(v, arr);\n                });\n            }\n            else if (this.contains(v)) {\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\n            }\n            else {\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\n            }\n            //fill the holes\n            arr = arr.arr; //keep only the array since we don't need the object anymore\n            for (var i = 0; i < arr.length; i++)\n                if (!arr[i])\n                    arr[i] = new Symbol(0);\n            return arr;\n        },\n        //checks to see if a symbol contans a function\n        hasFunc: function (v) {\n            var fn_group = this.group === FN || this.group === EX;\n            if (fn_group && !v || fn_group && this.contains(v))\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].hasFunc(v))\n                        return true;\n                }\n            }\n            return false;\n        },\n        sub: function (a, b) {\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\n            if (a.group === N || a.group === P)\n                err('Cannot substitute a number. Must be a variable');\n            var same_pow = false,\n                    a_is_unit_multiplier = a.multiplier.equals(1),\n                    m = this.multiplier.clone(),\n                    retval;\n            /* \n             * In order to make the substitution the bases have to first match take\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n             * In both cases the first condition is that the bases match so we begin there\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\n             */\n            if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n                //we cleared the first hurdle but a subsitution may not be possible just yet\n                if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n                    if (a.isLinear()) {\n                        retval = b;\n                    }\n                    else if (a.power.equals(this.power)) {\n                        retval = b;\n                        same_pow = true;\n                    }\n                    if (a.multiplier.equals(this.multiplier))\n                        m = new Frac(1);\n                }\n            }\n            //the next thing is to handle CB\n            else if (this.group === CB || this.previousGroup === CB) {\n                retval = new Symbol(1);\n                this.each(function (x) {\n                    retval = _.multiply(retval, x.sub(a, b));\n                });\n            }\n            else if (this.isComposite()) {\n                if (a.isComposite() && this.isComposite() && this.isLinear() && a.isLinear()) {\n                    var find = function (stack, needle) {\n                        for (var x in stack.symbols) {\n                            var sym = stack.symbols[x];\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\n                            if (sym.isComposite() && find(sym, needle) || sym.equals(needle))\n                                return true;\n                        }\n                        return false;\n                    };\n                    //go fish\n                    for (var x in a.symbols) {\n                        if (!find(this, a.symbols[x]))\n                            return this.clone();\n                    }\n                    retval = _.add(_.subtract(this.clone(), a), b);\n                }\n                else {\n                    retval = new Symbol(0);\n                    this.each(function (x) {\n                        retval = _.add(retval, x.sub(a, b));\n                    });\n                }\n            }\n            else if (this.group === EX) {\n                // the parsed value could be a function so parse and sub\n                retval = _.parse(this.value).sub(a, b);\n            }\n            else if (this.group === FN) {\n                var nargs = [];\n                for (var i = 0; i < this.args.length; i++) {\n                    var arg = this.args[i];\n                    if (!isSymbol(arg))\n                        arg = _.parse(arg);\n                    nargs.push(arg.sub(a, b));\n                }\n                retval = _.symfunction(this.fname, nargs);\n            }\n            //if we did manage a substitution\n            if (retval) {\n                if (!same_pow) {\n                    //substitute the power\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\n                    //now raise the symbol to that power\n                    retval = _.pow(retval, p);\n                }\n\n                //transfer the multiplier\n                retval.multiplier = retval.multiplier.multiply(m);\n                //done\n                return retval;\n            }\n            //if all else fails\n            return this.clone();\n        },\n        isMonomial: function () {\n            if (this.group === S)\n                return true;\n            if (this.group === CB) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].group !== S)\n                        return false;\n            }\n            else\n                return false;\n            return true;\n        },\n        isPi: function () {\n            return this.group === S && this.value === 'pi';\n        },\n        sign: function () {\n            return this.multiplier.sign();\n        },\n        isE: function () {\n            return this.value === 'e';\n        },\n        isSQRT: function () {\n            return this.fname === SQRT;\n        },\n        isConstant: function (check_all, check_symbols) {\n            if(check_symbols && this.group === CB) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].isConstant(true))\n                        return true;\n                }\n            }\n            \n            if (check_all === 'all' && (this.isPi() || this.isE()))\n                return true;\n            \n            if (check_all && this.group === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (!this.args[i].isConstant(check_all))\n                        return false;\n                }\n                return true;\n            }\n            \n            if(check_all)\n                return isNumericSymbol(this);\n            return this.value === CONST_HASH;\n        },\n        //the symbols is imaginary if \n        //1. n*i\n        //2. a+b*i\n        //3. a*i\n        isImaginary: function () {\n            if (this.imaginary)\n                return true;\n            else if (this.symbols) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].isImaginary())\n                        return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the real part of a symbol\n         * @returns {Symbol}\n         */\n        realpart: function () {\n            if (this.isConstant()) {\n                return this.clone();\n            }\n            else if (this.imaginary)\n                return new Symbol(0);\n            else if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.realpart());\n                });\n                return retval;\n            }\n            else if (this.isImaginary())\n                return new Symbol(0);\n            return this.clone();\n        },\n        /*\n         * Return imaginary part of a symbol\n         * @returns {Symbol}\n         */\n        imagpart: function () {\n            if (this.group === S && this.isImaginary())\n                return new Symbol(this.multiplier);\n            if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.imagpart());\n                });\n                return retval;\n            }\n            if (this.group === CB)\n                return this.stripVar(Settings.IMAGINARY);\n            return new Symbol(0);\n        },\n        isInteger: function () {\n            return this.isConstant() && this.multiplier.isInteger();\n        },\n        isLinear: function (wrt) {\n            if (wrt) {\n                if (this.isConstant())\n                    return true;\n                if (this.group === S) {\n                    if (this.value === wrt)\n                        return this.power.equals(1);\n                    else\n                        return true;\n                }\n\n                if (this.isComposite() && this.power.equals(1)) {\n                    for (var x in this.symbols) {\n                        if (!this.symbols[x].isLinear(wrt))\n                            return false;\n                    }\n                    return true;\n                }\n\n                if (this.group === CB && this.symbols[wrt])\n                    return this.symbols[wrt].isLinear(wrt);\n                return false;\n            }\n            else\n                return this.power.equals(1);\n        },\n        /**\n         * Checks to see if a symbol has a function by a specified name or within a specified list\n         * @param {String|String[]} names\n         * @returns {Boolean}\n         */\n        containsFunction: function (names) {\n            if (typeof names === 'string')\n                names = [names];\n            if (this.group === FN && names.indexOf(this.fname) !== -1)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].containsFunction(names))\n                        return true;\n                }\n            }\n            return false;\n        },\n        multiplyPower: function (p2) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n\n            var p1 = this.power;\n\n            if (this.group !== EX && p2.group === N) {\n                var p = p2.multiplier;\n                if (this.group === N && !p.isInteger()) {\n                    this.convert(P);\n                }\n\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n                if (this.group === P && isInt(this.power)) {\n                    //bring it back to an N\n                    this.value = Math.pow(this.value, this.power);\n                    this.toLinear();\n                    this.convert(N);\n                }\n            }\n            else {\n                if (this.group !== EX) {\n                    p1 = new Symbol(p1);\n                    this.convert(EX);\n                }\n                this.power = _.multiply(p1, p2);\n            }\n\n            return this;\n        },\n        setPower: function (p, retainSign) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n            if (this.group === EX && !isSymbol(p)) {\n                this.group = this.previousGroup;\n                delete this.previousGroup;\n                if (this.group === N) {\n                    this.multiplier = new Frac(this.value);\n                    this.value = CONST_HASH;\n                }\n                else\n                    this.power = p;\n            }\n            else {\n                var isSymbolic = false;\n                if (isSymbol(p)) {\n                    if (p.group === N) {\n                        //p should be the multiplier instead\n                        p = p.multiplier;\n\n                    }\n                    else {\n                        isSymbolic = true;\n                    }\n                }\n                var group = isSymbolic ? EX : P;\n                this.power = p;\n                if (this.group === N && group)\n                    this.convert(group, retainSign);\n            }\n\n            return this;\n        },\n        /**\n         * Checks to see if symbol is located in the denominator\n         * @returns {boolean}\n         */\n        isInverse: function () {\n            if (this.group === EX)\n                return (this.power.multiplier.lessThan(0));\n            return this.power < 0;\n        },\n        /**\n         * Make a duplicate of a symbol by copying a predefined list of items. \n         * The name 'copy' would probably be a more appropriate name.\n         * to a new symbol\n         * @param {Symbol} c \n         * @returns {Symbol}\n         */\n        clone: function (c) {\n            var clone = c || new Symbol(0),\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\n                    properties = [\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n                    l = properties.length, i;\n            if (this.symbols) {\n                clone.symbols = {};\n                for (var x in this.symbols) {\n                    clone.symbols[x] = this.symbols[x].clone();\n                }\n            }\n\n            for (i = 0; i < l; i++) {\n                if (this[properties[i]] !== undefined) {\n                    clone[properties[i]] = this[properties[i]];\n                }\n            }\n\n            clone.power = this.power.clone();\n            clone.multiplier = this.multiplier.clone();\n            //add back the flag to track if this symbol is a conversion symbol\n            if (this.isConversion)\n                clone.isConversion = this.isConversion;\n\n            if (this.isUnit)\n                clone.isUnit = this.isUnit;\n\n            return clone;\n        },\n        /**\n         * Converts a symbol multiplier to one.\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n         * @returns {Symbol}\n         */\n        toUnitMultiplier: function (keepSign) {\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n            this.multiplier.den = new bigInt(1);\n            return this;\n        },\n        /**\n         * Converts a Symbol's power to one.\n         * @returns {Symbol}\n         */\n        toLinear: function () {\n            this.setPower(new Frac(1));\n            return this;\n        },\n        /**\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n         * @param {Function} fn\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well \n         */\n        each: function (fn, deep) {\n            if (!this.symbols) {\n                fn.call(this, this, this.value);\n            }\n            else {\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    if (sym.group === PL && deep) {\n                        for (var y in sym.symbols) {\n                            fn.call(x, sym.symbols[y], y);\n                        }\n                    }\n                    else\n                        fn.call(this, sym, x);\n                }\n            }\n        },\n        /**\n         * A numeric value to be returned for Javascript. It will try to \n         * return a number as far a possible but in case of a pure symbolic\n         * symbol it will just return its text representation\n         * @returns {String|Number}\n         */\n        valueOf: function () {\n            if (this.group === N)\n                return this.multiplier.valueOf();\n            else if (this.power === 0) {\n                return 1;\n            }\n            else if (this.multiplier === 0) {\n                return 0;\n            }\n            else {\n                return text(this, 'decimals');\n            }\n        },\n        /**\n         * Checks to see if a symbols has a particular variable within it.\n         * Pass in true as second argument to include the power of exponentials\n         * which aren't check by default.\n         * @example var s = _.parse('x+y+z'); s.contains('y');\n         * //returns true\n         * @param {any} variable \n         * @param {boolean} all \n         * @returns {boolean}\n         */\n        contains: function (variable, all) {\n            //contains expects a string\n            variable = String(variable);\n            var g = this.group;\n            if (this.value === variable)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].contains(variable, all))\n                        return true;\n                }\n            }\n            if (g === FN || this.previousGroup === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (this.args[i].contains(variable, all))\n                        return true;\n                }\n            }\n\n            if (g === EX) {\n                //exit only if it does\n                if (all && this.power.contains(variable, all)) {\n                    return true;\n                }\n                if (this.value === variable)\n                    return true;\n\n            }\n\n            return this.value === variable;\n        },\n        /**\n         * Negates a symbols\n         * @returns {boolean}\n         */\n        negate: function () {\n            this.multiplier.negate();\n            if (this.group === CP || this.group === PL)\n                this.distributeMultiplier();\n            return this;\n        },\n        /**\n         * Inverts a symbol\n         * @param {boolean} power_only\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        invert: function (power_only, all) {\n            //invert the multiplier\n            if (!power_only)\n                this.multiplier = this.multiplier.invert();\n            //invert the rest\n            if (isSymbol(this.power)) {\n                this.power.negate();\n            }\n            else if (this.group === CB && all) {\n                this.each(function (x) {\n                    return x.invert();\n                });\n            }\n            else {\n                if (this.power && this.group !== N)\n                    this.power.negate();\n            }\n            return this;\n        },\n        /**\n         * Symbols of group CP or PL may have the multiplier being carried by \n         * the top level symbol at any given time e.g. 2*(x+y+z). This is \n         * convenient in many cases, however in some cases the multiplier needs\n         * to be carried individually e.g. 2*x+2*y+2*z.\n         * This method distributes the multiplier over the entire symbol\n         * @param {boolean} all\n         * @returns {Symbol}\n         */\n        distributeMultiplier: function (all) {\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n            if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\n                    s.distributeMultiplier();\n                }\n                this.toUnitMultiplier();\n            }\n\n            return this;\n        },\n        /**\n         * This method expands the exponent over the entire symbol just like\n         * distributeMultiplier\n         * @returns {Symbol}\n         */\n        distributeExponent: function () {\n            if (!this.power.equals(1)) {\n                var p = this.power;\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    if (s.group === EX) {\n                        s.power = _.multiply(s.power, new Symbol(p));\n                    }\n                    else {\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\n                    }\n                }\n                this.toLinear();\n            }\n            return this;\n        },\n        /**\n         * This method will attempt to up-convert or down-convert one symbol\n         * from one group to another. Not all symbols are convertible from one \n         * group to another however. In that case the symbol will remain \n         * unchanged.\n         * @param {int} group\n         * @param {string} imaginary \n         */\n        convert: function (group, imaginary) {\n            if (group > FN) {\n                //make a clone of this symbol;\n                var cp = this.clone();\n\n                //attach a symbols object and upgrade the group\n                this.symbols = {};\n\n                if (group === CB) {\n                    //symbol of group CB hold symbols bound together through multiplication\n                    //because of commutativity this multiplier can technically be anywhere within the group\n                    //to keep track of it however it's easier to always have the top level carry it\n                    cp.toUnitMultiplier();\n                }\n                else {\n                    //reset the symbol\n                    this.toUnitMultiplier();\n                }\n\n                if (this.group === FN) {\n                    cp.args = this.args;\n                    delete this.args;\n                    delete this.fname;\n                }\n\n                //the symbol may originate from the symbol i but this property no longer holds true\n                //after copying\n                if (this.isImgSymbol)\n                    delete this.isImgSymbol;\n\n                this.toLinear();\n                //attach a clone of this symbol to the symbols object using its proper key\n                this.symbols[cp.keyForGroup(group)] = cp;\n                this.group = group;\n                //objects by default don't have a length property. However, in order to keep track of the number\n                //of sub-symbols we have to impliment our own.\n                this.length = 1;\n            }\n            else if (group === EX) {\n                //1^x is just one so check and make sure\n                if (!(this.group === N && this.multiplier.equals(1))) {\n                    if (this.group !== EX)\n                        this.previousGroup = this.group;\n                    if (this.group === N) {\n                        this.value = this.multiplier.num.toString();\n                        this.toUnitMultiplier();\n                    }\n                    //update the hash to reflect the accurate hash\n                    else\n                        this.value = text(this, 'hash');\n\n                    this.group = EX;\n                }\n            }\n            else if (group === N) {\n                var m = this.multiplier.toDecimal();\n                if (this.symbols)\n                    this.symbols = undefined;\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n            }\n            else if (group === P && this.group === N) {\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n                this.toUnitMultiplier(!imaginary);\n                this.group = P;\n            }\n            return this;\n        },\n        /**\n         * This method is one of the principal methods to make it all possible.\n         * It performs cleanup and prep operations whenever a symbols is \n         * inserted. If the symbols results in a 1 in a CB (multiplication) \n         * group for instance it will remove the redundant symbol. Similarly\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\n         * will remove any dangling zeroes from the symbol. It will also \n         * up-convert or down-convert a symbol if it detects that it's \n         * incorrectly grouped. It should be noted that this method is not\n         * called directly but rather by the 'attach' method for addition groups\n         * and the 'combine' method for multiplication groups.\n         * @param {Symbol} symbol\n         * @param {String} action\n         */\n        insert: function (symbol, action) {\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n            if (!isSymbol(symbol))\n                err('Object ' + symbol + ' is not of type Symbol!');\n            if (this.symbols) {\n                var group = this.group;\n                if (group > FN) {\n                    var key = symbol.keyForGroup(group);\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n                    if (action === 'add') {\n                        var hash = key;\n                        if (existing) {\n                            //add them together using the parser\n                            this.symbols[hash] = _.add(existing, symbol);\n                            //if the addition resulted in a zero multiplier remove it\n                            if (this.symbols[hash].multiplier.equals(0)) {\n                                delete this.symbols[hash];\n                                this.length--;\n\n                                if (this.length === 0) {\n                                    this.convert(N);\n                                    this.multiplier = new Frac(0);\n                                }\n                            }\n                        }\n                        else {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                    }\n                    else {\n                        //check if this is of group P and unwrap before inserting\n                        if (symbol.group === P && isInt(symbol.power)) {\n                            symbol.convert(N);\n                        }\n\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\n                        if (symbol.group !== EX) {\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                            symbol.toUnitMultiplier();\n                        }\n                        else {\n                            symbol.parens = symbol.multiplier.lessThan(0);\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n                            symbol.toUnitMultiplier(true);\n                        }\n\n                        if (existing) {\n                            //remove because the symbol may have changed\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\n                            if (symbol.isConstant()) {\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n                            }\n\n                            this.length--;\n                            //clean up\n                        }\n\n                        //don't insert the symbol if it's 1\n                        if (!symbol.isOne(true)) {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                        else if (symbol.multiplier.lessThan(0)) {\n                            this.negate(); //put back the sign\n                        }\n                    }\n\n                    //clean up\n                    if (this.length === 0)\n                        this.convert(N);\n                    //update the hash\n                    if (this.group === CP || this.group === CB) {\n                        this.updateHash();\n                    }\n                }\n            }\n\n            return this;\n        },\n        //the insert method for addition\n        attach: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'add');\n                return this;\n            }\n            return this.insert(symbol, 'add');\n        },\n        //the insert method for multiplication\n        combine: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'multiply');\n                return this;\n            }\n            return this.insert(symbol, 'multiply');\n        },\n        /**\n         * This method should be called after any major \"surgery\" on a symbol.\n         * It updates the hash of the symbol for example if the fname of a \n         * function has changed it will update the hash of the symbol.\n         */\n        updateHash: function () {\n            if (this.group === N)\n                return;\n\n            if (this.group === FN) {\n                var contents = '',\n                        args = this.args,\n                        is_parens = this.fname === PARENTHESIS;\n                for (var i = 0; i < args.length; i++)\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\n                var fn_name = is_parens ? '' : this.fname;\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n            }\n            else if (!(this.group === S || this.group === PL)) {\n                this.value = text(this, 'hash');\n            }\n        },\n        /**\n         * this function defines how every group in stored within a group of \n         * higher order think of it as the switchboard for the library. It \n         * defines the hashes for symbols. \n         * @param {int} group\n         */\n        keyForGroup: function (group) {\n            var g = this.group;\n            var key;\n\n            if (g === N) {\n                key = this.value;\n            }\n            else if (g === S || g === P) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === FN) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === PL) {\n                //if the order is reversed then we'll assume multiplication\n                //TODO: possible future dilemma\n                if (group === CB)\n                    key = text(this, 'hash');\n                else if (group === CP) {\n                    if (this.power.equals(1))\n                        key = this.value;\n                    else\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n                }\n                else if (group === PL)\n                    key = this.power.toString();\n                else\n                    key = this.value;\n                return key;\n            }\n            else if (g === CP) {\n                if (group === CP) {\n                    key = text(this, 'hash');\n                }\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === CB) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === EX) {\n                if (group === PL)\n                    key = text(this.power);\n                else\n                    key = text(this, 'hash');\n            }\n\n            return key;\n        },\n        /** \n         * Symbols are typically stored in an object which works fine for most\n         * cases but presents a problem when the order of the symbols makes\n         * a difference. This function simply collects all the symbols and \n         * returns them as an array. If a function is supplied then that \n         * function is called on every symbol contained within the object.\n         * @param {Function} fn\n         * @param {Object} opt\n         * @param {Function} sort_fn\n         * @@param {Boolean} expand_symbol \n         * @returns {Array}\n         */\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n            var collected = [];\n            if (!this.symbols)\n                collected.push(this);\n            else {\n                for (var x in this.symbols) {\n                    var symbol = this.symbols[x];\n                    if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n                        collected = collected.concat(symbol.collectSymbols());\n                    }\n                    else\n                        collected.push(fn ? fn(symbol, opt) : symbol);\n                }\n            }\n            if (sort_fn === null)\n                sort_fn = undefined; //WTF Firefox? Seriously?\n\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\n        },\n        /**\n         * Returns the latex representation of the symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        latex: function (option) {\n            return LaTeX.latex(this, option);\n        },\n        /**\n         * Returns the text representation of a symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        text: function (option) {\n            return text(this, option);\n        },\n        /**\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n         */\n        isOne: function (abs) {\n            var f = abs ? 'absEquals' : 'equals';\n            if (this.group === N)\n                return this.multiplier[f](1);\n            else\n                return this.power.equals(0);\n        },\n        isComposite: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CP || g === PL || pg === PL || pg === CP;\n        },\n        isCombination: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CB || pg === CB;\n        },\n        lessThan: function (n) {\n            return this.multiplier.lessThan(n);\n        },\n        greaterThan: function (n) {\n            return this.multiplier.greaterThan(n);\n        },\n        /**\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\n         * with other classes the symbol is either the denominator or not. \n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n         * denominator and has to be found by looking at the actual symbols themselves.\n         */\n        getDenom: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (this.group === CB && this.power.lessThan(0))\n                symbol = _.expand(symbol);\n\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.lessThan(0)) {\n                var d = _.parse(symbol.multiplier.den);\n                retval = symbol.toUnitMultiplier();\n                retval.power.negate();\n                retval = _.multiply(d, retval); //put back the coeff\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.den);\n                for (var x in symbol.symbols)\n                    if (symbol.symbols[x].power < 0)\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n            }\n            else\n                retval = _.parse(symbol.multiplier.den);\n            return retval;\n        },\n        getNum: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (symbol.group === CB && symbol.power.lessThan(0))\n                symbol = _.expand(symbol);\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.greaterThan(0) && symbol.group !== CB) {\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.num);\n                symbol.each(function (x) {\n                    if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n                        retval = _.multiply(retval, x.clone());\n                    }\n                });\n            }\n            else {\n                retval = _.parse(symbol.multiplier.num);\n            }\n            return retval;\n        },\n        toString: function () {\n            return this.text();\n        }\n    };\n\n//Parser =======================================================================     \n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    function Parser() {\n        //Point to the local parser instead of the global one\n        var _ = this;\n        var bin = {};\n        var preprocessors = {names: [], actions: []};\n\n//Parser.classes ===============================================================\n        function Slice(upper, lower) {\n            this.start = upper;\n            this.end = lower;\n        }\n        ;\n        Slice.prototype.isConstant = function () {\n            return this.start.isConstant() && this.end.isConstant();\n        };\n        Slice.prototype.text = function () {\n            return text(this.start) + ':' + text(this.end);\n        };\n\n        /**\n         * Class used to collect arguments for functions\n         * @returns {Parser.Collection}\n         */\n        function Collection() {\n            this.elements = [];\n        }\n        Collection.prototype.append = function (e) {\n            this.elements.push(e);\n        };\n        Collection.prototype.getItems = function () {\n            return this.elements;\n        };\n        Collection.prototype.toString = function () {\n            return _.pretty_print(this.elements);\n        };\n        Collection.create = function (e) {\n            var collection = new Collection();\n            if (e)\n                collection.append(e);\n            return collection;\n        };\n\n        function Token(node, node_type, column) {\n            this.type = node_type;\n            this.value = node;\n            if (column !== undefined)\n                this.column = column + 1;\n            if (node_type === Token.OPERATOR) {\n                //copy everything over from the operator\n                var operator = operators[node];\n                for (var x in operator)\n                    this[x] = operator[x];\n\n            }\n            else if (node_type === Token.FUNCTION) {\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n                this.leftAssoc = false;\n            }\n        }\n        Token.prototype.toString = function () {\n            return this.value;\n        };\n        Token.prototype.toString = function () {\n            if (this.is_prefix)\n                return '`' + this.value;\n            return this.value;\n        };\n        //some constants\n        Token.OPERATOR = 'OPERATOR';\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n        Token.FUNCTION = 'FUNCTION';\n        Token.UNIT = 'UNIT';\n        Token.KEYWORD = 'KEYWORD';\n        Token.MAX_PRECEDENCE = 999;\n        //create link to classes\n        this.classes = {\n            Collection: Collection,\n            Slice: Slice,\n            Token: Token\n        };\n//Parser.modules ===============================================================\n        //object for functions which handle complex number\n        var complex = {\n            prec: undefined,\n            cos: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cos(r) * Math.cosh(i));\n                im = _.parse(Math.sin(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sin: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(r) * Math.cosh(i));\n                im = _.parse(Math.cos(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tan: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sec: function (r, i) {\n                var t = this.removeDen(this.cos(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csc: function (r, i) {\n                var t = this.removeDen(this.sin(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            cot: function (r, i) {\n                var t = this.removeDen(this.tan(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acos: function (r, i) {\n                var symbol, sq, a, b, c;\n                symbol = this.fromArray([r, i]);\n                sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n                b = _.expand(_.add(symbol.clone(), a));\n                c = log(b);\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n            },\n            asin: function (r, i) {\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\n            },\n            atan: function (r, i) {\n                var a, b, c, symbol;\n                symbol = complex.fromArray([r, i]);\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n            },\n            asec: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.acos.apply(this, d);\n            },\n            acsc: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.asin.apply(this, d);\n            },\n            acot: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.atan.apply(this, d);\n            },\n            //Hyperbolic trig\n            cosh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cosh(r) * Math.cos(i));\n                im = _.parse(Math.sinh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sinh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(r) * Math.cos(i));\n                im = _.parse(Math.cosh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tanh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sech: function (r, i) {\n                var t = this.removeDen(this.cosh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csch: function (r, i) {\n                var t = this.removeDen(this.sinh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            coth: function (r, i) {\n                var t = this.removeDen(this.tanh(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acosh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n            },\n            asinh: function (r, i) {\n                var a, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n                return _.expand(log(_.add(z, a)));\n            },\n            atanh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = log(_.add(z.clone(), new Symbol(1)));\n                b = log(_.subtract(new Symbol(1), z));\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n            },\n            asech: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.acosh.apply(this, t);\n            },\n            acsch: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.asinh.apply(this, t);\n            },\n            acoth: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.atanh.apply(this, t);\n            },\n            sqrt: function (symbol) {\n                var re, im, h, a, d;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n                h = Symbol.hyp(re, im);\n                a = _.add(re.clone(), h);\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n            },\n            log: function (r, i) {\n                var re, im;\n                re = log(Symbol.hyp(r, i));\n                im = _.parse(Math.atan2(i, r));\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\n            },\n            removeDen: function (symbol) {\n                var den, r, i, re, im;\n                if (isArray(symbol)) {\n                    r = symbol[0];\n                    i = symbol[1];\n                }\n                else {\n                    r = symbol.realpart();\n                    i = symbol.imagpart();\n                }\n\n                den = Math.pow(r, 2) + Math.pow(i, 2);\n                re = _.parse(r / den);\n                im = _.parse(i / den);\n                return [re, im];\n            },\n            fromArray: function (arr) {\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n            },\n            evaluate: function (symbol, f) {\n                var re, im, sign;\n\n                sign = symbol.power.sign();\n                //remove it from under the denominator\n                symbol.power = symbol.power.abs();\n                //expand\n                if (symbol.power.greaterThan(1))\n                    symbol = _.expand(symbol);\n                //remove the denominator\n                if (sign < 0) {\n                    var d = this.removeDen(symbol);\n                    re = d[0];\n                    im = d[1];\n                }\n                else {\n                    re = symbol.realpart();\n                    im = symbol.imagpart();\n                }\n\n                if (re.isConstant('all') && im.isConstant('all'))\n                    return this[f].call(this, re, im);\n                return _.symfunction(f, [symbol]);\n            }\n        };\n        //object for functions which handle trig\n        var trig = this.trig = {\n            //container for trigonometric function\n            cos: function (symbol) {\n                if (symbol.equals('pi') && symbol.multiplier.den.equals(2))\n                    return new Symbol(0);\n\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(new Symbol(Settings.PI / 2)))\n                        return new Symbol(0);\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.cos(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cos');\n                    }\n                }\n                if (symbol.equals(0))\n                    return new Symbol(1);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = Number(m.num), d = Number(m.den);\n                        if (d === 2)\n                            retval = new Symbol(0);\n                        else if (d === 3) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else if (d === 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d === 6) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cos', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('cos', [symbol]);\n\n                return retval;\n            },\n            sin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sin(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sin');\n                }\n\n                if (symbol.equals(0))\n                    return new Symbol(0);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        sign = symbol.multiplier.sign(),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n                if (symbol.equals('pi'))\n                    retval = new Symbol(0);\n                else if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n                    }\n                }\n\n                if (!retval)\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n\n                if (c && (q === 3 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            tan: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'tan');\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('tan', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('tan', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            sec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.sec(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sec');\n                    return _.parse(format('1/cos({0})', symbol));\n                }\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = new Symbol(2);\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('2/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('sec', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('sec', [symbol]);\n\n                return retval;\n            },\n            csc: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math2.csc(symbol.valueOf()));\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'csc');\n                    return _.parse(format('1/sin({0})', symbol));\n                }\n\n                var retval,\n                    c = false,\n                    q = getQuadrant(symbol.multiplier.toDecimal()),\n                    sign = symbol.multiplier.sign(),\n                    m = symbol.multiplier.abs();\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if(isInt(m)) {\n                        throw new UndefinedError('csc is undefined for '+symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2) {\n                            retval = new Symbol(1); c = true;\n                        }\n                        else if(d == 3) {\n                            retval = _.parse('2/sqrt(3)'); c = true\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('sqrt(2)'); c = true;\n                        }\n                        else if(d == 6) {\n                            retval = new Symbol(2); c = true;\n                        }\n                        else \n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n                    }\n                }\n\n                if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n\n                if(c && (q === 3 || q === 4)) retval.negate();\n\n                return retval;\n            },\n            cot: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.cot(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'cot');\n                    return _.parse(format('1/tan({0})', symbol));\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            retval = new Symbol(0);\n                        else if (d == 3) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cot', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('cot', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            acos: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acos');\n                }\n                return _.symfunction('acos', arguments);\n            },\n            asin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asin');\n                }\n                return _.symfunction('asin', arguments);\n            },\n            atan: function (symbol) {\n                var retval;\n                if (symbol.equals(0))\n                    retval = new Symbol(0);\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.atan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'atan');\n                    return _.symfunction('atan', arguments);\n                }\n                else if (symbol.equals(-1))\n                    retval = _.parse('-pi/4');\n                else\n                    retval = _.symfunction('atan', arguments);\n                return retval;\n            },\n            asec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asec');\n                }\n                return _.symfunction('asec', arguments);\n            },\n            acsc: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acsc');\n                }\n                return _.symfunction('acsc', arguments);\n            },\n            acot: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n                    }\n\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acot');\n                }\n                return _.symfunction('acot', arguments);\n            },\n            atan2: function (a, b) {\n                if (a.equals(0) && b.equals(0))\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\n\n                if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n                    return new Symbol(Math.atan2(a, b));\n                }\n                return _.symfunction('atan2', arguments);\n            }\n        };\n        //object for functions which handle hyperbolic trig\n        var trigh = this.trigh = {\n            //container for hyperbolic trig function\n            cosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.cosh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cosh');\n                    }\n                }\n\n                return retval = _.symfunction('cosh', arguments);\n            },\n            sinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.sinh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sinh');\n                    }\n                }\n\n                return retval = _.symfunction('sinh', arguments);\n            },\n            tanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tanh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'tanh');\n                    }\n                }\n\n                return retval = _.symfunction('tanh', arguments);\n            },\n            sech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sech(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sech');\n                    }\n                    return _.parse(format('1/cosh({0})', symbol));\n                }\n\n                return retval = _.symfunction('sech', arguments);\n            },\n            csch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.csch(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'csch');\n                    }\n                    return _.parse(format('1/sinh({0})', symbol));\n                }\n\n                return retval = _.symfunction('csch', arguments);\n            },\n            coth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.coth(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'coth');\n                    }\n                    return _.parse(format('1/tanh({0})', symbol));\n                }\n\n                return retval = _.symfunction('coth', arguments);\n            },\n            acosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acosh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2-1))', symbol.toString())));\n                else\n                    retval = _.symfunction('acosh', arguments);\n                return retval;\n            },\n            asinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asinh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2+1))', symbol.toString())));\n                else\n                    retval = _.symfunction('asinh', arguments);\n                return retval;\n            },\n            atanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'atanh');\n                else if (Settings.PARSE2NUMBER) {\n                    retval = evaluate(_.parse(format('(1/2)*'+Settings.LOG+'((1+({0}))/(1-({0})))', symbol.toString())));\n                }\n                else\n                    retval = _.symfunction('atanh', arguments);\n                return retval;\n            },\n            asech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asech');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\n                else\n                    retval = _.symfunction('asech', arguments);\n                return retval;\n            },\n            acsch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acsch');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\n                else\n                    retval = _.symfunction('acsch', arguments);\n                return retval;\n            },\n            acoth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acoth');\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(1))\n                        retval = Symbol.infinity();\n                    else\n                        retval = evaluate(\n                                _.divide(\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\n                                        new Symbol(2)));\n                }\n                else\n                    retval = _.symfunction('acoth', arguments);\n                return retval;\n            }\n        };\n        //list of supported units\n        this.units = {};\n        //list all the supported operators\n        var operators = {\n            '\\\\': {\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            },\n            '!!': {\n                precedence: 7,\n                operator: '!!',\n                action: 'dfactorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n                }\n            },\n            '!': {\n                precedence: 7,\n                operator: '!',\n                action: 'factorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return factorial(e); //wrap it in a factorial function\n                }\n            },\n            '^': {\n                precedence: 6,\n                operator: '^',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '**': {\n                precedence: 6,\n                operator: '**',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '%': {\n                precedence: 4,\n                operator: '%',\n                action: 'percent',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                overloaded: true,\n                overloadAction: 'mod',\n\t\toverloadLeftAssoc: false,\n                operation: function (x) {\n                    return _.divide(x, new Symbol(100));\n                }\n            },\n            '*': {\n                precedence: 4,\n                operator: '*',\n                action: 'multiply',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '/': {\n                precedence: 4,\n                operator: '/',\n                action: 'divide',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '+': {\n                precedence: 3,\n                operator: '+',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            'plus': {\n                precedence: 3,\n                operator: 'plus',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            '-': {\n                precedence: 3,\n                operator: '-',\n                action: 'subtract',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x.negate();\n                }\n            },\n            '=': {\n                precedence: 2,\n                operator: '=',\n                action: 'equals',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '==': {\n                precedence: 1,\n                operator: '==',\n                action: 'eq',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<': {\n                precedence: 1,\n                operator: '<',\n                action: 'lt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<=': {\n                precedence: 1,\n                operator: '<=',\n                action: 'lte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '>': {\n                precedence: 1,\n                operator: '>',\n                action: 'gt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '=>': {\n                precedence: 1,\n                operator: '=>',\n                action: 'gte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ',': {\n                precedence: 0,\n                operator: ',',\n                action: 'comma',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ':': {\n                precedence: 0,\n                operator: ',',\n                action: 'assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false,\n                vectorFn: 'slice'\n            },\n            ':=': {\n                precedence: 0,\n                operator: ',',\n                action: 'function_assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            }\n        };\n        //brackets\n        var brackets = {\n            '(': {\n                type: 'round',\n                id: 1,\n                is_open: true,\n                is_close: false\n            },\n            ')': {\n                type: 'round',\n                id: 2,\n                is_open: false,\n                is_close: true\n            },\n            '[': {\n                type: 'square',\n                id: 3,\n                is_open: true,\n                is_close: false,\n                maps_to: 'vector'\n            },\n            ']': {\n                type: 'square',\n                id: 4,\n                is_open: false,\n                is_close: true\n            },\n            '{': {\n                type: 'curly',\n                id: 5,\n                is_open: true,\n                is_close: false,\n                maps_to: 'Set'\n            },\n            '}': {\n                type: 'curly',\n                id: 6,\n                is_open: false,\n                is_close: true\n            }\n        };\n        // Supported functions.\n        // Format: function_name: [mapped_function, number_of_parameters]\n        var functions = this.functions = {\n            'cos': [trig.cos, 1],\n            'sin': [trig.sin, 1],\n            'tan': [trig.tan, 1],\n            'sec': [trig.sec, 1],\n            'csc': [trig.csc, 1],\n            'cot': [trig.cot, 1],\n            'acos': [trig.acos, 1],\n            'asin': [trig.asin, 1],\n            'atan': [trig.atan, 1],\n            'arccos': [trig.acos, 1],\n            'arcsin': [trig.asin, 1],\n            'arctan': [trig.atan, 1],\n            'asec': [trig.asec, 1],\n            'acsc': [trig.acsc, 1],\n            'acot': [trig.acot, 1],\n            'atan2': [trig.atan2, 2],\n            'acoth': [trigh.acoth, 1],\n            'asech': [trigh.asech, 1],\n            'acsch': [trigh.acsch, 1],\n            'sinh': [trigh.sinh, 1],\n            'cosh': [trigh.cosh, 1],\n            'tanh': [trigh.tanh, 1],\n            'asinh': [trigh.asinh, 1],\n            'sech': [trigh.sech, 1],\n            'csch': [trigh.csch, 1],\n            'coth': [trigh.coth, 1],\n            'acosh': [trigh.acosh, 1],\n            'atanh': [trigh.atanh, 1],\n            'log10': [, 1],\n            'exp': [exp, 1],\n            'radians': [radians, 1],\n            'degrees': [degrees, 1],\n            'min': [min, -1],\n            'max': [max, -1],\n            'erf': [, 1],\n            'floor': [, 1],\n            'ceil': [, 1],\n            'trunc': [, 1],\n            'Si': [, 1],\n            'step': [, 1],\n            'rect': [, 1],\n            'sinc': [sinc, 1],\n            'tri': [, 1],\n            'sign': [sign, 1],\n            'Ci': [, 1],\n            'Ei': [, 1],\n            'Shi': [, 1],\n            'Chi': [, 1],\n            'Li': [, 1],\n            'fib': [, 1],\n            'fact': [factorial, 1],\n            'factorial': [factorial, 1],\n            'continued_fraction': [continued_fraction, [1, 2]],\n            'dfactorial': [, 1],\n            'gamma_incomplete': [, [1, 2]],\n            'round': [round, [1, 2]],\n            'scientific': [scientific, [1, 2]],\n            'mod': [mod, 2],\n            'pfactor': [pfactor, 1],\n            'vector': [vector, -1],\n            'matrix': [matrix, -1],\n            'Set': [set, -1],\n            'imatrix': [imatrix, -1],\n            'parens': [parens, -1],\n            'sqrt': [sqrt, 1],\n            'nthroot': [nthroot, 2],\n            'log': [log, [1, 2]],\n            'expand': [expand, 1],\n            'abs': [abs, 1],\n            'invert': [invert, 1],\n            'determinant': [determinant, 1],\n            'size': [size, 1],\n            'transpose': [transpose, 1],\n            'dot': [dot, 2],\n            'cross': [cross, 2],\n            'vecget': [vecget, 2],\n            'vecset': [vecset, 3],\n            'vectrim': [vectrim, [1, 2]],\n            'matget': [matget, 3],\n            'matset': [matset, 4],\n            'matgetrow': [matgetrow, 2],\n            'matsetrow': [matsetrow, 3],\n            'matgetcol': [matgetcol, 2],\n            'matsetcol': [matsetcol, 3],\n            'IF': [IF, 3],\n            'is_in': [is_in, 2],\n            //imaginary support\n            'realpart': [realpart, 1],\n            'imagpart': [imagpart, 1],\n            'conjugate': [conjugate, 1],\n            'arg': [arg, 1],\n            'polarform': [polarform, 1],\n            'rectform': [rectform, 1],\n            'sort': [sort, [1, 2]],\n            'integer_part': [, 1],\n            'union': [union, 2],\n            'contains': [contains, 2],\n            'intersection': [intersection, 2],\n            'difference': [difference, 2],\n            'intersects': [intersects, 2],\n            'is_subset': [is_subset, 2],\n            //system support\n            'print': [print, -1]\n        };\n\n        //error handler\n        this.error = err;\n        //this function is used to comb through the function modules and find a function given its name\n        var findFunction = function (fname) {\n            var fmodules = Settings.FUNCTION_MODULES,\n                    l = fmodules.length;\n            for (var i = 0; i < l; i++) {\n                var fmodule = fmodules[i];\n                if (fname in fmodule)\n                    return fmodule[fname];\n            }\n            err('The function ' + fname + ' is undefined!');\n        };\n\n        /**\n         * This method gives the ability to override operators with new methods.\n         * @param {String} which\n         * @param {Function} with_what\n         */\n        this.override = function (which, with_what) {\n            if (!bin[which])\n                bin[which] = [];\n            bin[which].push(this[which]);\n            this[which] = with_what;\n        };\n\n        /**\n         * Restores a previously overridden operator\n         * @param {String} what\n         */\n        this.restore = function (what) {\n            if (this[what])\n                this[what] = bin[what].pop();\n        };\n\n        /**\n         * This method is supposed to behave similarly to the override method but it does not override\n         * the existing function rather it only extends it\n         * @param {String} what\n         * @param {Function} with_what\n         * @param {boolean} force_call\n         */\n        this.extend = function (what, with_what, force_call) {\n            var _ = this,\n                    extended = this[what];\n            if (typeof extended === 'function' && typeof with_what === 'function') {\n                var f = this[what];\n                this[what] = function (a, b) {\n                    if (isSymbol(a) && isSymbol(b) && !force_call)\n                        return f.call(_, a, b);\n                    else\n                        return with_what.call(_, a, b, f);\n                };\n            }\n        };\n\n        /**\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with \n         * a few extras. The most important thing is that that it gives a fname and \n         * an args property to the symbols in addition to changing its group to FN\n         * @param {String} fn_name\n         * @param {Array} params\n         * @returns {Symbol}\n         */\n        this.symfunction = function (fn_name, params) {\n            //call the proper function and return the result;\n            var f = new Symbol(fn_name);\n            f.group = FN;\n            if (typeof params === 'object')\n                params = [].slice.call(params);//ensure an array\n            f.args = params;\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n            f.updateHash();\n            return f;\n        };\n\n        /**\n         * An internal function call for the Parser. This will either trigger a real \n         * function call if it can do so or just return a symbolic representation of the \n         * function using symfunction.\n         * @param {String} fn_name\n         * @param {Array} args\n         * @param {int} allowed_args\n         * @returns {Symbol}\n         */\n        this.callfunction = function (fn_name, args, allowed_args) {\n            var fn_settings = functions[fn_name];\n\n            if (!fn_settings)\n                err('Nerdamer currently does not support the function ' + fn_name);\n\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\n                    fn = fn_settings[0], //get the mapped function\n                    retval;\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\n            //an array so make sure to wrap the argument in an array.\n            if (!(args instanceof Array))\n                args = args !== undefined ? [args] : [];\n\n            if (num_allowed_args !== -1) {\n                var is_array = isArray(num_allowed_args),\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n                        num_args = args.length;\n\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n\n                if (num_args < min_args)\n                    err(format(error_msg, 'minimum', min_args, num_args));\n                if (num_args > max_args)\n                    err(format(error_msg, 'maximum', max_args, num_args));\n            }\n\n            /*\n             * The following are very important to the how nerdamer constructs functions!\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n             *     they are expecting a symbolic output.\n             */\n            //check if arguments are all numers\n            var numericArgs = allNumbers(args);\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n            if (Settings.USE_BIG && numericArgs) {\n                retval = Big[fn_name].apply(undefined, args);\n            }\n            else {\n                if (!fn) {\n                    //Remember assumption 1. No function defined so it MUST be numeric in nature\n                    fn = findFunction(fn_name);\n                    if (Settings.PARSE2NUMBER && numericArgs)\n                        retval = bigConvert(fn.apply(fn, args));\n                    else\n                        retval = _.symfunction(fn_name, args);\n                }\n                else {\n                    //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n                    retval = fn.apply(fn_settings[2], args);\n                }\n            }\n\n            return retval;\n        };\n        /**\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when \n         * substituting spaces for multiplication\n         */\n        this.operator_filter_regex = (function () {\n            //we only want the operators which are singular since those are the ones\n            //that nerdamer uses anyway\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n                if (x.length === 1)\n                    return x;\n            }).join('\\\\');\n            //create a regex which captures all spaces between characters except those\n            //have an operator on one end\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n        })();\n\n        /**\n         * Replaces nerdamer.setOperator\n         * @param {object} operator\n         * @param {boolean} shift         \n         */\n        this.setOperator = function (operator, action, shift) {\n            var name = operator.operator; //take the name to be the symbol\n            operators[name] = operator;\n            if(action)\n                this[operator.action] = action;\n            //make the parser aware of the operator\n            _[name] = operator.operation;\n            //make the action available to the parser if infix\n            if (!operator.action &&!(operator.prefix || operator.postif)) {\n                operator.action = name;\n            }\n            //if this operator is exclusive then all successive operators should be shifted\n            if (shift === 'over' || shift === 'under') {\n                var precedence = operator.precedence;\n\n                for (var x in operators) {\n                    var o = operators[x];\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n                    if (condition)\n                        o.precedence++;\n                }\n                ;\n            }\n        };\n        \n        /**\n         * Gets an opererator by its symbol\n         * @param {String} operator\n         * @returns {Object}\n         */\n        this.getOperator = function(operator) {\n            return operators[operator];\n        };\n        \n        this.aliasOperator = function(o, n) {\n            var t = {};\n            var operator = operators[o];\n            //copy everything over to the new operator\n            for(var x in operator) {\n                t[x] = operator[x];\n            }\n            //update the symbol\n            t.operator = n;\n            \n            this.setOperator(t);\n        };\n        \n        /**\n         * Returns the list of operators. Caution! Can break parser!\n         * @returns {object}\n         */\n        this.getOperators = function () {\n            //will replace this with some cloning action in the future\n            return operators;\n        };\n\n        this.getBrackets = function () {\n            return brackets;\n        };\n        /*\n         * Preforms preprocessing on the string. Useful for making early modification before \n         * sending to the parser\n         * @param {String} e\n         */\n        var prepare_expression = function (e) {\n            /*\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for \n             * a side-by-side close and open parenthesis\n             */\n            e = String(e);\n            //apply preprocessors\n            for (var i = 0; i < preprocessors.actions.length; i++)\n                e = preprocessors.actions[i].call(this, e);\n\n            /* //NO LONGER NEEDED SINCE IMPLIED MULTIPLICATION IS NOW HANDLED LATER IN TOKENIZER\n            var match;\n            //add support for spaces between variables\n            while (true) {\n                match = _.operator_filter_regex.exec(e);\n                if (!match)\n                    break;\n                try {\n                    var a = match[1],\n                            b = match[2];\n                    validateName(a);\n                    validateName(b);\n                    e = e.replace(match[0], a + '*' + b);\n                }\n                catch (e) {\n                    break;\n                }\n            }\n            */\n            \n            //e = e.split(' ').join('');//strip empty spaces\n            //replace multiple spaces with one space\n            e = e.replace(/\\s+/g, ' ');\n            \n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n            if(/e/gi.test(e)) {\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) { \n                    return scientificToDecimal(x);\n                });\n            }\n            //replace scientific numbers\n            \n            //allow omission of multiplication after coefficients\n            e = e.replace(/([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi, function () {\n                var str = arguments[4],\n                        group1 = arguments[1],\n                        group2 = arguments[2],\n                        start = arguments[3],\n                        first = str.charAt(start),\n                        before = '',\n                        d = '*';\n                if (!first.match(/[\\+\\-\\/\\*]/))\n                    before = str.charAt(start - 1);\n                if (before.match(/[a-z]/i))\n                    d = '';\n                return group1 + d + group2;\n            })\n            .replace(/([a-z0-9_]+)/gi, function (match, a) {\n                if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n                    if (!isNaN(a))\n                        return a;\n                    return a.split('').join('*');\n                }\n                return a;\n            })\n            //allow omission of multiplication sign between brackets\n            .replace(/\\)\\(/g, ')*(') || '0';\n            //replace x(x+a) with x*(x+a)\n            while (true) {\n                var e_org = e; //store the original\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n                    var g1 = a || c,\n                            g2 = b || d;\n                    if (g1 in functions) //create a passthrough for functions\n                        return g1 + g2;\n                    return g1 + '*' + g2;\n                });\n                //if the original equals the replace we're done\n                if (e_org === e)\n                    break;\n            }\n            return e;\n        };\n        //delay setting of constants until Settings is ready\n        this.initConstants = function () {\n            this.CONSTANTS = {\n                E: new Symbol(Settings.E),\n                PI: new Symbol(Settings.PI)\n            };\n        };\n        /*\n         * Debugging method used to better visualize vector and arrays\n         * @param {object} o\n         * @returns {String}\n         */\n        this.pretty_print = function (o) {\n            if (Array.isArray(o)) {\n                var s = o.map(x => _.pretty_print(x)).join(', ');\n                if (o.type === 'vector')\n                    return 'vector<' + s + '>';\n                return '(' + s + ')';\n            }\n            return o.toString();\n        };\n        this.peekers = {\n            pre_operator: [],\n            post_operator: [],\n            pre_function: [],\n            post_function: []\n        };\n        \n        this.callPeekers = function(name) {\n            var peekers = this.peekers[name];\n            //remove the first items and stringify\n            var args = arguments2Array(arguments).slice(1).map(stringify);\n            //call each one of the peekers\n            for(var i=0; i<peekers.length; i++) {\n                peekers[i].apply(null, args);\n            }\n        };\n        /*\n         * Tokenizes the string\n         * @param {String} e\n         * @returns {Token[]}\n         */\n        this.tokenize = function (e) {\n            //cast to String\n            e = String(e);\n            //remove multiple white spaces and spaces at beginning and end of string\n            e = e.trim().replace(/\\s+/g, ' ');\n            //remove spaces before and after brackets\n            for (var x in brackets) {\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n                e = e.replace(regex, x);\n            }\n\n            var col = 0; //the column position\n            var L = e.length; //expression length\n            var lpos = 0; //marks beginning of next token\n            var tokens = []; //the tokens container\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n            var depth = 0;\n            var open_brackets = [];\n            var has_space = false; //marks if an open space character was found\n            var SPACE = ' ';\n            var EMPTY_STRING = '';\n            var COMMA = ',';\n            var MINUS = '-';\n            var MULT = '*';\n            //Possible source of bug. Review\n            /*\n             //gets the next space\n             var next_space = function(from) {\n             for(var i=from; i<L; i++) {\n             if(e.charAt(i) === ' ')\n             return i;\n             }\n             \n             return L; //assume the end of the string instead\n             };\n             */\n            /**\n             * Adds a scope to tokens\n             * @param {String} scope_type \n             * @param {int} column \n             * @returns {undefined}\n             */\n            var addScope = function (scope_type, column) {\n                var new_scope = []; //create a new scope\n                if (scope_type !== undefined) {\n                    new_scope.type = scope_type;\n                }\n                new_scope.column = column; //mark the column of the scope\n                scopes.push(new_scope); //add it to the list of scopes\n                target.push(new_scope); //add it to the tokens list since now it's a scope\n                target = new_scope; //point to it\n                depth++; //go down one in scope\n            };\n            /**\n             * Goes up in scope by one\n             * @returns {undefined}\n             */\n            var goUp = function () {\n                scopes.pop(); //remove the scope from the scopes stack\n                target = scopes[--depth]; //point the above scope\n            };\n            /**\n             * Extracts all the operators from the expression string starting at postion start_at\n             * @param {int} start_at\n             * @returns {String}\n             */\n            var get_operator_str = function (start_at) {\n                start_at = start_at !== undefined ? start_at : col;\n                //mark the end of the operator as the start since we're just going\n                //to be walking along the string\n                var end = start_at + 1;\n                //just keep moving along\n                while (e.charAt(end++) in operators) {\n                }\n                //remember that we started at one position ahead. The beginning operator is what triggered\n                //this function to be called in the first place. String.CharAt is zero based so we now\n                //have to correct two places. The initial increment + the extra++ at the end of end during\n                //the last iteration.\n                return e.substring(start_at, end - 1);\n            };\n            /**\n             * Breaks operator up in to several different operators as defined in operators\n             * @param {String} operator_str\n             * @returns {String[]}\n             */\n            var chunkify = function (operator_str) {\n                var start = col - operator_str.length; //start of operator\n                var _operators = [];\n                var operator = operator_str.charAt(0);\n                //grab the largest possible chunks but start at 2 since we already know\n                //that the first character is an operator\n\n                for (var i = 1, L = operator_str.length; i < L; i++) {\n                    var ch = operator_str.charAt(i);\n                    var o = operator + ch;\n                    //since the operator now is undefined then the last operator \n                    //was the largest possible combination.\n                    if (!(o in operators)) {\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                        operator = ch;\n                    }\n                    else\n                        operator = o;//now the operator is the larger chunk\n                }\n                //add the last operator\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                return _operators;\n            };\n\n            /**\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\n             * @param {int} at\n             * @param {String} token\n             * @returns {undefined}\n             */\n            var add_token = function (at, token) {\n                //grab the token if we're not supplied one\n                if (token === undefined)\n                    token = e.substring(lpos, at);\n                //only add it if it's not an empty string\n                if (token in _.units)\n                    target.push(new Token(token, Token.UNIT, lpos));\n                else if (token !== '')\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n            };\n            /**\n             * Adds a function to the output\n             * @param {String} f\n             * @returns {undefined}\n             */\n            var add_function = function (f) {\n                target.push(new Token(f, Token.FUNCTION, lpos));\n            };\n            /**\n             * Tokens are found between operators so this marks the location of where the last token was found\n             * @param {int} position\n             * @returns {undefined}\n             */\n            var set_last_position = function (position) {\n                lpos = position + 1;\n            };\n            /**\n             * When a operator is found and added, especially a combo operator, then the column location\n             * has to be adjusted to the end of the operator\n             * @returns {undefined}\n             */\n            var adjust_column_position = function () {\n                lpos = lpos + operator_str.length - 2;\n                col = lpos - 1;\n            };\n            for (; col < L; col++) {\n                var ch = e.charAt(col);\n                if (ch in operators) {\n                    add_token(col);\n                    //is the last token numeric?\n                    var last_token_is_numeric = target[0] && isNumber(target[0]); \n                    //is this character multiplication?\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\n                    //if we're in a new scope then go up by one but if the space \n                    //is right befor an operator then it makes no sense to go up in scope\n                    //consider sin -x. The last position = current position at the minus sign\n                    //this means that we're going for sin(x) -x which is wrong\n                    //Ignore comma since comma is still part of the existing scope.\n                    if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n                        has_space = false;\n                        goUp();\n                    }\n                    //mark the last position that a \n                    set_last_position(col + 1);\n                    var operator_str = get_operator_str(col);\n\n                    adjust_column_position();\n                    target.push.apply(target, chunkify(operator_str));\n                }\n                else if (ch in brackets) {\n                    var bracket = brackets[ch];\n\n                    if (bracket.is_open) {\n                        //mark the bracket\n                        open_brackets.push([bracket, lpos]);\n                        var f = e.substring(lpos, col);\n                        if (f in functions) {\n                            add_function(f);\n                        }\n                        else if (f !== '') {\n                            //assume multiplication\n                            //TODO: Add the multiplication to stack\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n                        }\n                        //go down one in scope\n                        addScope(bracket.maps_to, col);\n                    }\n                    else if (bracket.is_close) {\n                        //get the matching bracket\n                        var pair = open_brackets.pop();\n                        //throw errors accordingly\n                        //missing open bracket\n                        if (!pair)\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\n                        //incorrect pair\n                        else if (pair[0].id !== bracket.id - 1)\n                            throw new ParityError('Parity error');\n\n                        add_token(col);\n                        goUp();\n                    }\n                    set_last_position(col);\n                }\n                else if (ch === SPACE) {\n                    var prev = e.substring(lpos, col); //look back\n                    var nxt = e.charAt(col+1); //look forward\n                    if (has_space) {\n\n                        if (prev in operators) {\n                            target.push(new Token(prev, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, prev);\n                            //we're at the closing space\n                            goUp(); //go up in scope if we're at a space\n                            \n                            //assume multiplication if it's not an operator except for minus\n                            var is_operator = nxt in operators;\n\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator)\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                        }\n                        has_space = false; //remove the space\n                    }\n                    else {\n                        //we're at the closing space\n                        //check if it's a function\n                        var f = e.substring(lpos, col);\n\n                        if (f in functions) {\n                            //there's no need to go up in scope if the next character is an operator\n                            has_space = true; //mark that a space was found\n                            add_function(f);\n                            addScope();\n                        }\n                        else if (f in operators) {\n                            target.push(new Token(f, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, f);\n                            //peek ahead to the next character\n                            var nxt = e.charAt(col+1);\n\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\n                            //is not an operator\n                            \n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                        }\n                        //Possible source of bug. Review\n                        /*\n                         //space can mean multiplication so add the symbol if the is encountered\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n                         var next = e.charAt(col+1);\n                         var next_is_operator = next in operators;\n                         var ns = next_space(col+1);\n                         var next_word = e.substring(col+1, ns);\n                         //the next can either be a prefix operator or no operator\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n                         target.push(new Token('*', Token.OPERATOR, col));\n                         }\n                         */\n                    }\n                    set_last_position(col); //mark this location    \n                }\n            }\n            //check that all brackets were closed\n            if (open_brackets.length) {\n                var b = open_brackets.pop();\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n            }\n            //add the last token\n            add_token(col);\n\n            return tokens;\n        };\n        /*\n         * Puts token array in Reverse Polish Notation\n         * @param {Token[]} tokens\n         * @returns {Token[]}\n         */\n        this.toRPN = function (tokens) {\n            var fn = tokens.type;\n            var l = tokens.length, i;\n            var output = [];\n            var stack = [];\n            var prefixes = [];\n            var collapse = function (target, destination) {\n                while (target.length)\n                    destination.push(target.pop());\n            };\n            //mark all the prefixes and add them to the stack\n            for (i = 0; i < l; i++) {\n                var token = tokens[i];\n                if (token.type !== Token.OPERATOR)\n                    break;\n                if (!token.prefix)\n                    throw new OperatorError('Not a prefix operator');\n                token.is_prefix = true;\n                stack.push(token);\n            }\n            //begin with remaining tokens\n            for (; i < l; i++) {\n                var e = tokens[i];\n                if (e.type === Token.OPERATOR) {\n                    var operator = e;\n\t\t    \n\t\t    //create the option for the operator being overloaded\n                    if (operator.overloaded) {\n                        var next = tokens[i + 1];\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\n                        if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n                            operator.postfix = false;\n                            //override the original function with the overload function\n                            operator.action = operator.overloadAction;\n\t\t\t    operator.leftAssoc = operator.overloadLeftAssoc;\n                        }\n                    }\n\t\t\t\n                    //if the stack is not empty\n                    while (stack.length) {\n                        var last = stack[stack.length - 1];\n                        //if (there is an operator at the top of the operator stack with greater precedence)\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n                        if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\n                            break;\n                        output.push(stack.pop());\n                    }\n                    \n                    //change the behavior of the operator if it's a vector and we've been asked to do so\n                    if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\n                        operator.action = operator.vectorFn;\n\n\n                    //if the operator is a postfix operator then we're ready to go since it belongs\n                    //to the preceding token. However the output cannot be empty. It must have either\n                    //an operator or a variable/literal\n                    if (operator.postfix) {\n                        var previous = tokens[i - 1];\n                        if (!previous)\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\n                        else if (previous.type === Token.OPERATOR) {\n                            //a postfix can only be followed by a postfix\n                            if (!previous.postfix)\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n                        }\n                    }\n                    else {\n                        //we must be at an infix so point the operator this\n                        do {\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\n                            var next = tokens[i + 1]; //take a look ahead\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n                            if (next_is_operator) {\n                                //if it's not a prefix operator then it not in the right place\n                                if (!next.prefix) {\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\n                                }\n                                //mark it as a confirmed prefix\n                                next.is_prefix = true;\n                                //add it to the prefixes\n                                prefixes.push(next);\n                                i++;\n                            }\n                        }\n                        while (next_is_operator)\n                    }\n\n                    //if it's a prefix it should be on a special stack called prefixes\n                    //we do this to hold on to prefixes because of left associative operators.\n                    //they belong to the variable/literal but if placed on either the stack\n                    //or output there's no way of knowing this. I might be wrong so I welcome \n                    //any discussion about this.\n\n                    if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n                        prefixes.push(operator);\n                    else\n                        stack.push(operator);\n                    //move the prefixes to the stack\n                    while (prefixes.length) {\n                        if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n                            stack.push(prefixes.pop());\n                        else\n                            break;\n                    }\n                }\n                else if (e.type === Token.VARIABLE_OR_LITERAL) {\n                    //move prefixes to stack at beginning of scope\n                    if (output.length === 0)\n                        collapse(prefixes, stack);\n                    //done with token\n                    output.push(e);\n                    var last_on_stack = stack[stack.length - 1];\n                    //then move all the prefixes to the output\n                    if (!last_on_stack || !last_on_stack.leftAssoc)\n                        collapse(prefixes, output);\n                }\n                else if (e.type === Token.FUNCTION) {\n                    stack.push(e);\n                }\n                else if (e.type === Token.UNIT) {\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\n                    output.push(e);\n                }\n                //if it's an additonal scope then put that into RPN form\n                if (Array.isArray(e)) {\n                    output.push(this.toRPN(e));\n                    if (e.type)\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n\n                }\n            }\n            //collapse the remainder of the stack and prefixes to output\n            collapse(stack, output);\n            collapse(prefixes, output);\n\n            return output;\n        };\n        /*\n         * Parses the tokens  \n         * @param {Tokens[]} rpn\n         * @param {object} substitutions\n         * @returns {Symbol}\n         */\n        this.parseRPN = function (rpn, substitutions) {\n            try {\n                //default substitutions\n                substitutions = substitutions || {};\n                //prepare the substitutions.\n                //we first parse them out as-is\n                for (var x in substitutions)\n                    substitutions[x] = _.parse(substitutions[x], {});\n                //Although technically constants,\n                //pi and e are only available when evaluating the expression so add to the subs.\n                //Doing this avoids rounding errors \n                //link e and pi\n                if (Settings.PARSE2NUMBER) {\n                    //use the value provided if the individual for some strange reason prefers this.\n                    //one reason could be to sub e but not pi or vice versa\n                    if (!('e' in substitutions))\n                        substitutions.e = new Symbol(Settings.E);\n                    if ((!('pi' in substitutions)))\n                        substitutions.pi = new Symbol(Settings.PI);\n                }\n\n                var Q = [];\n                for (var i = 0, l = rpn.length; i < l; i++) {\n                    var e = rpn[i]; \n\n                    //Arrays indicate a new scope so parse that out\n                    if (Array.isArray(e)) {\n                        e = this.parseRPN(e, substitutions);\n                    }\n\n                    if(e) {\n                        if (e.type === Token.OPERATOR) {\n                            if (e.is_prefix || e.postfix)\n                                //resolve the operation assocated with the prefix\n                                Q.push(e.operation(Q.pop()));\n                            else {\n                                var b = Q.pop();\n                                var a = Q.pop();\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n                                if (typeof a === 'undefined')\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n\n                                var is_comma = e.action === 'comma';\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n                                if(a instanceof Set && !is_comma)\n                                    a = Vector.fromSet(a);\n\n                                if(b instanceof Set && !is_comma)\n                                    b = Vector.fromSet(b);\n\n                                //call all the pre-operators \n                                this.callPeekers('pre_operator', a, b, e);\n                                \n                                var ans = _[e.action](a, b);\n                                \n                                //call all the pre-operators\n                                this.callPeekers('post_operator', ans, a, b, e);\n                                \n                                Q.push(ans);\n                            }\n                        }\n                        else if (e.type === Token.FUNCTION) {\n                            var args = Q.pop();\n                            var parent = args.parent; //make a note of the parent\n                            if (!(args instanceof Collection))\n                                args = Collection.create(args);\n                            //the return value may be a vector. If it is then we check\n                            //Q to see if there's another vector on the stack. If it is then\n                            //we check if has elements. If it does then we know that we're dealing\n                            //with an \"getter\" object and return the requested values\n\n                            //call the function. This is the _.callfunction method in nerdamer\n                            //call the function. This is the _.callfunction method in nerdamer\n                            var fn_name = e.value;\n                            var fn_args = args.getItems();\n                            \n                            //call the pre-function peekers\n                            this.callPeekers('pre_function', fn_name, fn_args);\n                            \n                            var ret = _.callfunction(fn_name, fn_args);                             \n                            \n                            //call the post-function peekers\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\n                            \n                            var last = Q[Q.length - 1];\n                            var next = rpn[i + 1];\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n                            if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                                //remove the item from the queue\n                                var item = Q.pop();\n\n                                var getter = ret.elements[0];\n                                //check if it's symbolic. If so put it back and add the item to the stack\n                                if (!getter.isConstant()) {\n                                    item.getter = getter;\n                                    Q.push(item);\n                                    Q.push(ret);\n                                }\n                                else if (getter instanceof Slice) {\n                                    //if it's a Slice return the slice\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                                }\n                                else {\n                                    var index = Number(getter);\n                                    var il = item.elements.length;\n                                    //support for negative indices\n                                    if (index < 0)\n                                        index = il + index;\n                                    //it it's still out of bounds\n                                    if (index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                                        //range error\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n                                    \n                                    var element = item.elements[index];\n                                    //cyclic but we need to mark this for future reference\n                                    item.getter = index;\n                                    element.parent = item; \n                                    \n                                    Q.push(element);\n                                }\n                            }\n                            else {\n                                //extend the parent reference\n                                if(parent)\n                                    ret.parent = parent;\n                                Q.push(ret);\n                            }\n\n                        }\n                        else {\n                            var subbed;\n                            var v = e.value;\n\n                            if (v in Settings.ALIASES)\n                                e = _.parse(Settings.ALIASES[e]);\n                            //wrap it in a symbol if need be\n                            else if (e.type === Token.VARIABLE_OR_LITERAL)\n                                e = new Symbol(v);\n                            else if (e.type === Token.UNIT) {\n                                e = new Symbol(v);\n                                e.isUnit = true;\n                            }\n\n                            //make substitutions\n                            //Always constants first. This avoids the being overridden\n                            if (v in _.CONSTANTS) {\n                                subbed = e;\n                                e = new Symbol(_.CONSTANTS[v]);\n                            }\n                            //next substitutions. This allows declared variable to be overridden\n                            //check if the values match to avoid erasing the multiplier. \n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n                            else if (v in substitutions && v !== substitutions[v].value) {\n                                subbed = e;\n                                e = substitutions[v].clone();\n                            }\n                            //next declare variables\n                            else if (v in VARS) {\n                                subbed = e;\n                                e = VARS[v].clone();\n                            }\n                            //make notation of what it was before\n                            if (subbed)\n                                e.subbed = subbed;\n\n                            Q.push(e);\n                        }\n                    }\n                }\n\n                return Q[0];\n            }\n            catch(error) {\n                throw new ParseError(error.message+': '+e.column);\n            }\n        };\n        /**\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes \n         * it right away. The operator functions are called when their respective operators are reached. For instance\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each \n         * character of the string and placing the operators on the stack and values on the output. When an operator\n         * having a lower order than the last is reached then the stack is processed from the last operator on the \n         * stack.\n         * @param {String} token\n         */\n\n        function Node(token) {\n            this.type = token.type;\n            this.value = token.value;\n            //the incoming token may already be a Node type\n            this.left = token.left;\n            this.right = token.right;\n        }\n\n        Node.prototype.toString = function () {\n            var left = this.left ? this.left.toString() + '---' : '';\n            var right = this.right ? '---' + this.right.toString() : '';\n            return left + '(' + this.value + ')' + right;\n        };\n\n        Node.prototype.toHTML = function (depth, indent) {\n            depth = depth || 0;\n            indent = typeof indent === 'undefined' ? 4 : indent;\n            var tab = function (n) {\n                return ' '.repeat(indent * n);\n            };\n            var html = '';\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n            if (left || right) {\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n            }\n            html += '';\n            return html;\n        };\n\n        this.tree = function (tokens) {\n            var Q = [];\n            for (var i = 0; i < tokens.length; i++) {\n                var e = tokens[i];\n                //Arrays indicate a new scope so parse that out\n                if (Array.isArray(e)) {\n                    e = this.tree(e);\n                    //if it's a comma then it's just arguments\n                    Q.push(e);\n                    continue;\n                }\n                if (e.type === Token.OPERATOR) {\n                    if (e.is_prefix || e.postfix) {\n                        //prefixes go to the left, postfix to the right\n                        var location = e.is_prefix ? 'left' : 'right';\n                        var last = Q.pop();\n                        e = new Node(e);\n                        e[location] = last;\n                        Q.push(e);\n                    }\n                    else {\n                        e = new Node(e);\n                        e.right = Q.pop();\n                        e.left = Q.pop();\n                        Q.push(e);\n                    }\n                }\n                else if (e.type === Token.FUNCTION) {\n                    e = new Node(e);\n                    var args = Q.pop();\n                    e.right = args;\n                    if (e.value === 'object') {\n                        //check if Q has a value\n                        var last = Q[Q.length - 1];\n                        if (last) {\n                            while (last.right) {\n                                last = last.right;\n                            }\n                            last.right = e;\n                            continue;\n                        }\n                    }\n\n                    Q.push(e);\n                }\n                else {\n                    Q.push(new Node(e));\n                }\n            }\n\n            return Q[0];\n        };\n        this.parse = function (e, substitutions) {\n            e = prepare_expression(e);\n            substitutions = substitutions || {};\n            //three passes but easier to debug\n            var tokens = this.tokenize(e);\n            var rpn = this.toRPN(tokens);\n            return this.parseRPN(rpn, substitutions);\n        };\n        /**\n         * TODO: Switch to Parser.tokenize for this method\n         * Reads a string into an array of Symbols and operators\n         * @param {String} expression_string\n         * @returns {Array}\n         */\n        this.toObject = function (expression_string) {\n            var objectify = function (tokens) {\n                var output = [];\n                for (var i = 0, l = tokens.length; i < l; i++) {\n                    var token = tokens[i];\n                    var v = token.value;\n                    if (token.type === Token.VARIABLE_OR_LITERAL) {\n                        output.push(new Symbol(v));\n                    }\n                    else if (token.type === Token.FUNCTION) {\n                        //jump ahead since the next object are the arguments\n                        i++;\n                        //create a symbolic function and stick it on output\n                        var f = _.symfunction(v, objectify(tokens[i]));\n                        f.isConversion = true;\n                        output.push(f);\n                    }\n                    else if (token.type === Token.OPERATOR) {\n                        output.push(v);\n                    }\n                    else {\n                        output.push(objectify(token));\n                    }\n                }\n\n                return output;\n            };\n            return objectify(_.tokenize(expression_string));\n        };\n        //helper method for toTeX\n        var chunkAtCommas = function (arr) {\n            var j, k = 0, chunks = [[]];\n            for (var j = 0, l = arr.length; j < l; j++) {\n                if (arr[j] === ',') {\n                    k++;\n                    chunks[k] = [];\n                }\n                else {\n                    chunks[k].push(arr[j]);\n                }\n            }\n            return chunks;\n        };\n        //helper method for toTeX\n        var rem_brackets = function (str) {\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n                if (a)\n                    return a;\n                return str;\n            });\n        };\n        /*\n         * Convert expression or object to LaTeX\n         * @param {String} expression_or_obj\n         * @param {object} opt\n         * @returns {String}\n         */\n        this.toTeX = function (expression_or_obj, opt) {\n            opt = opt || {};\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n                    TeX = [],\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n            if (isArray(obj)) {\n                var nobj = [], a, b;\n                //first handle ^\n                for (var i = 0; i < obj.length; i++) {\n                    a = obj[i];\n\n                    if (obj[i + 1] === '^') {\n                        b = obj[i + 2];\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n                        i += 2;\n                    }\n                    else\n                        nobj.push(a);\n                }\n                obj = nobj;\n            }\n\n            for (var i = 0, l = obj.length; i < l; i++) {\n                var e = obj[i];\n                //convert * to cdot\n                if (e === '*') {\n                    e = cdot;\n                }\n\n                if (isSymbol(e)) {\n                    if (e.group === FN) {\n                        var fname = e.fname, f;\n\n                        if (fname === SQRT)\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\n                        else if (fname === ABS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\n                        else if (fname === PARENTHESIS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        else if (fname === Settings.LOG10) {\n                            f = '\\\\'+Settings.LOG10_LATEX+'\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n                        }\n                        else if (fname === 'integrate') {\n                            /* Retrive [Expression, x] */\n                            var chunks = chunkAtCommas(e.args);\n                            /* Build TeX */\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[1]);\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\n                        }\n                        else if (fname === 'defint') {\n                            var chunks = chunkAtCommas(e.args),\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[3]),\n                                    lb = this.toTeX(chunks[1]),\n                                    ub = this.toTeX(chunks[2]);\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n\n                        }\n                        else if (fname === 'diff') {\n                            var chunks = chunkAtCommas(e.args);\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n                            if (chunks.length === 1) {\n                                var vars = [];\n                                for (j = 0; j < chunks[0].length; j++) {\n                                    if (chunks[0][j].group === 3) {\n                                        vars.push(chunks[0][j].value);\n                                    }\n                                }\n                                vars.sort();\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\n                            }\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\n                            else if (chunks.length === 2) {\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                            }\n                            /* If we have more than 2 arguments, we assume we've got everything */\n                            else {\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                            }\n\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\n\n                        }\n                        else if (fname === 'sum' || fname === 'product') {\n                            // Split e.args into 4 parts based on locations of , symbols.\n                            var argSplit = [[], [], [], []], j = 0, i;\n                            for (i = 0; i < e.args.length; i++) {\n                                if (e.args[i] === ',') {\n                                    j++;\n                                    continue;\n                                }\n                                argSplit[j].push(e.args[i]);\n                            }\n                            // Then build TeX string.\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n                        }\n                        else if (fname === 'limit') {\n                            var args = chunkAtCommas(e.args).map(function (x) {\n                                if (Array.isArray(x))\n                                    return _.toTeX(x.join(''));\n                                return _.toTeX(String(x));\n                            });\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n                        }\n                        else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL)\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\n                        else {\n                            f = LaTeX.latex(e);\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        }\n\n                        TeX.push(f);\n                    }\n                    else\n                        TeX.push(LaTeX.latex(e));\n                }\n                else if (isArray(e)) {\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\n                }\n                else {\n                    if (e === '/')\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\n                    else\n                        TeX.push(e);\n                }\n            }\n\n            return TeX.join(' ');\n        };\n\n//Parser.functions ==============================================================\n        /* Although parens is not a \"real\" function it is important in some cases when the \n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\n         * as the parser will get rid of it at the first opportunity\n         */\n        function parens(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                return symbol;\n            }\n            return _.symfunction('parens', [symbol]);\n        }\n\n        function abs(symbol) {\n            if (symbol.multiplier.lessThan(0))\n                symbol.multiplier.negate();\n            if (symbol.isImaginary()) {\n                var re = symbol.realpart();\n                var im = symbol.imagpart();\n                if (re.isConstant() && im.isConstant())\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n            }\n            else if (isNumericSymbol(symbol) || even(symbol.power)) {\n                return symbol;\n            }\n            if (symbol.isComposite()) {\n                var ms = [];\n                symbol.each(function (x) {\n                    ms.push(x.multiplier);\n                });\n                var gcd = Math2.QGCD.apply(null, ms);\n                if (gcd.lessThan(0)) {\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n                    symbol.distributeMultiplier();\n                }\n            }\n            return _.symfunction(ABS, [symbol]);\n        }\n        /**\n         * The factorial function\n         * @param {Symbol} symbol\n         * @return {Symbol}\n         */\n        function factorial(symbol) {\n            var retval;\n            if (isVector(symbol)) {\n                var V = new Vector();\n                symbol.each(function (x, i) {\n                    //i start at one.\n                    V.set(i - 1, factorial(x));\n                });\n                return V;\n            }\n            if (isMatrix(symbol)) {\n                var M = new Matrix();\n                symbol.each(function (x, i, j) {\n                    //i start at one.\n                    M.set(i, j, factorial(x));\n                });\n                return M;\n            }\n            if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n                if (isInt(symbol)) {\n                    retval = Math2.bigfactorial(symbol);\n                }\n                else {\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n                }\n\n                retval = bigConvert(retval);\n                return retval;\n            }\n            else if (symbol.isConstant()) {\n                var den = symbol.getDenom();\n                if (den.equals(2)) {\n                    var num = symbol.getNum();\n                    var a, b, c, n;\n\n                    if (!symbol.multiplier.isNegative()) {\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                    }\n                    else {\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\n                    }\n                    c = a.divide(b);\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n                }\n            }\n            return _.symfunction(FACTORIAL, [symbol]);\n        }\n        ;\n        /**\n         * Returns the continued fraction of a number\n         * @param {Symbol} symbol\n         * @param {Symbol} n\n         * @returns {Symbol}\n         */\n        function continued_fraction(symbol, n) {\n            var _symbol = evaluate(symbol);\n            if (_symbol.isConstant()) {\n                var cf = Math2.continuedFraction(_symbol, n);\n                //convert the fractions array to a new Vector\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n                    return new Symbol(x);\n                }));\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n            }\n            return _.symfunction('continued_fraction', arguments);\n        }\n        ;\n        /**\n         * The mod function\n         * @param {Symbol} symbol1\n         * @param {Symbol} symbol2\n         * @returns {Symbol}\n         */\n        function mod(symbol1, symbol2) {\n            if (symbol1.isConstant() && symbol2.isConstant()) {\n                var retval = new Symbol(1);\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n                return retval;\n            }\n            //try to see if division has remainder of zero\n            var r = _.divide(symbol1.clone(), symbol2.clone());\n            if (isInt(r))\n                return new Symbol(0);\n            return _.symfunction('mod', [symbol1, symbol2]);\n        }\n        /**\n         * A branghing function\n         * @param {Boolean} condition\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        function IF(condition, a, b) {\n            if (typeof condition !== 'boolean')\n                if (isNumericSymbol(condition))\n                    condition = !!Number(condition);\n            if (condition)\n                return a;\n            return b;\n        }\n        /**\n         * \n         * @param {Matrix|Vector|Set|Collection} obj\n         * @param {Symbol} item\n         * @returns {Boolean}\n         */\n        function is_in(obj, item) {\n            if(isMatrix(obj)) {\n                for(var i=0, l=obj.rows(); i<l; i++) {\n                    for(var j=0, l2=obj.cols(); j<l2; j++) {\n                        var element = obj.elements[i][j];\n                        if(element.equals(item))\n                            return new Symbol(1);\n                    }\n                }\n            }\n            else if(obj.elements) {\n                for(var i=0, l=obj.elements.length; i<l; i++) {\n                    if(obj.elements[i].equals(item))\n                        return new Symbol(1);\n                }\n            }\n            \n            return new Symbol(0);\n        }\n        \n        /**\n         * A symbolic extension for sinc\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sinc(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant()) {\n                    return new Symbol(Math2.sinc(symbol));\n                }\n                return _.parse(format('sin({0})/({0})', symbol));\n            }\n            return _.symfunction('sinc', [symbol]);\n        }\n\n        /**\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\n         * Thanks @ Happypig375\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function exp(symbol) {\n            return _.parse(format('e^({0})', symbol));\n        }\n        \n        /**\n         * Converts value degrees to radians\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function radians(symbol) {\n            return _.parse(format('({0})*pi/180', symbol));\n        }\n        \n        /**\n         * Converts value from radians to degrees\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function degrees(symbol) {\n            return _.parse(format('({0})*180/pi', symbol));\n        }\n        \n        function nroots(symbol) {\n            var a, b;\n            if(symbol.group === FN && symbol.fname === '') {\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n                b = _.parse(symbol.power);\n            }\n            else if(symbol.group === P) {\n                a = _.parse(symbol.value);\n                b = _.parse(symbol.power);\n            }\n            \n            if(a && b && a.group === N && b.group === N) {\n                var _roots = [];\n                var parts = Symbol.toPolarFormArray(symbol);\n                var r = _.parse(a).abs().toString();\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n                var x = arg(a).toString();\n                var n = b.multiplier.den.toString();\n                var p = b.multiplier.num.toString();\n                \n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n                for(var i=0; i<n; i++) {\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n                }\n                return Vector.fromArray(_roots);\n            }\n            else if(symbol.isConstant(true)) {\n                var sign = symbol.sign();\n                var x = evaluate(symbol.abs());\n                var root = _.sqrt(x);\n                \n                var _roots = [root.clone(), root.negate()];\n                \n                if(sign < 0)\n                    _roots = _roots.map(function(x) {\n                        return _.multiply(x, Symbol.imaginary());\n                    });\n            }\n            else {\n                _roots = [_.parse(symbol)];\n            }\n            \n            return Vector.fromArray(_roots);\n        }\n        \n        /**\n         * The square root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sqrt(symbol) {\n            if (symbol.fname === '' && symbol.power.equals(1))\n                symbol = symbol.args[0];\n\n            var is_negative = symbol.multiplier.sign() < 0;\n\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant() && !is_negative) {\n                    return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));\n                }\n                else if (symbol.isImaginary()) {\n                    return complex.sqrt(symbol);\n                }\n            }\n\n            var img, retval,\n                    isConstant = symbol.isConstant();\n\n            if (symbol.group === CB && symbol.isLinear()) {\n                var m = sqrt(Symbol(symbol.multiplier));\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    m = _.multiply(m, sqrt(x));\n                }\n\n                retval = m;\n            }\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n            else if (symbol.fname === SQRT) {\n                var s = symbol.args[0];\n                var ms = symbol.multiplier;\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\n                retval = s;\n                //grab the multiplier\n                if (!ms.equals(1))\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\n            }\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\n            //no need to keep sqrt(x^(1/3))\n            else if (!symbol.power.isInteger()) {\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n                retval = symbol;\n            }\n            else {\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n                //to sqrt(a)*sqrt(b)^1 for better simplification\n                //the sign of the power\n                var sign = symbol.power.sign();\n                //remove the sign\n                symbol.power = symbol.power.abs();\n\n                //if the symbols is imagary then we place in the imaginary part. We'll return it \n                //as a product\n                if (isConstant && symbol.multiplier.lessThan(0)) {\n                    img = Symbol.imaginary();\n                    symbol.multiplier = symbol.multiplier.abs();\n                }\n\n                var q = symbol.multiplier.toDecimal(),\n                        qa = Math.abs(q),\n                        t = Math.sqrt(qa);\n\n                var m;\n                //it's a perfect square so take the square\n                if (isInt(t)) {\n                    m = new Symbol(t);\n                }\n                else if (isInt(q)) {\n                    var factors = Math2.ifactor(q);\n                    var tw = 1;\n                    for (var x in factors) {\n                        var n = factors[x],\n                                nn = (n - (n % 2)); //get out the whole numbers\n                        if (nn) { //if there is a whole number ...\n                            var w = Math.pow(x, nn);\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\n                            q /= w; //reduce the number by the wholes\n                        }\n                    }\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n                }\n                else {\n                    //reduce the numerator and denominator using prime factorization\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n                    var r = [new Symbol(1), new Symbol(1)];\n                    var sq = [new Symbol(1), new Symbol(1)];\n                    for (var i = 0; i < 2; i++) {\n                        var n = c[i];\n                        //get the prime factors and loop through each. \n                        pfactor(n).each(function (x) {\n                            x = Symbol.unwrapPARENS(x);\n                            var b = x.clone().toLinear();\n                            var p = Number(x.power);\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                        });\n                    }\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n                }\n\n\n                //strip the multiplier since we already took the sqrt\n                symbol = symbol.toUnitMultiplier(true);\n                //if the symbol is one just return one and not the sqrt function\n                if (symbol.isOne()) {\n                    retval = symbol;\n                }\n                else if (even(symbol.power.toString())) {\n                    //just raise it to the 1/2\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\n                }\n                else {\n                    retval = _.symfunction(SQRT, [symbol]);\n                }\n\n                //put back the sign that was removed earlier\n                if (sign < 0)\n                    retval.power.negate();\n\n                if (m)\n                    retval = _.multiply(m, retval);\n\n                if (img)\n                    retval = _.multiply(img, retval);\n            }\n\n            if (is_negative && Settings.PARSE2NUMBER)\n                return _.parse(retval);\n            return retval;\n        }\n        \n        function scientific(symbol, sigfigs) {\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to \n            //display this\n            symbol.scientific = sigfigs || 10;\n            return symbol;\n        }\n\n        /**\n         * \n         * @param {Symbol} num - the number being raised\n         * @param {Symbol} p - the exponent\n         * @param {type} prec - the precision wanted\n         * @param {bool} asbig - true if a bigDecimal is wanted\n         * @returns {Symbol}\n         */\n        //TODO: this method needs serious optimization\n        function nthroot(num, p, prec, asbig) {\n            if (typeof asbig === 'undefined')\n                asbig = true;\n            prec = prec || 25;\n            if (!isSymbol(p))\n                p = _.parse(p);\n            if (isInt(num) && p.isConstant()) {\n                var sign = num.sign(),\n                        x;\n                num = abs(num); //remove the sign\n                var idx = num + '-' + p;\n                if (idx in Settings.CACHE.roots) {\n                    x = new bigInt(Settings.CACHE.roots[idx]);\n                    if (!even(p))\n                        x = x.multiply(sign);\n                }\n                else {\n                    if (num < 18446744073709551616) //2^64\n                        x = Frac.create(Math.pow(num, 1 / p));\n                    else\n                        x = Math2.nthroot(num, p);\n                }\n                if (isInt(x) || Settings.PARSE2NUMBER) {\n                    if (asbig)\n                        return new Symbol(x);\n                    return new Symbol(x.toDecimal(prec));\n                }\n            }\n\n            if (Number(p) === 2)\n                return _.sqrt(num);\n\n            return _.symfunction('nthroot', arguments);\n        }\n\n        function pfactor(symbol) {\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n            //More Big Number issues >:(\n            if (symbol.greaterThan(9.999999999998891e+41))\n                return symbol;\n            //Fix issue #298\n            if (symbol.equals(Math.PI))\n                return new Symbol(Math.PI);\n            //evaluate the symbol to merge constants\n            symbol = evaluate(symbol.clone());\n\n\n            if (symbol.isConstant()) {\n                var retval = new Symbol(1);\n                var m = symbol.toString();\n                if (isInt(m)) {\n                    var factors = Math2.ifactor(m);\n                    for (var factor in factors) {\n                        var p = factors[factor];\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n                    }\n                }\n                else {\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n                }\n            }\n            else\n                retval = _.symfunction('pfactor', arguments);\n            return retval;\n        }\n\n        /**\n         * Get's the real part of a complex number. Return number if real\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function realpart(symbol) {\n            return symbol.realpart();\n        }\n\n        /**\n         * Get's the imaginary part of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function imagpart(symbol) {\n            return symbol.imagpart();\n        }\n\n        /**\n         * Computes the conjugate of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function conjugate(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant())\n                return new Symbol(Math.atan2(im, re));\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant()) {\n                if(im.equals(0) && re.equals(-1)) {\n                    return _.parse('pi');\n                }\n                else if(im.equals(1) && re.equals(0)) {\n                    return _.parse('pi/2');\n                }\n                else if(im.equals(1) && re.equals(1)) {\n                    return _.parse('pi/4');\n                }\n                return new Symbol(Math.atan2(im, re));\n            }\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the polarform of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function polarform(symbol) {\n            var p, r, e, theta;\n            p = Symbol.toPolarFormArray(symbol);\n            theta = p[1];\n            r = p[0];\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n            return _.multiply(r, e);\n        }\n\n        /**\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rectform(symbol) {\n            //TODO: e^((i*pi)/4)\n            var original = symbol.clone();\n            try {\n                var f, p, q, s, h, d, n;\n                f = decompose_fn(symbol, 'e', true);\n                p = _.divide(f.x.power, Symbol.imaginary());\n                q = evaluate(trig.tan(p));\n                s = _.pow(f.a, new Symbol(2));\n                d = q.getDenom(true);\n                n = q.getNum();\n                h = Symbol.hyp(n, d);\n                //check \n                if (h.equals(f.a)) {\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\n                }\n                else {\n                    return original;\n                }\n            }\n            catch (e) {\n                return original;\n            }\n        }\n\n        function symMinMax(f, args) {\n            args.map(function (x) {\n                x.numVal = evaluate(x).multiplier;\n            });\n            var l, a, b, a_val, b_val;\n            while (true) {\n                l = args.length;\n                if (l < 2)\n                    return args[0];\n                a = args.pop();\n                b = args[l - 2];\n                if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n                    args.pop();\n                    args.push(a);\n                }\n            }\n        }\n\n        /**\n         * Returns maximum of a set of numbers\n         * @returns {Symbol}\n         */\n        function max() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.max.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('max', args);\n            return _.symfunction('max', args);\n        }\n\n        /**\n         * Returns minimum of a set of numbers\n         * @returns {Symbol}\n         */\n        function min() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.min.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('min', args);\n            return _.symfunction('min', args);\n        }\n\n        /**\n         * Returns the sign of a number\n         * @param {Symbol} x\n         * @returns {Symbol}\n         */\n        function sign(x) {\n            if (x.isConstant(true))\n                return new Symbol(Math.sign(evaluate(x)));\n            return _.symfunction('sign', arguments);\n        }\n\n        function sort(symbol, opt) {\n            opt = opt ? opt.toString() : 'asc';\n            var getval = function (e) {\n                if (e.group === N)\n                    return e.multiplier;\n                if (e.group === FN) {\n                    if (e.fname === '')\n                        return getval(e.args[0]);\n                    return e.fname;\n                }\n                if (e.group === S)\n                    return e.power;\n\n                return e.value;\n            };\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n            return new Vector(symbols.sort(function (a, b) {\n                var aval = getval(a),\n                        bval = getval(b);\n                if (opt === 'desc')\n                    return bval - aval;\n                return aval - bval;\n            }));\n        }\n\n        /**\n         * The log function\n         * @param {Symbol} symbol\n         * @param {Symbol} base\n         * @returns {Symbol}\n         */\n        function log(symbol, base) {\n            if(symbol.equals(1)) {\n                return new Symbol(0);\n            }\n            \n            var retval;\n            if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n                return _.divide(log(symbol.args[0]), new Symbol(2));\n            }\n\n            //log(0) is undefined so complain\n            if (symbol.equals(0)) {\n                throw new UndefinedError(Settings.LOG+'(0) is undefined!');\n            }\n\n            //deal with imaginary values\n            if (symbol.isImaginary()) {\n                return complex.evaluate(symbol, Settings.LOG);\n                /*\n                 var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),\n                 b = format('({0})*PI/2', Settings.IMAGINARY);\n                 \n                 return _.add(_.parse(a), _.parse(b));\n                 */\n            }\n\n            if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n                /*\n                 var log_sym = Math2.bigLog(symbol.multiplier);\n                 var log_base = Math2.bigLog(base.multiplier);\n                 retval = new Symbol(log_sym.divide());\n                 */\n                var log_sym = Math.log(symbol);\n                var log_base = Math.log(base);\n                retval = new Symbol(log_sym / log_base);\n            }\n            else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n                symbol.power.negate();\n                //move the negative outside but keep the positive inside :)\n                retval = log(symbol).negate();\n            }\n            else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n                var p = symbol.power;\n                retval = isSymbol(p) ? p : new Symbol(p);\n            }\n            else if (symbol.group === FN && symbol.fname === 'exp') {\n                var s = symbol.args[0];\n                if (symbol.multiplier.equals(1))\n                    retval = _.multiply(s, new Symbol(symbol.power));\n                else\n                    retval = _.symfunction(Settings.LOG, [symbol]);\n            }\n            else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n                var img_part;\n                if (symbol.multiplier.lessThan(0)) {\n                    symbol.negate();\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n                }\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n                if (img_part)\n                    retval = _.add(retval, img_part);\n            }\n            else {\n                var s;\n                if (!symbol.power.equals(1)) {\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n                    symbol.toLinear();\n                }\n                //log(a,a) = 1 since the base is allowed to be changed. \n                //This was pointed out by Happypig375 in issue #280\n                if (arguments.length > 1 && allSame(arguments))\n                    retval = new Symbol(1);\n                else\n                    retval = _.symfunction(Settings.LOG, arguments);\n\n                if (s)\n                    retval = _.multiply(s, retval);\n            }\n            return retval;\n        }\n\n        /**\n         * Round a number up to s decimal places\n         * @param {Number} x\n         * @param {int} s - the number of decimal places\n         * @returns {undefined}\n         */\n        function round(x, s) {\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n            if (x.isConstant() && sIsConstant) {\n                var v, e, exp, retval;\n                v = x;\n                //round the coefficient of then number but not the actual decimal value\n                //we know this because a negative number was passed\n                if (s && s.lessThan(0)) {\n                    s = abs(s);\n                    //convert the number to exponential form\n                    e = Number(x).toExponential().toString().split('e');\n                    //point v to the coefficient of then number\n                    v = e[0];\n                    //set the expontent\n                    exp = e[1];\n                }\n                //round the number to the requested precision\n                retval = new Symbol(nround(v, Number(s || 0)));\n                //if there's a exponent then put it back\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\n            }\n\n\n            return _.symfunction('round', arguments);\n        }\n\n        /**\n         * Gets the quadrant of the trig function\n         * @param {Frac} m\n         * @returns {Int}\n         */\n        function getQuadrant(m) {\n            var v = m % 2, quadrant;\n\n            if (v < 0)\n                v = 2 + v; //put it in terms of pi\n\n            if (v >= 0 && v <= 0.5)\n                quadrant = 1;\n            else if (v > 0.5 && v <= 1)\n                quadrant = 2;\n            else if (v > 1 && v <= 1.5)\n                quadrant = 3;\n            else\n                quadrant = 4;\n            return quadrant;\n        }\n\n        /*\n         * Serves as a bridge between numbers and bigNumbers\n         * @param {Frac|Number} n\n         * @returns {Symbol} \n         */\n        function bigConvert(n) {\n            if (!isFinite(n)) {\n                var sign = Math.sign(n);\n                var r = new Symbol(String(Math.abs(n)));\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\n                return r;\n            }\n            if (isSymbol(n))\n                return n;\n            if (typeof n === 'number') {\n                try {\n                    n = Frac.simple(n);\n                }\n                catch (e) {\n                    n = new Frac(n);\n                }\n            }\n\n            var symbol = new Symbol(0);\n            symbol.multiplier = n;\n            return symbol;\n        }\n        ;\n\n        function clean(symbol) {\n            // handle functions with numeric values\n            // handle denominator within denominator\n            // handle trig simplifications\n            var g = symbol.group, retval;\n            //Now let's get to work\n            if (g === CP) {\n                var num = symbol.getNum(),\n                        den = symbol.getDenom() || new Symbol(1),\n                        p = Number(symbol.power),\n                        factor = new Symbol(1);\n                if (Math.abs(p) === 1) {\n                    den.each(function (x) {\n                        if (x.group === CB) {\n                            factor = _.multiply(factor, clean(x.getDenom()));\n                        }\n                        else if (x.power.lessThan(0)) {\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n                        }\n                    });\n\n                    var new_den = new Symbol(0);\n                    //now divide out the factor and add to new den\n                    den.each(function (x) {\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\n                    });\n\n                    factor.invert(); //invert so it can be added to the top\n                    var new_num;\n                    if (num.isComposite()) {\n                        new_num = new Symbol(0);\n                        num.each(function (x) {\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n                        });\n                    }\n                    else\n                        new_num = _.multiply(factor, num);\n\n                    retval = _.divide(new_num, new_den);\n                }\n            }\n            else if (g === CB) {\n                retval = new Symbol(1);\n                symbol.each(function (x) {\n                    retval = _.multiply(retval, _.clean(x));\n                });\n            }\n            else if (g === FN) {\n                if (symbol.args.length === 1 && symbol.args[0].isConstant())\n                    retval = block('PARSE2NUMBER', function () {\n                        return _.parse(symbol);\n                    }, true);\n            }\n\n            if (!retval)\n                retval = symbol;\n\n            return retval;\n        }\n\n        /**\n         * Expands a symbol\n         * @param symbol\n         */\n        function expand(symbol) {\n            //deal with parenthesis\n            if (symbol.group === FN && symbol.fname === '') {\n                return _.expand(symbol.args[0]);\n            }\n\n            //TODO - some test need to be verified in order to implement this\n            /*\n             if(symbol.group === FN) {\n             symbol.args[0] = _.expand(symbol.args[0]);\n             symbol.updateHash();\n             return symbol;\n             }\n             */\n\n            if (!symbol.symbols)\n                return symbol; //nothing to do\n\n            var original = symbol.clone();\n            try {\n\n                if (!symbol.symbols)\n                    return symbol;\n\n                //expand all the symbols\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    symbol.symbols[s] = expand(x);\n                }\n\n                symbol = _.parse(symbol);\n\n                var p = symbol.power,\n                        m = symbol.multiplier.clone(),\n                        pn = Number(p);\n                if (isInt(pn) && pn > 0 && symbol.isComposite()) {\n                    var f = new Symbol(0);\n                    //we loop through the f and make sure that it's fully expanded\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x];\n                        if (sym.power.greaterThan(1))\n                            sym = _.expand(sym);\n                        f = _.add(f, sym);\n                    }\n\n                    //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)\n                    //we have n=p-1=2 iterations where p=3 in this case\n                    var n = pn - 1;\n                    //Initiate with the first term. Remember that we have p-1 iterations because\n                    //the first iteration is equal to P where p is the polynomial\n                    var result = f.clone(); //initiate this as the first term\n                    //the first loop is the top iterator and remains untouched. No sub-symbols\n                    //from this symbol are allowed to be touched\n                    for (var i = 0; i < n; i++) {\n                        var t = new Symbol(0);\n                        for (var x in f.symbols) {\n                            var a = f.symbols[x];\n                            //we now loop through the \n                            for (var y in result.symbols) {\n                                var b = _.multiply(a.clone(), result.symbols[y]);\n                                //the result must always be a composite. If not expand\n                                if (b.group === CB)\n                                    b = _.expand(b);\n                                t = _.add(t, b);\n                            }\n                        }\n                        ;\n                        result = t;\n                    }\n\n                    //put back the multiplier\n                    if (!m.equals(1)) {\n                        for (var s in result.symbols) {\n                            var x = result.symbols[s];\n                            x.multiplier = x.multiplier.multiply(m);\n                            if (x.isComposite())\n                                x.distributeMultiplier();\n                            symbol.symbols[s] = x;\n                        }\n                    }\n\n                    return result;\n                }\n                else if (symbol.group === CB) {\n                    //check if the symbol has composites\n                    var hascomposites = false,\n                            sp = symbol.power.clone(),\n                            sign = symbol.power.sign();\n\n                    for (var x in symbol.symbols) {\n                        var sub = symbol.symbols[x];\n                        if (sub.isComposite()) {\n                            hascomposites = true;\n                            break;\n                        }\n\n                        if (isSymbol(sub.power) || isSymbol(sp)) {\n                            sub.power = _.multiply(sub.power, Symbol(sp));\n                            sub.group = EX;\n                        }\n                        else\n                            sub.power = sub.power.multiply(sp);\n                    }\n\n                    symbol.toLinear();\n\n                    //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing\n                    symbol = _.parse(symbol.text());\n\n                    if (!hascomposites)\n                        return symbol; //nothing to do here\n\n                    var result = new Symbol(0);\n                    var composites = [],\n                            non_composites = new Symbol(symbol.multiplier);\n\n                    //sort them out\n                    for (var s in symbol.symbols) {\n                        var x = symbol.symbols[s];\n\n                        if (x.group === EX)\n                            continue;\n                        if (x.isComposite()) {\n                            var p = x.power, isDenom = false;\n                            ;\n                            if (isInt(p)) {\n                                if (p < 0) {\n                                    x.power.negate();\n                                    isDenom = true;\n                                }\n                            }\n\n                            if (isDenom) {\n                                x.power.negate();\n                                non_composites = _.multiply(non_composites, x);\n                            }\n                            else\n                                composites.push(x);\n                        }\n                        else\n                            non_composites = _.multiply(non_composites, x);\n                    }\n\n                    //grab the first symbol since we'll loop over that one to begin\n                    result = composites.pop();\n\n                    while (composites.length) {\n                        var s = composites.pop();\n                        var t = new Symbol(0);\n                        result.each(function (x) {\n                            s.each(function (y) {\n                                var prod = _.multiply(x.clone(), y.clone());\n                                t = _.add(t, prod);\n                            });\n                        });\n\n                        result = t;\n                    }\n\n                    var finalResult = new Symbol(0);\n                    //put back the multiplier\n                    result.each(function (x) {\n                        finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));\n                    });\n                    //expand the power\n                    finalResult.power = finalResult.power.multiply(sp.abs());\n\n                    symbol = _.expand(finalResult);\n\n                    if (sign < 0)\n                        symbol.invert();\n                }\n            }\n            catch (e) {\n                return original;\n            }\n\n            return symbol;\n        }\n        \n        /**\n         * Returns an identity matrix of nxn\n         * @param {Number} n\n         * @returns {Matrix}\n         */\n        function imatrix(n) {\n            return Matrix.identity(n);\n        }\n        \n        /**\n         * Retrieves and item from a vector\n         * @param {Vector} vector\n         * @param {Number} index\n         * @returns {Vector|Symbol}\n         */\n        function vecget(vector, index) {\n            if (index.isConstant() && isInt(index))\n                return vector.elements[index];\n            return _.symfunction('vecget', arguments);\n        }\n        \n        /**\n         * Removes duplicates from a vector\n         * @param {Vector} vector\n         * @param {Number} tolerance\n         * @returns {Vector}\n         */\n        function vectrim(vector, tolerance) {\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n            \n            vector = vector.clone();\n            \n            tolerance = Number(tolerance);\n            //place algebraic solutions first\n            vector.elements.sort(function(a, b) {\n                return b.group - a.group;\n            });\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n            vector.elements = removeDuplicates(vector.elements, function(a, b) {\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n                return diff <= tolerance;\n            });\n            \n            return vector;\n        }\n        \n        /**\n         * Set a value for a vector at a given index\n         * @param {Vector} vector\n         * @param {Number} index\n         * @param {Symbol} value\n         * @returns {Vector}\n         */\n        function vecset(vector, index, value) {\n            if (!index.isConstant)\n                return _.symfunction('vecset', arguments);\n            vector.elements[index] = value;\n            return vector;\n        }\n\n        function matget(matrix, i, j) {\n            if (i.isConstant() && j.isConstant())\n                return matrix.elements[i][j];\n            return _.symfunction('matget', arguments);\n        }\n\n        function matgetrow(matrix, i) {\n            if (i.isConstant())\n                return new Matrix(matrix.elements[i]);\n            return _.symfunction('matgetrow', arguments);\n        }\n\n        function matsetrow(matrix, i, x) {\n            //handle symbolics\n            if (!i.isConstant())\n                return _.symfunction('matsetrow', arguments);\n            if (matrix.elements[i].length !== x.elements.length)\n                throw new DimensionError('Matrix row must match row dimensions!');\n            var M = matrix.clone();\n            M.elements[i] = x.clone().elements;\n            return M;\n        }\n\n        function matgetcol(matrix, col_index) {\n            //handle symbolics\n            if (!col_index.isConstant())\n                return _.symfunction('matgetcol', arguments);\n            col_index = Number(col_index);\n            var M = Matrix.fromArray([]);\n            matrix.each(function (x, i, j) {\n                if (j === col_index) {\n                    M.elements.push([x.clone()]);\n                }\n            });\n            return M;\n        }\n\n        function matsetcol(matrix, j, col) {\n            //handle symbolics\n            if (!j.isConstant())\n                return _.symfunction('matsetcol', arguments);\n            j = Number(j);\n            if (matrix.rows() !== col.elements.length)\n                throw new DimensionError('Matrix columns must match number of columns!');\n            col.each(function (x, i) {\n                matrix.set(i - 1, j, x.elements[0].clone());\n            });\n            return matrix;\n        }\n\n\n        function matset(matrix, i, j, value) {\n            matrix.elements[i][j] = value;\n            return matrix;\n        }\n\n        //the constructor for vectors\n        function vector() {\n            return new Vector([].slice.call(arguments));\n        }\n\n        //the constructor for matrices\n        function matrix() {\n            return Matrix.fromArray(arguments);\n        }\n        \n        //the constructor for sets\n        function set() {\n            return Set.fromArray(arguments);\n        }\n\n        function determinant(symbol) {\n            if (isMatrix(symbol)) {\n                return symbol.determinant();\n            }\n            return symbol;\n        }\n\n        function size(symbol) {\n            var retval;\n            if (isMatrix(symbol))\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\n            else if(isVector(symbol) || isSet(symbol)) \n                retval = new Symbol(symbol.elements.length);\n            else\n                err('size expects a matrix or a vector');\n            return retval;\n        }\n\n        function dot(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.dot(vec2);\n            err('function dot expects 2 vectors');\n        }\n\n        function cross(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.cross(vec2);\n            err('function cross expects 2 vectors');\n        }\n\n        function transpose(mat) {\n            if (isMatrix(mat))\n                return mat.transpose();\n            err('function transpose expects a matrix');\n        }\n\n        function invert(mat) {\n            if (isMatrix(mat))\n                return mat.invert();\n            err('invert expects a matrix');\n        }\n        \n        //basic set functions\n        function union(set1, set2) {\n            return set1.union(set2);\n        }\n        \n        function intersection(set1, set2) {\n            return set1.intersection(set2);\n        }\n        \n        function contains(set1, e) {\n            return set1.contains(e);\n        }\n        \n        function difference(set1, set2) {\n            return set1.difference(set2);\n        }\n        \n        function intersects(set1, set2) {\n            return new Symbol(Number(set1.intersects(set2)));\n        }\n        \n        function is_subset(set1, set2) {\n            return new Symbol(Number(set1.is_subset(set2)));\n        }\n        \n        function print() {\n            arguments2Array(arguments).map(function(x) {\n                console.log(x.toString());\n            });\n        }\n        \n        function testSQRT(symbol) {\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\n            if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n                var sign = symbol.power.sign();\n                //don't devide the power directly. Notice the use of toString. This makes it possible\n                //to use a bigNumber library in the future\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\n                //place back the sign of the power\n                if (sign < 0)\n                    retval.invert();\n                return retval;\n            }\n            return symbol;\n        }\n\n        //try to reduce a symbol by pulling its power\n        function testPow(symbol) {\n            if (symbol.group === P) {\n                var v = symbol.value;\n                \n                var fct = primeFactors(v)[0];\n                \n                //safety\n                if(!fct) {\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\n                    return symbol;\n                }\n                \n                var n = new Frac(Math.log(v) / Math.log(fct)),\n                    p = n.multiply(symbol.power);\n                \n                //we don't want a more complex number than before \n                if (p.den > symbol.power.den)\n                    return symbol;\n\n                if (isInt(p))\n                    symbol = Symbol(Math.pow(fct, p));\n                else\n                    symbol = new Symbol(fct).setPower(p);\n            }\n\n            return symbol;\n        }\n\n        //Linke the functions to the parse so they're available outside of the library\n        //This is strictly for convenience and may be deprecated.\n        this.expand = expand;\n        this.clean = clean;\n        this.sqrt = sqrt;\n        this.log = log;\n        this.nthroot = nthroot;\n        this.arg = arg;\n        this.conjugate = conjugate;\n        this.imagpart = imagpart;\n        this.realpart = realpart;\n\n//Parser.methods ===============================================================\n        this.addPreprocessor = function (name, action, order, shift_cells) {\n            var names = preprocessors.names;\n            var actions = preprocessors.actions;\n            if ((typeof action !== 'function')) //the person probably forgot to specify a name\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\n            if (!order) {\n                names.push(name);\n                actions.push(action);\n            }\n            else {\n                if (shift_cells) {\n                    names.splice(order, 0, name);\n                    actions.splice(order, 0, action);\n                }\n                else {\n                    names[order] = name;\n                    actions[order] = action;\n                }\n            }\n        };\n\n        this.getPreprocessors = function () {\n            var preprocessors = {};\n            for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n                var name = preprocessors.names[i];\n                preprocessors[name] = {\n                    order: i,\n                    action: preprocessors.actions[i]\n                };\n            }\n            return preprocessors;\n        };\n\n        this.removePreprocessor = function (name, shift_cells) {\n            var i = preprocessors.names.indexOf(name);\n            if (shift_cells) {\n                remove(preprocessors.names, i);\n                remove(preprocessors.actions, i);\n            }\n            else {\n                preprocessors.names[i] = undefined;\n                preprocessors.actions[i] = undefined;\n            }\n        };\n\n        //The loader for functions which are not part of Math2\n        this.mapped_function = function () {\n            var subs = {},\n                    params = this.params;\n            for (var i = 0; i < params.length; i++)\n                subs[params[i]] = arguments[i];\n\n            return _.parse(this.body, subs);\n        };\n        /**\n         * Adds two symbols\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.add = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with two symbols\n            if (aIsSymbol && bIsSymbol) {\n                //forward the adding of symbols with units to the Unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.add(a, b);\n                }\n                //handle Infinity\n                //https://www.encyclopediaofmath.org/index.php/Infinity\n                if (a.isInfinity || b.isInfinity) {\n                    var aneg = a.multiplier.lessThan(0),\n                            bneg = b.multiplier.lessThan(0);\n\n                    if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n                    }\n\n                    var inf = Symbol.infinity();\n                    if (bneg)\n                        inf.negate();\n                    return inf;\n                }\n\n                if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n                    a.distributeMultiplier();\n                    b.distributeMultiplier();\n                }\n                //no need to waste time on zeroes\n                if (a.multiplier.equals(0))\n                    return b;\n                if (b.multiplier.equals(0))\n                    return a;\n\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n                    return result;\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        ap = a.power.toString(),\n                        bp = b.power.toString();\n\n                //always keep the greater group on the left. \n                if (g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\n                    return this.add(b, a);\n                }\n\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\n                 * because it doesn't know which one to prioritize. */\n                //correction to PL dilemma\n                if (g1 === CB && g2 === PL && a.value === b.value) {\n                    //swap\n                    var t = a;\n                    a = b;\n                    b = t;\n                    g1 = a.group;\n                    g2 = b.group;\n                    ap = a.power.toString();\n                    bp = b.power.toString();\n                }\n\n                var powEQ = ap === bp,\n                        v1 = a.value,\n                        v2 = b.value,\n                        aIsComposite = a.isComposite(),\n                        bIsComposite = b.isComposite(),\n                        h1, h2, result;\n\n                if (aIsComposite)\n                    h1 = text(a, 'hash');\n                if (bIsComposite)\n                    h2 = text(b, 'hash');\n\n                if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n                    return this.add(b, a);\n                }\n\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n                if (g1 === PL && g2 === PL) {\n                    v1 = h1;\n                    v2 = h2;\n                }\n\n                var PN = g1 === P && g2 === N,\n                        PNEQ = a.value === b.multiplier.toString(),\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\n\n                //equal values, equal powers\n                if (valEQ && powEQ && g1 === g2) {\n                    //make sure to convert N to something P can work with\n                    if (PN)\n                        b = b.convert(P);//CL\n\n                    //handle PL\n                    if (g1 === PL && (g2 === S || g2 === P)) {\n                        a.distributeMultiplier();\n                        result = a.attach(b);\n                    }\n                    else {\n                        result = a;//CL\n                        if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n                            for (var s in b.symbols) {\n                                var x = b.symbols[s];\n                                result.attach(x);\n                            }\n                        }\n                        else\n                            result.multiplier = result.multiplier.add(b.multiplier);\n                    }\n                }\n                //equal values uneven powers\n                else if (valEQ && g1 !== PL) {\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n                    if (g1 === CP && g2 === PL) {\n                        b.insert(a);\n                        result = b;\n                    }\n                    else {\n                        result = Symbol.shell(PL).attach([a, b]);\n                        //update the hash\n                        result.value = g1 === PL ? h1 : v1;\n                    }\n                }\n                else if (aIsComposite && a.isLinear()) {\n                    var canIterate = g1 === g2,\n                            bothPL = g1 === PL && g2 === PL;\n\n                    //we can only iterate group PL if they values match\n                    if (bothPL)\n                        canIterate = a.value === b.value;\n                    //distribute the multiplier over the entire symbol\n                    a.distributeMultiplier();\n\n                    if (b.isComposite() && b.isLinear() && canIterate) {\n                        b.distributeMultiplier();\n                        //CL\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            a.attach(x);\n                        }\n                        result = a;\n                    }\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n                    else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n\n                    }\n                    else {\n                        result = a.attach(b);\n                    }\n                }\n                else {\n                    if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n                        var m = b.multiplier.clone();\n                        b = sqrt(b.toUnitMultiplier().toLinear());\n                        b.multiplier = m;\n                    }\n                    //fix for issue #3 and #159\n                    if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n                        result = _.add(expand(a), expand(b));\n                    }\n                    else {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n                    }\n                }\n\n                if (result.multiplier.equals(0))\n                    result = new Symbol(0);\n\n                //make sure to remove unnecessary wraps\n                if (result.length === 1) {\n                    var m = result.multiplier;\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(m);\n                }\n\n                return result;\n            }\n            else {\n                //keep symbols to the right \n                if (bIsSymbol && !aIsSymbol) {\n                    var t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var bIsMatrix = isMatrix(b);\n\n                if (aIsSymbol && bIsMatrix) {\n                    b.eachElement(function (e) {\n                        return _.add(a.clone(), e);\n                    });\n                }\n                else {\n                    if (isMatrix(a) && bIsMatrix) {\n                        b = a.add(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return _.add(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n                return b;\n            }\n\n        };\n        /**\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.subtract = function (a, b) {\n            var aIsSymbol = aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b), t;\n\n            if (aIsSymbol && bIsSymbol) {\n                if (a.unit || b.unit) {\n                    return _.Unit.subtract(a, b);\n                }\n                return this.add(a, b.negate());\n            }\n            else {\n                if (bIsSymbol && isVector(a)) {\n                    b = a.map(function (x) {\n                        return _.subtract(x, b.clone());\n                    });\n                }\n                else if (aIsSymbol && isVector(b)) {\n                    b = b.map(function (x) {\n                        return _.subtract(a.clone(), x);\n                    });\n                }\n                else if (isVector(a) && isVector(b)) {\n                    if (a.dimensions() === b.dimensions())\n                        b = a.subtract(b);\n                    else\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\n                }\n                else if (isMatrix(a) && isVector(b)) {\n                    if (b.elements.length === a.rows()) {\n                        var M = new Matrix(), l = a.cols();\n                        b.each(function (e, i) {\n                            var row = [];\n                            for (var j = 0; j < l; j++) {\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n                            }\n                            M.elements.push(row);\n                        });\n                        return M;\n                    }\n                    else\n                        err('Dimensions must match!');\n                }\n                else if (isVector(a) && isMatrix(b)) {\n                    var M = b.clone().negate();\n                    return _.add(M, a);\n                }\n                else if (isMatrix(a) && isMatrix(b)) {\n                    b = a.subtract(b);\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the * operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.multiply = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with function assignment here\n            if (aIsSymbol && b instanceof Collection) {\n                b.elements.push(a);\n                return b;\n            }\n            if (aIsSymbol && bIsSymbol) {\n                //if it has a unit then add it and return it right away.\n                if (b.isUnit) {\n                    var result = a.clone();\n                    a.unit = b;\n                    return result;\n                }\n                //if it has units then just forward that problem to the unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.multiply(a, b);\n                }\n\n                //handle Infinty\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.equals(0) || b.equals(0))\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\n                    //x/infinity\n                    if (b.power.lessThan(0)) {\n                        if (!a.isInfinity) {\n                            return new Symbol(0);\n                        }\n                        else {\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\n                        }\n                    }\n\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\n                            inf = Symbol.infinity();\n                    if (a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\n                        if (sign < 0)\n                            inf.negate();\n\n                        return inf;\n                    }\n                }\n                //the quickies\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n                    var retval = new Symbol(t);\n                    return retval;\n                }\n\n                //don't waste time\n                if (a.isOne()) {\n                    return b.clone();\n                }\n                if (b.isOne()) {\n                    return a.clone();\n                }\n\n                if (a.multiplier.equals(0) || b.multiplier.equals(0))\n                    return new Symbol(0);\n\n                if (b.group > a.group && !(b.group === CP))\n                    return this.multiply(b, a);\n                //correction for PL/CB dilemma\n                if (a.group === CB && b.group === PL && a.value === b.value) {\n                    var t = a;\n                    a = b;\n                    b = t;//swap\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        bnum = b.multiplier.num,\n                        bden = b.multiplier.den;\n\n                if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n                    //unwrap sqrt\n                    var a_pow = a.power;\n                    a = a.args[0].clone();\n                    a.setPower(new Frac(0.5).multiply(a_pow));\n                    g1 = a.group;\n                }\n                //simplify n/sqrt(n). Being very specific\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n                    a = _.symfunction(SQRT,[b.clone()]);\n                    b = new Symbol(1);\n                };\n\n                var v1 = a.value,\n                        v2 = b.value,\n                        sign = new Frac(a.sign()),\n                        //since P is just a morphed version of N we need to see if they relate\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\n                        //don't multiply the multiplier of b since that's equal to the value of a\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n                        result = a.clone().toUnitMultiplier();\n                b = b.clone().toUnitMultiplier(true);\n\n                //further simplification of sqrt\n                if (g1 === FN && g2 === FN) {\n                    var u = a.args[0].clone();\n                    var v = b.args[0].clone();\n                    if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n\n                        var q = _.divide(u, v).invert();\n                        if (q.gt(1) && isInt(q)) {\n                            //b contains a factor a which can be moved to a\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n                            b = new Symbol(1);\n                        }\n                    }\n                    if (a.fname === FACTORIAL && b.fname === FACTORIAL) {\n                        if (a.power.equals(1) && b.power.equals(-1) && _.subtract(v.clone(), u.clone()).equals(1)) {\n                            result = _.divide(u, v);\n                            b = new Symbol(1);\n                        }\n                    }\n                }\n\n\n                //if both are PL then their hashes have to match\n                if (v1 === v2 && g1 === PL && g1 === g2) {\n                    v1 = a.text('hash');\n                    v2 = b.text('hash');\n                }\n\n                //same issue with (x^2+1)^x*(x^2+1)\n                //EX needs an exception when multiplying because it needs to recognize\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n                if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n                    v1 = text(a, 'hash', EX);\n                }\n\n                if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n                    var p1 = a.power,\n                            p2 = b.power,\n                            isSymbolP1 = isSymbol(p1),\n                            isSymbolP2 = isSymbol(p2),\n                            toEX = (isSymbolP1 || isSymbolP2);\n                    //TODO: this needs cleaning up\n                    if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n                        result = new Symbol(0);\n                        a.each(function (x) {\n                            result = _.add(result, _.multiply(x, b.clone()));\n                        }, true);\n                    }\n                    else {\n                        //add the powers\n                        result.power = toEX ? _.add(\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\n\n                        //eliminate zero power values and convert them to numbers\n                        if (result.power.equals(0))\n                            result = result.convert(N);\n\n                        //properly convert to EX\n                        if (toEX)\n                            result.convert(EX);\n\n                        //take care of imaginaries\n                        if (a.imaginary && b.imaginary) {\n                            var isEven = even(result.power % 2);\n                            if (isEven) {\n                                result = new Symbol(1);\n                                m.negate();\n                            }\n                        }\n\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n                        if (result.group !== EX && result.previousGroup)\n                            result.previousGroup = undefined;\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n                        //the sign but this isn't true if they're equals symbols\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                }\n                else if (g1 === CB && a.isLinear()) {\n                    if (g2 === CB)\n                        b.distributeExponent();\n                    if (g2 === CB && b.isLinear()) {\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            result = result.combine(x);\n                        }\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                    else {\n                        result.combine(b);\n                    }\n                }\n                else {\n                    //the multiplier was already handled so nothing left to do\n                    if (g1 !== N) {\n                        if (g1 === CB) {\n                            result.distributeExponent();\n                            result.combine(b);\n                        }\n                        else if (!b.isOne()) {\n                            var bm = b.multiplier.clone();\n                            b.toUnitMultiplier();\n                            result = Symbol.shell(CB).combine([result, b]);\n                            //transfer the multiplier to the outside\n                            result.multiplier = result.multiplier.multiply(bm);\n                        }\n                    }\n                    else {\n                        result = b.clone().toUnitMultiplier();\n                    }\n                }\n\n                if (result.group === P) {\n                    var logV = Math.log(result.value),\n                            n1 = Math.log(bnum) / logV,\n                            n2 = Math.log(bden) / logV,\n                            ndiv = m.num / bnum,\n                            ddiv = m.den / bden;\n                    //we don't want to divide by zero no do we? Strange things happen.\n                    if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n                        result.power = result.power.add(new Frac(n1));\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\n                    }\n                    if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n                        result.power = result.power.subtract(new Frac(n2));\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\n                    }\n                }\n\n                //unpack CB if length is only one\n                if (result.length === 1) {\n                    var t = result.multiplier;\n                    //transfer the multiplier\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(t);\n                }\n\n                //reduce square root\n                var ps = result.power.toString();\n                if (even(ps) && result.fname === SQRT) {\n                    //grab the sign of the symbol\n                    sign = sign * result.sign();\n                    var p = result.power;\n                    result = result.args[0];\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\n                    //flip it back to the correct sign\n                    if (sign < 0)\n                        result.negate()\n                }\n                else {\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\n                    if (result.group === CP && result.isImaginary())\n                        result.distributeMultiplier();\n                }\n\n                //back convert group P to a simpler group N if possible\n                if (result.group === P && isInt(result.power.toDecimal()))\n                    result = result.convert(N);\n\n                return result;\n            }\n            else {\n                //****** Matrices & Vector *****//\n                if (bIsSymbol && !aIsSymbol) { //keep symbols to the right \n                    t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\n                if (aIsSymbol && isMatrixB) {\n                    b.eachElement(function (e) {\n                        return _.multiply(a.clone(), e);\n                    });\n                }\n                else {\n                    if (isMatrixA && isMatrixB) {\n                        b = a.multiply(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return this.multiply(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the / operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.divide = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n\n            if (aIsSymbol && bIsSymbol) {\n                //forward to Unit division\n                if (a.unit || b.unit) {\n                    return _.Unit.divide(a, b);\n                }\n                var result;\n                if (b.equals(0))\n                    throw new DivisionByZero('Division by zero not allowed!');\n\n                if (a.isConstant() && b.isConstant()) {\n                    result = a.clone();\n                    result.multiplier = result.multiplier.divide(b.multiplier);\n                }\n                else {\n                    b.invert();\n                    result = _.multiply(a, b);\n                }\n                return result;\n            }\n            else {\n                //******* Vectors & Matrices *********//\n                var isVectorA = isVector(a), isVectorB = isVector(b);\n                if (aIsSymbol && isVectorB) {\n                    b = b.map(function (x) {\n                        return _.divide(a.clone(), x);\n                    });\n                }\n                else if (isVectorA && bIsSymbol) {\n                    b = a.map(function (x) {\n                        return _.divide(x, b.clone());\n                    });\n                }\n                else if (isVectorA && isVectorB) {\n                    if (a.dimensions() === b.dimensions()) {\n                        b = b.map(function (x, i) {\n                            return _.divide(a.elements[--i], x);\n                        });\n                    }\n                    else\n                        _.error('Cannot divide vectors. Dimensions do not match!');\n                }\n                else {\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\n                    if (isMatrixA && bIsSymbol) {\n                        a.eachElement(function (x) {\n                            return _.divide(x, b.clone());\n                        });\n                        b = a;\n                    }\n                    else if (isMatrixA && isMatrixB) {\n                        if (a.rows() === b.rows() && a.cols() === b.cols()) {\n                            a.eachElement(function (x, i, j) {\n                                return _.divide(x, b.elements[i][j]);\n                            });\n                        }\n                        else {\n                            _.error('Dimensions do not match!');\n                        }\n                    }\n                    else if (isMatrixA && isVectorB) {\n                        if (a.cols() === b.dimensions()) {\n                            a.eachElement(function (x, i, j) {\n                                return _.divide(x, b.elements[i].clone());\n                            });\n                            b = a;\n                        }\n                        else {\n                            _.error('Unable to divide matrix by vector.');\n                        }\n                    }\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the ^ operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.pow = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            if (aIsSymbol && bIsSymbol) {\n                //it has units then it's the Unit module's problem\n                if (a.unit || b.unit) {\n                    return _.Unit.pow(a, b);\n                }\n                //handle infinity\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.isInfinity && b.isInfinity)\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n                    if (a.isConstant() && b.isInfinity) {\n                        if (a.equals(0)) {\n                            if (b.lessThan(0))\n                                throw new UndefinedError('0^Infinity is undefined!');\n                            return new Symbol(0);\n                        }\n                        if (a.equals(1))\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\n                        //a^-oo\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        //a^oo\n                        if (!a.lessThan(0))\n                            return Symbol.infinity();\n                    }\n\n                    if (a.isInfinity && b.isConstant()) {\n                        if (b.equals(0))\n                            throw new UndefinedError(a + '^0 is undefined!');\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n                    }\n                }\n\n                var aIsZero = a.equals(0);\n                var bIsZero = b.equals(0);\n                if (aIsZero && bIsZero)\n                    throw new UndefinedError('0^0 is undefined!');\n                //return 0 right away if possible\n                if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\n                    return new Symbol(0);\n\n                if (bIsZero)\n                    return new Symbol(1);\n\n                var bIsConstant = b.isConstant(),\n                        aIsConstant = a.isConstant(),\n                        bIsInt = b.isInteger(),\n                        m = a.multiplier,\n                        result = a.clone();\n                if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\n                    throw new UndefinedError('Division by zero is not allowed!');\n\n                //compute imaginary numbers right away\n                if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n                    var k, re, im;\n                    k = Math.PI * b;\n                    re = new Symbol(Math.cos(k));\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n                    return _.add(re, im);\n                }\n\n                //imaginary number under negative nthroot or to the n\n                if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n                    var re, im, r, theta, nre, nim;\n                    re = a.realpart();\n                    im = a.imagpart();\n                    if (re.isConstant('all') && im.isConstant('all')) {\n                        theta = new Symbol(Math.atan2(im, re) * b);\n                        r = _.pow(Symbol.hyp(re, im), b);\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n                        nim = _.multiply(r, _.trig.sin(theta));\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n                    }\n                }\n\n                /*\n                 if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) { \n                 var sign = b.sign();\n                 b = abs(b);\n                 var p, re, im, theta, n, ai, bi, di, ei, ii, th;\n                 p = Symbol.toPolarFormArray(a);\n                 theta = _.multiply(b.clone(), arg(a));\n                 di = _.pow(p[0], b);\n                 ai = _.trig.cos(theta.clone());\n                 bi = _.trig.sin(theta);\n                 \n                 if(sign < 0) {\n                 re = _.divide(ai, di.clone());\n                 im = _.divide(bi, di);\n                 }\n                 else {\n                 re = _.multiply(ai, di.clone());\n                 im = _.multiply(bi, di);\n                 }\n                 return _.add(re, _.multiply(im, Symbol.imaginary()));\n                 }\n                 */\n\n                //take care of the symbolic part\n                result.toUnitMultiplier();\n                //simpifly sqrt\n                if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n                    var s = result.args[0];\n                    s.multiplyPower(new Symbol(0.5));\n                    s.multiplier.multiply(result.multiplier);\n                    s.multiplyPower(b);\n                    result = s;\n                }\n                else {\n                    var sign = m.sign();\n                    //handle cases such as (-a^3)^(1/4)\n                    if (evenFraction(b) && sign < 0) {\n                        //swaperoo\n                        //first put the sign back on the symbol\n                        result.negate();\n                        //wrap it in brackets\n                        result = _.symfunction(PARENTHESIS, [result]);\n                        //move the sign back the exterior and let nerdamer handle the rest\n                        result.negate();\n                    }\n                    \n                    result.multiplyPower(b);\n                }\n\n                if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n                        var c;\n                        //remove the sign\n                        if (sign < 0) {\n                            a.negate();\n                            if (b.multiplier.den.equals(2))\n                                //we know that the numerator has to be odd and therefore it's i\n                                c = new Symbol(Settings.IMAGINARY);\n                            else if (isInt(b.multiplier)) {\n                                if (even(b.multiplier))\n                                    c = new Symbol(1);\n                                else\n                                    c = new Symbol(-1);\n                            }\n                            else if (!even(b.multiplier.den)) { \n                                c = new Symbol(Math.pow(sign, b.multiplier.num));\n                            }\n                            else {\n                                c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            }\n                        }\n\n                        result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n                        \n                        //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n                        //put the back sign\n                        if (c)\n                            result = _.multiply(result, c);\n                }\n                else if (bIsInt && !m.equals(1)) {\n                    var abs_b = b.abs();     \n                    // Provide fall back to JS until big number implementation is improved\n                    if(abs_b.gt(Settings.MAX_EXP)) {\n                        if(b.sign() < 0)\n                            return new Symbol(0);\n                        return Symbol.infinity();\n                    }\n                    else {\n                        var p = b.multiplier.toDecimal();\n                        var sgn = Math.sign(p);\n                        p = Math.abs(p);\n                        var multiplier = new Frac(1);\n                        multiplier.num = m.num.pow(p);\n                        multiplier.den = m.den.pow(p);\n                        if (sgn < 0)\n                            multiplier.invert();\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n                        result.multiplier = result.multiplier.multiply(multiplier);\n                    }\n                }\n                else { \n                    var sign = a.sign();\n                    if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\n                        if (b.multiplier.den.equals(2)) {\n                            var i = new Symbol(Settings.IMAGINARY);\n                            a.negate();//remove the sign\n                            //if the power is negative then i is negative\n                            if (b.lessThan(0)) {\n                                i.negate();\n                                b.negate();//remove the sign from the power\n                            }\n                            //pull the power normally and put back the imaginary\n                            result = _.multiply(_.pow(a, b), i);\n                        }\n                        else {\n//                            if(a.equals(-1)) {\n//                                var theta = _.multiply(b, _.parse('pi'));\n//                                result = evaluate(_.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta))));\n//                            }\n//                            else {\n                            var aa = a.clone();\n                            aa.multiplier.negate();\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n                            var r = _.divide(_a, _b);\n                            result = _.multiply(result, r);\n//                            }  \n                        }\n                    }\n                    else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n                        var re, im, aa, a1, b1, c1;\n                        aa = a.clone().toLinear();\n                        re = b.realpart();\n                        im = b.imagpart();\n                        a1 = _.pow(aa.clone(), re);\n                        b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));\n                        c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n                        result = _.multiply(a1, _.add(b1, c1));\n                        result = _.expand(_.parse(result));\n                    }\n                    else {\n                        //b is a symbol\n                        var neg_num = a.group === N && sign < 0,\n                                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\n\n                        //eliminate imaginary if possible\n                        if (a.imaginary) {\n                            if (bIsInt) {\n                                var s, p, n;\n                                s = Math.sign(b);\n                                p = abs(b);\n                                n = p % 4;\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n                                if (n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\n                                    result.negate();\n                                }\n                            }\n                            else {\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\n                                        tn = Math.pow(-1, nr.num);\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n                            }\n                        }\n                        //ensure that the sign is carried by the symbol and not the multiplier\n                        //this enables us to check down the line if the multiplier can indeed be transferred\n                        if (sign < 0 && !neg_num)\n                            result.negate();\n\n                        //retain the absolute value\n                        if (bIsConstant && a.group !== EX) {\n                            var evenr = even(b.multiplier.den),\n                                    evenp = even(a.power),\n                                    n = result.power.toDecimal(),\n                                    evennp = even(n);\n                            if (evenr && evenp && !evennp) {\n                                if (n === 1)\n                                    result = _.symfunction(ABS, [result]);\n                                else if (!isInt(n)) {\n                                    var p = result.power;\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                                }\n                                else {\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\n                                            result.clone().setPower(new Frac(n - 1)));\n                                }\n                                //quick workaround. Revisit\n                                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\n                                    result = result.args[0];\n                            }\n                        }\n                    }\n                }\n\n                result = testSQRT(result);\n\n                //don't multiply until we've tested the remaining symbol\n                if (num && den)\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\n\n                //reduce square root\n                if (result.fname === SQRT) {\n                    var isEX = result.group === EX;\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n                    if (even(t)) {\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                                m = result.multiplier;\n                        result = _.pow(result.args[0], pt);\n                        result.multiplier = result.multiplier.multiply(m);\n                    }\n                }\n                //detect Euler's identity\n                else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\n                        && result.power.contains(Settings.IMAGINARY)) {\n                    var theta = b.stripVar(Settings.IMAGINARY);\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n//                    //we have a match\n//                    var m1 = result.multiplier,\n//                            m2 = result.power.multiplier;\n//                    result = new Symbol(even(m2.num) ? m1 : m1.negate());\n//                    result = _.pow(result, new Symbol(m2.den).invert());\n                }\n                \n                return result;\n            }\n            else {\n                if (isVector(a) && bIsSymbol) {\n                    a = a.map(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                else if (isMatrix(a) && bIsSymbol) {\n                    a.eachElement(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                return a;\n            }\n        };\n        //gets called when the parser finds the , operator. \n        //Commas return a Collector object which roughly an array\n        this.comma = function (a, b) {\n            if (!(a instanceof Collection))\n                a = Collection.create(a);\n            a.append(b);\n            return a;\n        };\n        //link to modulus\n        this.mod = function (a, b) {\n            return mod(a, b);\n        };\n        //used to slice elements from arrays\n        this.slice = function (a, b) {\n            return new Slice(a, b);\n        };\n        //the equality setter\n        this.equals = function (a, b) {\n            //equality can only be set for group S so complain it's not\n            if (a.group !== S && !a.isLinear())\n                err('Cannot set equality for ' + a.toString());\n            VARS[a.value] = b.clone();\n            return b;\n        };\n        //percent\n        this.percent = function (a) {\n            return _.divide(a, new Symbol(100));\n        };\n        //set variable\n        this.assign = function (a, b) {\n            if (a instanceof Collection && b instanceof Collection) {\n                a.elements.map(function (x, i) {\n                    return _.assign(x, b.elements[i]);\n                });\n                return Vector.fromArray(b.elements);\n            }\n            if(a.parent) {\n                //it's referring to the parent instead. The current item can be discarded\n                var e = a.parent;\n                e.elements[e.getter] = b;\n                delete e.getter;\n                return e;\n            }\n            \n            if (a.group !== S)\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n            VARS[a.value] = b;\n            return b;\n        };\n        this.function_assign = function (a, b) {\n            var f = a.elements.pop();\n            return setFunction(f, a.elements, b);\n        };\n        //function to quickly convert bools to Symbols\n        var bool2Symbol = function (x) {\n            return new Symbol(x === true ? 1 : 0);\n        };\n        //check for equality\n        this.eq = function (a, b) {\n            return bool2Symbol(a.equals(b));\n        };\n        //checks for greater than\n        this.gt = function (a, b) {\n            return bool2Symbol(a.gt(b));\n        };\n        //checks for greater than equal\n        this.gte = function (a, b) {\n            return bool2Symbol(a.gte(b));\n        };\n        //checks for less than\n        this.lt = function (a, b) {\n            return bool2Symbol(a.lt(b));\n        };\n        //checks for less than equal\n        this.lte = function (a, b) {\n            return bool2Symbol(a.lte(b));\n        };\n        //wraps the factorial\n        this.factorial = function (a) {\n            return this.symfunction(FACTORIAL, [a]);\n        };\n        //wraps the double factorial\n        this.dfactorial = function (a) {\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\n        };\n    }\n    ;\n\n    /* \"STATIC\" */\n    //converts a number to a fraction. \n    var Fraction = {\n        /**\n         * Converts a decimal to a fraction\n         * @param {number} value\n         * @param {object} opts\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        convert: function (value, opts) {\n            var frac;\n            if (value === 0) {\n                frac = [0, 1];\n            }\n            else {\n                if (value < 1e-6 || value > 1e20) {\n                    var qc = this.quickConversion(Number(value));\n                    if (qc[1] <= 1e20) {\n                        var abs = Math.abs(value);\n                        var sign = value / abs;\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n                        frac[0] = frac[0] * sign;\n                    }\n                    else {\n                        frac = qc;\n                    }\n                }\n                else {\n                    frac = this.fullConversion(value);\n                }\n            }\n            return frac;\n        },\n        /**\n         * If the fraction is too small or too large this gets called instead of fullConversion method\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        quickConversion: function (dec) {\n            var x = (dec.toExponential() + '').split('e');\n            var d = x[0].split('.')[1];// get the number of places after the decimal\n            var l = (d ? d.length : 0)-parseInt(x[1]); // maybe the coefficient is an integer;\n            //call Math.round to avoid rounding error\n            return [Math.round(Math.pow(10, l) * x[0]), Math.pow(10, Math.abs(x[1]) + l)];\n        },\n        /**\n         * Returns a good approximation of a fraction. This method gets called by convert\n         * http://mathforum.org/library/drmath/view/61772.html\n         * Decimal To Fraction Conversion - A Simpler Version\n         * Dr Peterson\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        fullConversion: function (dec) {\n            var done = false;\n            //you can adjust the epsilon to a larger number if you don't need very high precision\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\n            while (!done) {\n                n++;\n                if (n > 10000) {\n                    done = true;\n                }\n                var a = Math.floor(q);\n                var num = n1 + a * n2;\n                var den = d1 + a * d2;\n                var e = (q - a);\n                if (e < epsilon) {\n                    done = true;\n                }\n                q = 1 / e;\n                n1 = n2;\n                d1 = d2;\n                n2 = num;\n                d2 = den;\n                if (Math.abs(num / den - dec) < epsilon || n > 30) {\n                    done = true;\n                }\n            }\n            return [num, den];\n        }\n    };\n    //Depends on Fraction\n\n    //The latex generator\n    var LaTeX = {\n        parser: (function () {\n            //create a parser and strip it from everything except the items that you need\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n            var parser = new Parser();\n            for (var x in parser) {\n                if (keep.indexOf(x) === -1)\n                    delete parser[x];\n            }\n            //declare the operators\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\,',\n                action: 'slash_comma',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            //have braces not map to anything. We want them to be return as-is\n            var brackets = parser.getBrackets();\n            brackets['{'].maps_to = undefined;\n            return parser;\n        })(),\n        space: '~',\n        dot: ' \\\\cdot ',\n        //grab a list of supported functions but remove the excluded ones found in exclFN\n\n        latex: function (symbol, option) {\n            //it might be an array\n            if (symbol.clone) {\n                symbol = symbol.clone(); //leave original as-is\n            }\n            if (symbol instanceof _.classes.Collection)\n                symbol = symbol.elements;\n\n            if (isArray(symbol)) {\n                var LaTeXArray = [];\n                for (var i = 0; i < symbol.length; i++) {\n                    var sym = symbol[i];\n                    //This way I can generate LaTeX on an array of strings.\n                    if (!isSymbol(sym))\n                        sym = _.parse(sym);\n                    LaTeXArray.push(this.latex(sym, option));\n                }\n                return this.brackets(LaTeXArray.join(', '), 'square');\n            }\n\n            else if (isMatrix(symbol)) {\n                var TeX = '\\\\begin{pmatrix}\\n';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    var rowTeX = [],\n                            e = symbol.elements[i];\n                    for (var j = 0; j < e.length; j++) {\n                        rowTeX.push(this.latex(e[j], option));\n                    }\n                    TeX += rowTeX.join(' & ');\n                    if (i < symbol.elements.length - 1) {\n                        TeX += '\\\\\\\\\\n';\n                    }\n                }\n                TeX += '\\\\end{pmatrix}';\n                return TeX;\n            }\n\n            else if (isVector(symbol)) {\n                var TeX = '\\\\left[';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\right]';\n                return TeX;\n            }\n            \n            else if(isSet(symbol)) {\n                var TeX = '\\\\{';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\}';\n                return TeX;\n            }\n\n            symbol = symbol.clone();\n            var decimal = (option === 'decimal' || option === 'decimals'),\n                    power = symbol.power,\n                    invert = isNegative(power),\n                    negative = symbol.multiplier.lessThan(0);\n\n            if (symbol.group === P && decimal) {\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n            }\n            else {\n                symbol.multiplier = symbol.multiplier.abs();\n\n                //if the user wants the result in decimal format then return it as such by placing it at the top part\n                var m_array;\n\n                if (decimal) {\n                    var m = String(symbol.multiplier.toDecimal());\n                    //if(String(m) === '1' && !decimal) m = '';\n                    m_array = [m, ''];\n                }\n                else {\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\n                }\n                //get the value as a two part array\n                var v_array = this.value(symbol, invert, option, negative),\n                        p;\n                //make it all positive since we know whether to push the power to the numerator or denominator already.\n                if (invert)\n                    power.negate();\n                //the power is simple since it requires no additional formatting. We can get it to a\n                //string right away. pass in true to neglect unit powers\n                if (decimal) {\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n                    if (String(p) === '1')\n                        p = '';\n                }\n                //get the latex representation\n                else if (isSymbol(power))\n                    p = this.latex(power, option);\n                //get it as a fraction\n                else\n                    p = this.formatFrac(power, true);\n                //use this array to specify if the power is getting attached to the top or the bottom\n                var p_array = ['', ''],\n                        //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n                        index = invert ? 1 : 0;\n                p_array[index] = p;\n\n                //special case group P and decimal\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n\n                return retval.replace(/\\+\\-/gi, '-');\n            }\n\n        },\n        //greek mapping\n        greek: {\n            alpha: '\\\\alpha',\n            beta: '\\\\beta',\n            gamma: '\\\\gamma',\n            delta: '\\\\delta',\n            epsilon: '\\\\epsilon',\n            zeta: '\\\\zeta',\n            eta: '\\\\eta',\n            theta: '\\\\theta',\n            iota: '\\\\iota',\n            kappa: '\\\\kappa',\n            lambda: '\\\\lambda',\n            mu: '\\\\mu',\n            nu: '\\\\nu',\n            xi: '\\\\xi',\n            omnikron: '\\\\omnikron',\n            pi: '\\\\pi',\n            rho: '\\\\rho',\n            sigma: '\\\\sigma',\n            tau: '\\\\tau',\n            upsilon: '\\\\upsilon',\n            phi: '\\\\phi',\n            chi: '\\\\chi',\n            psi: '\\\\psi',\n            omega: '\\\\omega',\n            Gamma: '\\\\Gamma',\n            Delta: '\\\\Delta',\n            Epsilon: '\\\\Epsilon',\n            Theta: '\\\\Theta',\n            Lambda: '\\\\Lambda',\n            Xi: '\\\\Xi',\n            Pi: '\\\\Pi',\n            Sigma: '\\\\Sigma',\n            Phi: '\\\\Phi',\n            Psi: '\\\\Psi',\n            Omega: '\\\\Omega'\n        },\n        symbols: {\n            arccos: '\\\\arccos',\n            cos: '\\\\cos',\n            csc: '\\\\csc',\n            exp: '\\\\exp',\n            ker: '\\\\ker',\n            limsup: '\\\\limsup',\n            min: '\\\\min',\n            sinh: '\\\\sinh',\n            arcsin: '\\\\arcsin',\n            cosh: '\\\\cosh',\n            deg: '\\\\deg',\n            gcd: '\\\\gcd',\n            lg: '\\\\lg',\n            ln: '\\\\ln',\n            Pr: '\\\\Pr',\n            sqrt: '\\\\sqrt',\n            sup: '\\\\sup',\n            arctan: '\\\\arctan',\n            cot: '\\\\cot',\n            det: '\\\\det',\n            hom: '\\\\hom',\n            lim: '\\\\lim',\n            log: '\\\\log',\n            LN:  '\\\\LN',\n            sec: '\\\\sec',\n            tan: '\\\\tan',\n            arg: '\\\\arg',\n            coth: '\\\\coth',\n            dim: '\\\\dim',\n            inf: '\\\\inf',\n            liminf: '\\\\liminf',\n            max: '\\\\max',\n            sin: '\\\\sin',\n            tanh: '\\\\tanh'\n        },\n        //get the raw value of the symbol as an array\n        value: function (symbol, inverted, option, negative) {\n            var group = symbol.group,\n                    previousGroup = symbol.previousGroup,\n                    v = ['', ''],\n                    index = inverted ? 1 : 0;\n            /*if(group === N) //do nothing since we want to return top & bottom blank; */\n            if (symbol.isInfinity) {\n                v[index] = '\\\\infty';\n            }\n            else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n                var value = symbol.value;\n                if (value.replace)\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\n                //split it so we can check for instances of alpha as well as alpha_b\n                var t_varray = String(value).split('_');\n                var greek = this.greek[t_varray[0]];\n                if (greek) {\n                    t_varray[0] = greek;\n                    value = t_varray.join('_');\n                }\n                var symbol = this.symbols[t_varray[0]];\n                if (symbol) {\n                    t_varray[0] = symbol;\n                    value = t_varray.join('_');\n                }\n                v[index] = value;\n            }\n            else if (group === FN || previousGroup === FN) {\n                var name,\n                        input = [],\n                        fname = symbol.fname;\n                //collect the arguments\n                for (var i = 0; i < symbol.args.length; i++) {\n                    var arg = symbol.args[i], item;\n                    if (typeof arg === 'string')\n                        item = arg;\n                    else {\n                        item = this.latex(arg, option);\n                    }\n                    input.push(item);\n                }\n\n                if (fname === SQRT) {\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\n                }\n                else if (fname === ABS) {\n                    v[index] = this.brackets(input.join(','), 'abs');\n                }\n                else if (fname === PARENTHESIS) {\n                    v[index] = this.brackets(input.join(','), 'parens');\n                }\n                else if (fname === 'limit') {\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n                }\n                else if (fname === 'integrate') {\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n                }\n                else if (fname === 'defint') {\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n                }\n                else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n                    var arg = symbol.args[0];\n                    if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n                        input[0] = this.brackets(input[0]);\n                    }\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n                }\n                else if (fname === 'floor') {\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n                }\n                else if (fname === 'ceil') {\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG && input.length > 1) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG10) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n                }\n                else if (fname === 'sum') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'product') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'nthroot') {\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n                }\n                else if (fname === 'mod') {\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\n                }\n                else if (fname === 'realpart') {\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n                }\n                else if (fname === 'imagpart') {\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n                }\n                else {\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n                    if (symbol.isConversion)\n                        v[index] = name + this.brackets(input.join(''), 'parens');\n                    else\n                        v[index] = name + this.brackets(input.join(','), 'parens');\n                }\n            }\n            else if (symbol.isComposite()) {\n                var collected = symbol.collectSymbols().sort(\n                        group === CP || previousGroup === CP ?\n                        function (a, b) {\n                            return b.group - a.group;\n                        } :\n                        function (a, b) {\n                            var x = isSymbol(a.power) ? -1 : a.power;\n                            var y = isSymbol(b.power) ? -1 : b.power;\n                            return y - x;\n                        }\n                ),\n                        symbols = [],\n                        l = collected.length;\n                for (var i = 0; i < l; i++) {\n                    symbols.push(LaTeX.latex(collected[i], option));\n                }\n                var value = symbols.join('+');\n\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n            }\n            else if (group === CB || previousGroup === EX || previousGroup === CB) {\n                if (group === CB)\n                    symbol.distributeExponent();\n                //this almost feels a little like cheating but I need to know if I should be wrapping the symbol\n                //in brackets or not. We'll do this by checking the value of the numerator and then comparing it \n                //to whether the symbol value is \"simple\" or not.\n                var denominator = [],\n                        numerator = [];\n                //generate a profile\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\n                var setBrackets = function (container, map, counter) {\n                    if (counter > 1 && map.length > 0) {\n                        var l = map.length;\n                        for (var i = 0; i < l; i++) {\n                            var idx = map[i], item = container[idx];\n                            if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                                container[idx] = LaTeX.brackets(item, 'parens');\n                            }\n                        }\n                    }\n                    return container;\n                };\n\n                //generate latex for each of them\n                symbol.each(function (x) {\n                    var isDenom = isNegative(x.power),\n                            laTex;\n\n                    if (isDenom) {\n                        laTex = LaTeX.latex(x.invert(), option);\n                        den_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            den_map.push(denominator.length); //make a note of where the composite was found \n                        }\n\n                        denominator.push(laTex);\n                    }\n                    else {\n                        laTex = LaTeX.latex(x, option);\n                        num_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            num_map.push(numerator.length);   //make a note of where the composite was found \n                        }\n                        numerator.push(laTex);\n                    }\n                });\n\n                //apply brackets\n                setBrackets(numerator, num_map, num_c);\n                v[0] = numerator.join(this.dot); //collapse the numerator into one string\n\n                setBrackets(denominator, den_map, den_c);\n                v[1] = denominator.join(this.dot);\n            }\n\n            return v;\n        },\n        set: function (m, v, p, combine_power) {\n            var isBracketed = function (v) {\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n            };\n            //format the power if it exists\n            if (p)\n                p = this.formatP(p);\n            //group CB will have to be wrapped since the power applies to both it's numerator and denominator\n            if (combine_power) {\n                //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n                //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n                //of a case where this isn't true\n                var tp = p[0];\n                p[0] = ''; //temporarily make p blank\n            }\n\n            //merge v and p. Not that v MUST be first since the order matters\n            v = this.merge(v, p);\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\n            //filters\n            //if the top has a variable but the numerator is one drop it\n            if (vn && Number(mn) === 1)\n                mn = '';\n            //if denominator is 1 drop it always\n            if (Number(md) === 1)\n                md = '';\n            //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n\n            //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n            //format the power if it exists\n            //make it a fraction if both top and bottom exists\n            if (top && bottom) {\n                var frac = this.frac(top, bottom);\n                if (combine_power && tp)\n                    frac = this.brackets(frac) + tp;\n                return frac;\n            }\n            //otherwise only the top exists so return that\n            else\n                return top;\n        },\n        merge: function (a, b) {\n            var r = [];\n            for (var i = 0; i < 2; i++)\n                r[i] = a[i] + b[i];\n            return r;\n        },\n        //joins together two strings if both exist\n        join: function (n, d, glue) {\n            if (!n && !d)\n                return '';\n            if (n && !d)\n                return n;\n            if (d && !n)\n                return d;\n            return n + glue + d;\n        },\n        formatP: function (p_array) {\n            for (var i = 0; i < 2; i++) {\n                var p = p_array[i];\n                if (p)\n                    p_array[i] = '^' + this.braces(p);\n            }\n            return p_array;\n        },\n        /**\n         * formats the fractions accordingly.\n         * @param {Frac} f\n         * @param {bool} is_pow\n         */\n        formatFrac: function (f, is_pow) {\n            var n = f.num.toString(),\n                    d = f.den.toString();\n            //no need to have x^1\n            if (is_pow && n === '1' && d === '1')\n                return '';\n            //no need to have x/1\n            if (d === '1')\n                return n;\n            return this.frac(n, d);\n        },\n        frac: function (n, d) {\n            return '\\\\frac' + this.braces(n) + this.braces(d);\n        },\n        braces: function (e) {\n            return '{' + e + '}';\n        },\n        brackets: function (e, typ) {\n            typ = typ || 'parens';\n            var bracketTypes = {\n                parens: ['(', ')'],\n                square: ['[', ']'],\n                brace: ['{', '}'],\n                abs: ['|', '|'],\n                angle: ['\\\\langle', '\\\\rangle']\n            };\n            var bracket = bracketTypes[typ];\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n        },\n        /**\n         * Removes extreneous tokens\n         * @param {Tokens[]} tokens\n         * @returns {Tokens[]}\n         */\n        filterTokens: function (tokens) {\n            var filtered = [];\n            //the items that need to be disposed\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n            for (var i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                if (isArray(token))\n                    filtered.push(LaTeX.filterTokens(token));\n                else if (d.indexOf(token.value) === -1)\n                    filtered.push(token);\n            }\n            return filtered;\n        },\n        /*\n         * Parses tokens from LaTeX string. Does not do any error checking\n         * @param {Tokens[]} rpn\n         * @returns {String}\n         */\n        parse: function (raw_tokens) {\n            var i, l;\n            var retval = '';\n            var tokens = this.filterTokens(raw_tokens);\n            var replace = {\n                'cdot': '*',\n                'times': '*',\n                'infty': 'Infinity'\n            };\n            //get the next token\n            var next = function () {\n                return tokens[++i];\n            };\n            var parse_next = function () {\n                return LaTeX.parse(next());\n            };\n            var get = function (token) {\n                if (token in replace)\n                    return replace[token];\n                return token;\n            };\n\n            //start parsing the tokens\n            for (i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                //fractions\n                if (token.value === 'frac') {\n                    //parse and wrap it in brackets\n                    var n = parse_next();\n                    var d = parse_next();\n                    retval += n + '/' + d;\n                }\n                else if (token.value in LaTeX.symbols) {\n                    retval += token.value + parse_next();\n                }\n                else if (token.value === 'int') {\n                    var f = parse_next();\n                    //skip the comma\n                    i++;\n                    //get the variable of integration\n                    var dx = next().value;\n                    dx = get(dx.substring(1, dx.length));\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\n                }\n                else if (token.value === 'mathrm') {\n                    var f = tokens[++i][0].value;\n                    retval += f + parse_next();\n                }\n                //sum and product\n                else if (token.value === 'sum_' || token.value === 'prod_') {\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\n                    var nxt = next();\n                    i++; //skip the caret\n                    var end = parse_next();\n                    var f = parse_next();\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n                }\n                else if (token.value === 'lim_') {\n                    var nxt = next();\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n                }\n                else {\n                    if(Array.isArray(token)) {\n                        retval += get(LaTeX.parse(token));\n                    }\n                    else\n                        retval += get(token.value.toString());\n                }\n            }\n            return inBrackets(retval);\n        }\n    };\n//Vector =======================================================================    \n    function Vector(v) {\n        if (isVector(v))\n            this.elements = v.items.slice(0);\n        else if (isArray(v))\n            this.elements = v.slice(0);\n        else\n            this.elements = [].slice.call(arguments);\n    }\n    /*\n     * Generates a pre-filled array\n     * @param {type} n\n     * @param {type} val\n     * @returns {unresolved}\n     */\n    Vector.arrayPrefill = function (n, val) {\n        var a = [];\n        val = val || 0;\n        for (var i = 0; i < n; i++)\n            a[i] = val;\n        return a;\n    };\n    /**\n     * Generate a vector from and array\n     * @param {type} a\n     * @returns {unresolved}\n     */\n    Vector.fromArray = function (a) {\n        var v = new Vector();\n        v.elements = a;\n        return v;\n    };\n    \n    /**\n     * Convert a Set to a Vector\n     * @param {Set} set\n     * @returns {Vector}\n     */\n    Vector.fromSet = function(set) {\n        return Vector.fromArray(set.elements);\n    };\n    \n    //Ported from Sylvester.js\n    Vector.prototype = {\n        custom: true,\n        // Returns element i of the vector\n        e: function (i) {\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n        },\n\n        set: function (i, val) {\n            if (!isSymbol(val))\n                val = new Symbol(val);\n            this.elements[i] = val;\n        },\n\n        // Returns the number of elements the vector has\n        dimensions: function () {\n            return this.elements.length;\n        },\n\n        // Returns the modulus ('length') of the vector\n        modulus: function () {\n            return block('SAFE', function () {\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is equal to the argument\n        eql: function (vector) {\n            var n = this.elements.length;\n            var V = vector.elements || vector;\n            if (n !== V.length) {\n                return false;\n            }\n            do {\n                if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n                    return false;\n                }\n            }\n            while (--n);\n            return true;\n        },\n\n        // Returns a clone of the vector\n        clone: function () {\n            var V = new Vector(),\n                    l = this.elements.length;\n            for (var i = 0; i < l; i++) {\n                //Rule: all items within the vector must have a clone method.\n                V.elements.push(this.elements[i].clone());\n            }\n            if (this.getter) {\n                V.getter = this.getter.clone();\n            }\n            return V;\n        },\n\n        // Maps the vector to another vector according to the given function\n        map: function (fn) {\n            var elements = [];\n            this.each(function (x, i) {\n                elements.push(fn(x, i));\n            });\n\n            return new Vector(elements);\n        },\n\n        // Calls the iterator for each element of the vector in turn\n        each: function (fn) {\n            var n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                fn(this.elements[i], i + 1);\n            }\n            while (--n);\n        },\n\n        // Returns a new vector created by normalizing the receiver\n        toUnitVector: function () {\n            return block('SAFE', function () {\n                var r = this.modulus();\n                if (r.valueOf() === 0) {\n                    return this.clone();\n                }\n                return this.map(function (x) {\n                    return _.divide(x, r);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the angle between the vector and the argument (also a vector)\n        angleFrom: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\n                // Work things out in parallel to save time\n                this.each(function (x, i) {\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\n                    mod1 = _.add(mod1, _.multiply(x, x));//will not conflict in safe block\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));//will not conflict in safe block\n                });\n                mod1 = _.pow(mod1, new Symbol(0.5));\n                mod2 = _.pow(mod2, new Symbol(0.5));\n                var product = _.multiply(mod1, mod2);\n                if (product.valueOf() === 0) {\n                    return null;\n                }\n                var theta = _.divide(dot, product);\n                var theta_val = theta.valueOf();\n                if (theta_val < -1) {\n                    theta = -1;\n                }\n                if (theta_val > 1) {\n                    theta = 1;\n                }\n                return new Symbol(Math.acos(theta));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is parallel to the argument\n        isParallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (angle <= PRECISION);\n        },\n\n        // Returns true iff the vector is antiparallel to the argument\n        isAntiparallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\n        },\n\n        // Returns true iff the vector is perpendicular to the argument\n        isPerpendicularTo: function (vector) {\n            var dot = this.dot(vector);\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\n        },\n\n        // Returns the result of adding the argument to the vector\n        add: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.add(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of subtracting the argument from the vector\n        subtract: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.subtract(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of multiplying the elements of the vector by the argument\n        multiply: function (k) {\n            return this.map(function (x) {\n                return x.clone() * k.clone();\n            });\n        },\n\n        x: function (k) {\n            return this.multiply(k);\n        },\n\n        // Returns the scalar product of the vector with the argument\n        // Both vectors must have equal dimensionality\n        dot: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var product = new Symbol(0), n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                do {\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n                }\n                while (--n);\n                return product;\n            }, undefined, this);\n        },\n\n        // Returns the vector product of the vector with the argument\n        // Both vectors must have dimensionality 3\n        cross: function (vector) {\n            var B = vector.elements || vector;\n            if (this.elements.length !== 3 || B.length !== 3) {\n                return null;\n            }\n            var A = this.elements;\n            return block('SAFE', function () {\n                return new Vector([\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\n                ]);\n            }, undefined, this);\n        },\n\n        // Returns the (absolute) largest element of the vector\n        max: function () {\n            var m = 0, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n                    m = this.elements[i];\n                }\n            }\n            while (--n);\n            return m;\n        },\n        magnitude: function() {\n            var magnitude = new Symbol(0);\n            this.each(function(e) {\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n            });\n            return _.sqrt(magnitude);\n        },\n        // Returns the index of the first match found\n        indexOf: function (x) {\n            var index = null, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n                    index = i + 1;\n                }\n            }\n            while (--n);\n            return index;\n        },\n        text: function (x) {\n            return text(this);\n        },\n        toString: function () {\n            return this.text();\n        },\n        latex: function (option) {\n            var tex = [];\n            for (var i = 0; i < this.elements.length; i++) {\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n            }\n            return '[' + tex.join(', ') + ']';\n        }\n    };\n\n//Matrix =======================================================================\n    function Matrix() {\n        var m = arguments,\n                l = m.length, i, el = [];\n        if (isMatrix(m)) { //if it's a matrix then make a clone\n            for (i = 0; i < l; i++) {\n                el.push(m[i].slice(0));\n            }\n        }\n        else {\n            var row, lw, rl;\n            for (i = 0; i < l; i++) {\n                row = m[i];\n                if (isVector(row))\n                    row = row.elements;\n                if (!isArray(row))\n                    row = [row];\n                rl = row.length;\n                if (lw && lw !== rl)\n                    err('Unable to create Matrix. Row dimensions do not match!');\n                el.push(row);\n                lw = rl;\n            }\n        }\n        this.elements = el;\n    }\n    Matrix.identity = function (n) {\n        var m = new Matrix();\n        for (var i = 0; i < n; i++) {\n            m.elements.push([]);\n            for (var j = 0; j < n; j++) {\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n            }\n        }\n        return m;\n    };\n    Matrix.fromArray = function (arr) {\n        function F(args) {\n            return Matrix.apply(this, args);\n        }\n        F.prototype = Matrix.prototype;\n\n        return new F(arr);\n    };\n    Matrix.zeroMatrix = function (rows, cols) {\n        var m = new Matrix();\n        for (var i = 0; i < rows; i++) {\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n        }\n        return m;\n    };\n    Matrix.prototype = {\n        //needs be true to let the parser know not to try to cast it to a symbol\n        custom: true,\n        get: function (row, column) {\n            if (!this.elements[row])\n                return undefined;\n            return this.elements[row][column];\n        },\n        map: function(f, raw_values) {\n            var M = new Matrix();\n            this.each(function(e, i, j) {\n                M.set( i, j, f.call(M, e), raw_values);\n            });\n            return M;\n        },\n        set: function (row, column, value, raw) {\n            if (!this.elements[row])\n                this.elements[row] = [];\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\n        },\n        cols: function () {\n            return this.elements[0].length;\n        },\n        rows: function () {\n            return this.elements.length;\n        },\n        row: function (n) {\n            if (!n || n > this.cols())\n                return [];\n            return this.elements[n - 1];\n        },\n        col: function (n) {\n            var nr = this.rows(),\n                    col = [];\n            if (n > this.cols() || !n)\n                return col;\n            for (var i = 0; i < nr; i++) {\n                col.push(this.elements[i][n - 1]);\n            }\n            return col;\n        },\n        eachElement: function (fn) {\n            var nr = this.rows(),\n                    nc = this.cols(), i, j;\n            for (i = 0; i < nr; i++) {\n                for (j = 0; j < nc; j++) {\n                    fn.call(this, this.elements[i][j], i, j);\n                }\n            }\n        },\n        //ported from Sylvester.js\n        determinant: function () {\n            if (!this.isSquare()) {\n                return null;\n            }\n            var M = this.toRightTriangular();\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\n            do {\n                i = k - n + 1;\n                det = _.multiply(det, M.elements[i][i]);\n            }\n            while (--n);\n            return det;\n        },\n        isSquare: function () {\n            return this.elements.length === this.elements[0].length;\n        },\n        isSingular: function () {\n            return this.isSquare() && this.determinant() === 0;\n        },\n        augment: function (m) {\n            var r = this.rows(), rr = m.rows();\n            if (r !== rr)\n                err(\"Cannot augment matrix. Rows don't match.\");\n            for (var i = 0; i < r; i++) {\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\n            }\n\n            return this;\n        },\n        clone: function () {\n            var r = this.rows(), c = this.cols(),\n                    m = new Matrix();\n            for (var i = 0; i < r; i++) {\n                m.elements[i] = [];\n                for (var j = 0; j < c; j++) {\n                    var symbol = this.elements[i][j];\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n                }\n            }\n            return m;\n        },\n        //ported from Sylvester.js\n        invert: function () {\n            if (!this.isSquare())\n                err('Matrix is not square!');\n            return block('SAFE', function () {\n                var ni = this.elements.length, ki = ni, i, j;\n                var imatrix = Matrix.identity(ni);\n                var M = this.augment(imatrix).toRightTriangular();\n                var np, kp = M.elements[0].length, p, els, divisor;\n                var inverse_elements = [], new_element;\n                // Matrix is non-singular so there will be no zeros on the diagonal\n                // Cycle through rows from last to first\n                do {\n                    i = ni - 1;\n                    // First, normalise diagonal elements to 1\n                    els = [];\n                    np = kp;\n                    inverse_elements[i] = [];\n                    divisor = M.elements[i][i];\n                    do {\n                        p = kp - np;\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\n                        els.push(new_element);\n                        // Shuffle of the current row of the right hand side into the results\n                        // array as it will not be modified by later runs through this loop\n                        if (p >= ki) {\n                            inverse_elements[i].push(new_element);\n                        }\n                    }\n                    while (--np);\n                    M.elements[i] = els;\n                    // Then, subtract this row from those above it to\n                    // give the identity matrix on the left hand side\n                    for (j = 0; j < i; j++) {\n                        els = [];\n                        np = kp;\n                        do {\n                            p = kp - np;\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n                        }\n                        while (--np);\n                        M.elements[j] = els;\n                    }\n                }\n                while (--ni);\n                return Matrix.fromArray(inverse_elements);\n            }, undefined, this);\n        },\n        //ported from Sylvester.js\n        toRightTriangular: function () {\n            return block('SAFE', function () {\n                var M = this.clone(), els, fel, nel,\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\n                do {\n                    i = k - n;\n                    fel = M.elements[i][i];\n                    if (fel.valueOf() === 0) {\n                        for (var j = i + 1; j < k; j++) {\n                            nel = M.elements[j][i];\n                            if (nel && nel.valueOf() !== 0) {\n                                els = [];\n                                np = kp;\n                                do {\n                                    p = kp - np;\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                                }\n                                while (--np);\n                                M.elements[i] = els;\n                                break;\n                            }\n                        }\n                    }\n                    var fel = M.elements[i][i];\n                    if (fel.valueOf() !== 0) {\n                        for (j = i + 1; j < k; j++) {\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n                            els = [];\n                            np = kp;\n                            do {\n                                p = kp - np;\n                                // Elements with column numbers up to an including the number\n                                // of the row that we're subtracting can safely be set straight to\n                                // zero, since that's the point of this routine and it avoids having\n                                // to loop over and correct rounding errors later\n                                els.push(p <= i ? new Symbol(0) :\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n                            }\n                            while (--np);\n                            M.elements[j] = els;\n                        }\n                    }\n                }\n                while (--n);\n\n                return M;\n            }, undefined, this);\n        },\n        transpose: function () {\n            var rows = this.elements.length, cols = this.elements[0].length;\n            var M = new Matrix(), ni = cols, i, nj, j;\n\n            do {\n                i = cols - ni;\n                M.elements[i] = [];\n                nj = rows;\n                do {\n                    j = rows - nj;\n                    M.elements[i][j] = this.elements[j][i].clone();\n                }\n                while (--nj);\n            }\n            while (--ni);\n            return M;\n        },\n        // Returns true if the matrix can multiply the argument from the left\n        canMultiplyFromLeft: function (matrix) {\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\n            // this.columns should equal matrix.rows\n            return (this.elements[0].length === l);\n        },\n        sameSize: function (matrix) {\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n        },\n        multiply: function (matrix) {\n            return block('SAFE', function () {\n                var M = matrix.elements || matrix;\n                if (!this.canMultiplyFromLeft(M)) {\n                    if (this.sameSize(matrix)) {\n                        var MM = new Matrix();\n                        var rows = this.rows();\n                        for (var i = 0; i < rows; i++) {\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n                            MM.elements[i] = e.elements;\n                        }\n                        return MM;\n                    }\n                    return null;\n                }\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\n                do {\n                    i = ki - ni;\n                    elements[i] = [];\n                    nj = kj;\n                    do {\n                        j = kj - nj;\n                        sum = new Symbol(0);\n                        nc = cols;\n                        do {\n                            c = cols - nc;\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n                        }\n                        while (--nc);\n                        elements[i][j] = sum;\n                    }\n                    while (--nj);\n                }\n                while (--ni);\n                return Matrix.fromArray(elements);\n            }, undefined, this);\n        },\n        add: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        subtract: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        negate: function () {\n            this.each(function (e) {\n                return e.negate();\n            });\n            return this;\n        },\n        toVector: function () {\n            if (this.rows() === 1 || this.cols() === 1) {\n                var v = new Vector();\n                v.elements = this.elements;\n                return v;\n            }\n            return this;\n        },\n        toString: function (newline, to_decimal) {\n            var l = this.rows(),\n                    s = [];\n            newline = newline === undefined ? '\\n' : newline;\n            for (var i = 0; i < l; i++) {\n                s.push('[' + this.elements[i].map(function (x) {\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n                    return x !== undefined ? v : '';\n                }).join(',') + ']');\n            }\n            return 'matrix' + inBrackets(s.join(','));\n        },\n        text: function () {\n            return 'matrix(' + this.elements.toString('') + ')';\n        },\n        latex: function (option) {\n            var cols = this.cols(), elements = this.elements;\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n                var tex = [];\n                for (var row in elements) {\n                    var row_tex = [];\n                    for (var i = 0; i < cols; i++) {\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n                    }\n                    tex.push(row_tex.join(' & '));\n                }\n                return tex.join(' \\\\cr ');\n            });\n        }\n    };\n    //aliases\n    Matrix.prototype.each = Matrix.prototype.eachElement;\n\n\n    function Set(set) {\n        this.elements = [];\n        //if the first object isn't an array, convert it to one.\n        if(!isVector(set))\n            set = Vector.fromArray(arguments);\n        \n        if(set) { \n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                this.add(elements[i]);\n            }\n        }\n    }\n    \n    Set.fromArray = function (arr) {\n        function F(args) {\n            return Set.apply(this, args);\n        }\n        F.prototype = Set.prototype;\n\n        return new F(arr);\n    };\n    \n    Set.prototype = {\n        add: function(x) {\n            if(!this.contains(x))\n                this.elements.push(x.clone());\n        },\n        contains: function(x) {\n            for(var i=0; i<this.elements.length; i++) {\n                var e = this.elements[i];\n                if(x.equals(e))\n                    return true;\n            }\n            return false;\n        },\n        each: function(f) {\n            var elements = this.elements;\n            var set = new Set();\n            for(var i=0, l=elements.length; i<l; i++) {\n                var e = elements[i];\n                f.call(this, e, set, i);\n            }\n            return set;\n        },\n        clone: function() {\n            var set = new Set();\n            this.each(function(e) {\n                set.add(e.clone());\n            });\n            return set;\n        },\n        union: function(set) {\n            var _union = this.clone();\n            set.each(function(e) {\n                _union.add(e);\n            });\n            \n            return _union;\n        },\n        difference: function(set) {\n            var diff = this.clone();\n            set.each(function(e) {\n                diff.remove(e);\n            });\n            return diff;\n        },\n        remove: function(element) {\n            for(var i=0, l=this.elements.length; i<l; i++) {\n                var e = this.elements[i];\n                if(e.equals(element)) {\n                    remove(this.elements, i);\n                    return true;\n                }\n            }\n            return false;\n        },\n        intersection: function(set) { \n            var _intersection = new Set();\n            var A = this;\n            set.each(function(e) {\n                if(A.contains(e)) {\n                    _intersection.add(e);\n                };\n            });\n            \n            return _intersection;\n        },\n        intersects: function(set) {\n            return this.intersection(set).elements.length > 0;\n        },\n        is_subset: function(set) {\n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                if(!this.contains(elements[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        toString: function() {\n            return '{'+this.elements.join(',')+'}';\n        }\n    };\n\n//build ========================================================================\n    var Build = {\n        dependencies: {\n            _rename: {\n                'Math2.factorial': 'factorial'\n            },\n            factorial: {\n                'Math2.gamma': Math2.gamma\n            },\n            gamma_incomplete: {\n                'Math2.factorial': Math2.factorial\n            },\n            Li: {\n                'Math2.Ei': Math2.Ei,\n                'Math2.bigLog': Math2.bigLog,\n                'Frac': Frac\n            },\n            Ci: {\n                'Math2.factorial': Math2.factorial\n            },\n            Ei: {\n                'Math2.factorial': Math2.factorial\n            },\n            Si: {\n                'Math2.factorial': Math2.factorial\n            },\n            Shi: {\n                'Math2.factorial': Math2.factorial\n            },\n            Chi: {\n                'isInt': isInt,\n                'nround': nround,\n                'Math2.num_integrate': Math2.num_integrate\n            },\n            factor: {\n                'Math2.ifactor': Math2.ifactor,\n                'Symbol': Symbol\n            },\n            num_integrate: {\n                'Math2.simpson': Math2.simpson,\n                'nround': nround\n            },\n            fib: {\n                'even': even\n            }\n        },\n        /* Some functions need to be made numeric safe. Build checks if there's a \n         * reformat option and calls that instead when compiling the function string.\n         */\n        reformat: {\n            //this simply extends the build function\n            diff: function(symbol, deps) {\n                var f = 'var f = '+Build.build(symbol.args[0].toString())+';';\n                deps[1] += 'var diff = '+Math2.diff.toString()+';';\n                deps[1] += f;\n\n                return ['diff(f)('+symbol.args[1].toString()+')', deps];\n            }\n        },\n        getProperName: function(f) {\n            var map = {\n                continued_fraction: 'continuedFraction'\n            };\n            return map[f] || f;\n        },\n        //assumes that dependences are at max 2 levels\n        compileDependencies: function(f, deps) {\n            //grab the predefined dependiences\n            var dependencies = Build.dependencies[f];\n\n            //the dependency string\n            var dep_string = deps && deps[1] ? deps[1] : '';\n            \n            //the functions to be replaced\n            var replacements = deps && deps[0] ? deps[0] : {};\n            \n            //loop through them and add them to the list\n            for(var x in dependencies) {\n                if(typeof dependencies[x] === 'object')\n                    continue; //skip object\n                var components = x.split('.'); //Math.f becomes f\n                //if the function isn't part of an object then reference the function itself\n                dep_string += 'var '+(components.length > 1 ? components[1] : components[0])+'='+dependencies[x]+';';\n                replacements[x] = components.pop();\n            }\n            \n            return [replacements, dep_string];\n        },\n        getArgsDeps: function(symbol, dependencies) {\n            var args = symbol.args;\n            for(var i=0; i<args.length; i++) {\n                symbol.args[i].each(function(x) {\n                    if(x.group === FN)\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\n                });\n            }\n            return dependencies;\n        },\n        build: function (symbol, arg_array) {\n            symbol = block('PARSE2NUMBER', function () {\n                return _.parse(symbol);\n            }, true);\n            var args = variables(symbol);\n            var supplements = [];\n            var dependencies = [];\n            var ftext = function (symbol, xports) {\n                xports = xports || [];\n                var c = [],\n                        group = symbol.group,\n                        prefix = '';\n\n                var ftext_complex = function (group) {\n                    var d = group === CB ? '*' : '+',\n                            cc = [];\n\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x],\n                                ft = ftext(sym, xports)[0];\n                        //wrap it in brackets if it's group PL or CP\n                        if (sym.isComposite())\n                            ft = inBrackets(ft);\n                        cc.push(ft);\n                    }\n                    var retval = cc.join(d);\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n                    return retval;\n                },\n                ftext_function = function (bn) {\n                    var retval;\n                    if (bn in Math)\n                        retval = 'Math.' + bn;\n                    else {\n                        bn = Build.getProperName(bn);\n                        if (supplements.indexOf(bn) === -1) { //make sure you're not adding the function twice\n                            //Math2 functions aren't part of the standard javascript\n                            //Math library and must be exported.\n                            xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n                            supplements.push(bn);\n                        }\n                        retval = bn;\n                    }\n                    retval = retval + inBrackets(symbol.args.map(function (x) {\n                        return ftext(x, xports)[0];\n                    }).join(','));\n\n                    return retval;\n                };\n                \n                //the multiplier\n                if (group === N)\n                    c.push(symbol.multiplier.toDecimal());\n                else if (symbol.multiplier.equals(-1))\n                    prefix = '-';\n                else if (!symbol.multiplier.equals(1))\n                    c.push(symbol.multiplier.toDecimal());\n                //the value\n                var value;\n\n                if (group === S || group === P)\n                    value = symbol.value;\n                else if (group === FN) {\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\n                    if(Build.reformat[symbol.fname]) {\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\n                        dependencies = components[1];\n                        value = components[0];\n                    }\n                    else {\n                        value =  ftext_function(symbol.fname);\n                    }\n                    \n                }\n                else if (group === EX) {\n                    var pg = symbol.previousGroup;\n                    if (pg === N || pg === S)\n                        value = symbol.value;\n                    else if (pg === FN) {\n                        value = ftext_function(symbol.fname);\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\n                    }\n                    else\n                        value = ftext_complex(symbol.previousGroup);\n                }\n                else {\n                    value = ftext_complex(symbol.group);\n                }\n\n                if (symbol.group !== N && !symbol.power.equals(1)) {\n                    var pow = ftext(_.parse(symbol.power));\n                    xports.push(pow[1]);\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n                }\n\n                if (value)\n                    c.push(prefix + value);\n\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n            };\n            if (arg_array) {\n                for (var i = 0; i < args.length; i++) {\n                    var arg = args[i];\n                    if (arg_array.indexOf(arg) === -1)\n                        err(arg + ' not found in argument array');\n                }\n                args = arg_array;\n            }\n\n            var f_array = ftext(symbol);\n            \n            //make all the substitutions;\n            for(var x in dependencies[0]) {\n                var alias = dependencies[0][x];\n                f_array[1] = f_array[1].replace(x, alias);\n                dependencies[1] = dependencies[1].replace(x, alias);\n            }\n\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n            \n            return f;\n        }\n    };\n    \n    \n//finalize =====================================================================\n    /* FINALIZE */\n    (function () {\n        reserveNames(_.CONSTANTS);\n        reserveNames(_.functions);\n        _.initConstants();\n        //bug fix for error but needs to be revisited\n        if (!_.error)\n            _.error = err;\n        \n        //Store the log and log10 functions\n        Settings.LOG_FNS = {\n            log: _.functions['log'],\n            log10: _.functions['log10']\n        };\n        \n    })();\n    \n    /* END FINALIZE */\n\n//Core =========================================================================\n    var Utils = {\n        allSame: allSame,\n        allNumeric: allNumeric,\n        arguments2Array: arguments2Array,\n        arrayAddSlices: arrayAddSlices,\n        arrayClone: arrayClone,\n        arrayMax: arrayMax,\n        arrayMin: arrayMin,\n        arrayUnique: arrayUnique,\n        arraySum: arraySum,\n        block: block,\n        build: Build.build,\n        clearU: clearU,\n        comboSort: comboSort,\n        compare: compare,\n        convertToVector: convertToVector,\n        customError: customError,\n        customType: customType,\n        decompose_fn: decompose_fn,\n        each: each,\n        evaluate: evaluate,\n        even: even,\n        evenFraction: evenFraction,\n        fillHoles: fillHoles,\n        firstObject: firstObject,\n        format: format,\n        generatePrimes: generatePrimes,\n        getCoeffs: getCoeffs,\n        getU: getU,\n        importFunctions: importFunctions,\n        inBrackets: inBrackets,\n        isArray: isArray,\n        isExpression: isExpression,\n        isFraction: isFraction,\n        isInt: isInt,\n        isMatrix: isMatrix,\n        isNegative: isNegative,\n        isNumericSymbol: isNumericSymbol,\n        isPrime: isPrime,\n        isReserved: isReserved,\n        isSymbol: isSymbol,\n        isVariableSymbol: isVariableSymbol,\n        isVector: isVector,\n        keys: keys,\n        nroots: nroots,\n        remove: remove,\n        reserveNames: reserveNames,\n        range: range,\n        round: nround,\n        sameSign: sameSign,\n        scientificToDecimal: scientificToDecimal,\n        separate: separate,\n        stringReplace: stringReplace,\n        text: text,\n        validateName: validateName,\n        variables: variables,\n        warn: warn\n    };\n\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\n    //to be used.\n    var C = {\n        groups: Groups,\n        Symbol: Symbol,\n        Expression: Expression,\n        Frac: Frac,\n        Vector: Vector,\n        Matrix: Matrix,\n        Parser: Parser,\n        Fraction: Fraction,\n        Math2: Math2,\n        LaTeX: LaTeX,\n        Utils: Utils,\n        PARSER: _,\n        PARENTHESIS: PARENTHESIS,\n        Settings: Settings,\n        err: err,\n        bigInt: bigInt,\n        exceptions: exceptions\n    };\n\n//libExports ===================================================================  \n    /**\n     * \n     * @param {String} expression the expression to be evaluated\n     * @param {Object} subs the object containing the variable values\n     * @param {Integer} location a specific location in the equation list to \n     * insert the evaluated expression\n     * @param {String} option additional options\n     * @returns {Expression} \n     */\n    var libExports = function (expression, subs, option, location) {\n        //is the user declaring a function?\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n        if (fndec)\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n\n        //var variable, fn, args;\n        //convert any expression passed in to a string\n        if (expression instanceof Expression)\n            expression = expression.toString();\n\n        var multi_options = isArray(option),\n                expand = 'expand',\n                numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';\n        if ((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {\n            expression = format('{0}({1})', expand, expression);\n        }\n        var e = block('PARSE2NUMBER', function () {\n            return _.parse(expression, subs);\n        }, numer || Settings.PARSE2NUMBER);\n\n        if (location) {\n            EXPRESSIONS[location - 1] = e;\n        }\n        else {\n            EXPRESSIONS.push(e);\n        }\n\n        /*\n         if(variable) libExports.setVar(variable, e);\n         if(fn) libExports.setFunction(fn, args, e);\n         */\n\n        return new Expression(e);\n    };\n    /**\n     * Converts expression into rpn form\n     * @param {String} expression\n     * @returns {Token[]}\n     */\n    libExports.rpn = function (expression) {\n        return _.tokenize(_.toRPN(expression));\n    };\n\n    /**\n     * Generates LaTeX from expression string\n     * @param {String} e\n     * @param {object} opt\n     * @returns {String}\n     */\n    libExports.convertToLaTeX = function (e, opt) {\n        return _.toTeX(e, opt);\n    };\n\n    /**\n     * Converts latex to text - Very very very basic at the moment\n     * @param {String} e\n     * @returns {String}\n     */\n    libExports.convertFromLaTeX = function (e) {\n        var txt = LaTeX.parse(_.tokenize(e));\n        return new Expression(_.parse(txt));\n    };\n\n    /**\n     * Get the version of nerdamer or a loaded add-on\n     * @param {String} add_on - The add-on being checked\n     * @returns {String} returns the version of nerdamer\n     */\n    libExports.version = function (add_on) {\n        if (add_on) {\n            try {\n                return C[add_on].version;\n            }\n            catch (e) {\n                return \"No module named \" + add_on + \" found!\";\n            }\n        }\n        return version;\n    };\n\n    /**\n     * Get nerdamer generated warnings\n     * @returns {String[]}\n     */\n    libExports.getWarnings = function () {\n        return WARNINGS;\n    };\n\n    /**\n     * \n     * @param {String} constant The name of the constant to be set\n     * @param {mixed} value The value of the constant \n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setConstant = function (constant, value) {\n        validateName(constant);\n        if (!isReserved(constant)) {\n            //fix for issue #127\n            if (value === 'delete' || value === '') {\n                delete _.CONSTANTS[constant];\n            }\n            else {\n                if (isNaN(value))\n                    throw new NerdamerTypeError('Constant must be a number!');\n                _.CONSTANTS[constant] = value;\n            }\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a previously set constant\n     * @param {type} constant\n     * @returns {String}\n     */\n    libExports.getConstant = function (constant) {\n        return String(_.constant[constant]);\n    };\n\n    /**\n     * \n     * @param {String} name The name of the function\n     * @param {Array} params_array A list containing the parameter name of the functions\n     * @param {String} body The body of the function\n     * @returns {Boolean} returns true if succeeded and falls on fail\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n     */\n    libExports.setFunction = setFunction;\n\n    /**\n     * \n     * @returns {C} Exports the nerdamer core functions and objects\n     */\n    libExports.getCore = function () {\n        return C;\n    };\n\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\n\n    /**\n     * \n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\n     * @returns {String|Array}\n     */\n    libExports.reserved = function (asArray) {\n        if (asArray) {\n            return RESERVED;\n        }\n        return RESERVED.join(', ');\n    };\n\n    /**\n     * \n     * @param {Integer} equation_number the number of the equation to clear. \n     * If 'all' is supplied then all equations are cleared\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n        if (equation_number === 'all') {\n            EXPRESSIONS = [];\n        }\n        else if (equation_number === 'last') {\n            EXPRESSIONS.pop();\n        }\n        else if (equation_number === 'first') {\n            EXPRESSIONS.shift();\n        }\n        else {\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n        }\n        return this;\n    };\n\n    /**\n     * Alias for nerdamer.clear('all')\n     */\n    libExports.flush = function () {\n        this.clear('all');\n        return this;\n    };\n\n    /**\n     * \n     * @param {Boolean} asObject\n     * @param {Boolean} asLaTeX\n     * @param {String|String[]} option \n     * @returns {Array}\n     */\n    libExports.expressions = function (asObject, asLaTeX, option) {\n        var result = asObject ? {} : [];\n        for (var i = 0; i < EXPRESSIONS.length; i++) {\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n            asObject ? result[i + 1] = eq : result.push(eq);\n        }\n        return result;\n    };\n\n    //the method for registering modules\n    libExports.register = function (obj) {\n        var core = this.getCore();\n\n        if (isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                if (obj)\n                    this.register(obj[i]);\n            }\n        }\n        else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n            //make sure all the dependencies are available\n            if (obj.dependencies) {\n                for (var i = 0; i < obj.dependencies.length; i++)\n                    if (!core[obj.dependencies[i]])\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n            }\n            //if no parent object is provided then the function does not have an address and cannot be called directly\n            var parent_obj = obj.parent,\n                    fn = obj.build.call(core); //call constructor to get function\n            if (parent_obj) {\n                if (!core[parent_obj])\n                    core[obj.parent] = {};\n\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\n                //attach the function to the core\n                ref_obj[obj.name] = fn;\n            }\n            if (obj.visible)\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n\n        }\n    };\n\n    /**\n     * @param {String} name variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validateName = validateName;\n\n    /**\n     * @param {String} varname variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validVarName = function (varname) {\n        try {\n            validateName(varname);\n            return RESERVED.indexOf(varname) === -1;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n\n    /**\n     * \n     * @returns {Array} Array of functions currently supported by nerdamer\n     */\n    libExports.supported = function () {\n        return keys(_.functions);\n    };\n\n    /**\n     * \n     * @returns {Number} The number equations/expressions currently loaded\n     */\n    libExports.numEquations = libExports.numExpressions = function () {\n        return EXPRESSIONS.length;\n    };\n    /* END EXPORTS */\n\n    /**\n     * \n     * @param {String} v variable to be set\n     * @param {String} val value of variable. This can be a variable expression or number\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setVar = function (v, val) {\n        validateName(v);\n        //check if it's not already a constant\n        if (v in _.CONSTANTS)\n            err('Cannot set value for constant ' + v);\n        if (val === 'delete' || val === '')\n            delete VARS[v];\n        else {\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a set variable\n     * @param {type} v\n     * @returns {varies}\n     */\n    libExports.getVar = function (v) {\n        return VARS[v];\n    };\n    /**\n     * Clear the variables from the VARS object\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clearVars = function () {\n        VARS = {};\n        return this;\n    };\n\n    /**\n     * \n     * @param {Function} loader\n     * @returns {nerdamer}\n     */\n    libExports.load = function (loader) {\n        loader.call(this);\n        return this;\n    };\n\n    /**\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n     * @param {String|String[]} option\n     * @returns {Object} Returns an object with the variables\n     */\n    libExports.getVars = function (output, option) {\n        output = output || 'text';\n        var variables = {};\n        if (output === 'object')\n            variables = VARS;\n        else {\n            for (var v in VARS) {\n                if (output === 'latex') {\n                    variables[v] = VARS[v].latex(option);\n                }\n                else if (output === 'text') {\n                    variables[v] = VARS[v].text(option);\n                }\n            }\n        }\n        return variables;\n    };\n\n    /**\n     * Set the value of a setting\n     * @param {String} setting The setting to be changed\n     * @param {boolean} value \n     */\n    libExports.set = function (setting, value) {\n        //current options:\n        //PARSE2NUMBER, suppress_errors\n        if (typeof setting === 'object')\n            for (var x in setting) {\n                libExports.set(x, setting[x]);\n            }\n\n        var disallowed = ['SAFE'];\n        if (disallowed.indexOf(setting) !== -1)\n            err('Cannot modify setting: ' + setting);\n\n        if (setting === 'PRECISION')\n            bigDec.set({precision: value});\n        else if(setting === 'USE_LN' && value === true) {\n            //set log as LN\n            Settings.LOG = 'LN';\n            //set log10 as log\n            Settings.LOG10 = 'log';\n            //point the functions in the right direction\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n            //the log10 function must be explicitly set\n            _.functions['log'][0] = function(x) {\n                if(x.isConstant())\n                    return new Symbol(Math.log10(x));\n                return _.symfunction(Settings.LOG10, [x]);\n            };\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n            \n            //remove log10\n            delete _.functions['log10'];\n        }\n        else\n            Settings[setting] = value;\n    };\n\n    /**\n     * Get the value of a setting\n     * @param {type} setting\n     * @returns {undefined}\n     */\n    libExports.get = function (setting) {\n        return Settings[setting];\n    };\n\n    /**\n     * This functions makes internal functions available externally\n     * @param {bool} override Override the functions when calling api if it exists \n     */\n    libExports.api = function (override) {\n        //Map internal functions to external ones\n        var linker = function (fname) {\n            return function () {\n                var args = [].slice.call(arguments);\n                for (var i = 0; i < args.length; i++)\n                    args[i] = _.parse(args[i]);\n                return new Expression(block('PARSE2NUMBER', function () {\n                    return _.callfunction(fname, args);\n                }));\n            };\n        };\n        //perform the mapping\n        for (var x in _.functions)\n            if (!(x in libExports) || override)\n                libExports[x] = linker(x);\n    };\n\n    libExports.replaceFunction = function (name, fn, num_args) {\n        var existing = _.functions[name];\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n    };\n\n    libExports.setOperator = function (operator, shift) {\n        _.setOperator(operator, shift);\n    };\n    \n    libExports.getOperator = function(operator) {\n        return _.getOperator(operator);\n    };\n\n    libExports.aliasOperator = function(operator, withOperator) {\n        _.aliasOperator(operator, withOperator);\n    };\n\n    libExports.tree = function (expression) {\n        return _.tree(_.toRPN(_.tokenize(expression)));\n    };\n\n    libExports.htmlTree = function (expression, indent) {\n        var tree = this.tree(expression);\n\n        return '<div class=\"tree\">\\n' +\n                '    <ul>\\n' +\n                '        <li>\\n' +\n                tree.toHTML(3, indent) + '\\n' +\n                '        </li>\\n' +\n                '    </ul>\\n' +\n                '</div>';\n    };\n    \n    libExports.addPeeker = function(name, f) {\n        if(_.peekers[name])\n            _.peekers[name].push(f);\n    };\n    \n    libExports.removePeeker = function(name, f) {\n        remove(_.peekers[name], f);\n    };\n    \n    libExports.parse = function(e) {\n        return String(e).split(';').map(function(x) {\n            return _.parse(x);\n        });\n    };\n\n    libExports.api();\n\n    return libExports; //Done\n//imports ======================================================================\n})({\n    //https://github.com/peterolson/BigInteger.js\n    bigInt: (function(){\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\n        return bigInt;\n    })(),\n    /* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n    bigDec: function(n){\"use strict\";var e,i,t,r=9e15,s=1e9,o=\"0123456789abcdef\",u=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",c=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",f={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-r,maxE:r,crypto:!1},h=!0,a=\"[DecimalError] \",d=a+\"Invalid argument: \",l=a+\"Precision limit exceeded\",p=a+\"crypto unavailable\",g=Math.floor,w=Math.pow,m=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,v=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,N=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,b=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,E=1e7,x=7,M=u.length-1,y=c.length-1,q={name:\"[object Decimal]\"};function O(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=x-t.length)&&(s+=S(i)),s+=t;o=n[e],(i=x-(t=o+\"\").length)&&(s+=S(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(d+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=x,r=0):(r=Math.ceil((e+1)/x),e%=x),s=w(10,x-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function D(n,e,i){for(var t,r,s=[0],u=0,c=n.length;u<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=o.indexOf(n.charAt(u++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}q.absoluteValue=q.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},q.ceil=function(){return P(new this.constructor(this),this.e+1,2)},q.comparedTo=q.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},q.cosine=q.cos=function(){var n,e,i=this,r=i.constructor;return i.d?i.d[0]?(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=Math.pow(4,-i).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=W(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(r,J(r,i)),r.precision=n,r.rounding=e,P(2==t||3==t?i.neg():i,n,e,!0)):new r(1):new r(NaN)},q.cubeRoot=q.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*Math.pow(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=O(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=Math.pow(i,1/3),n=g((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),O(u.d).slice(0,o)===(i=O(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},q.decimalPlaces=q.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-g(this.e/x))*x,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},q.dividedBy=q.div=function(n){return Z(this,new this.constructor(n))},q.dividedToIntegerBy=q.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},q.equals=q.eq=function(n){return 0===this.cmp(n)},q.floor=function(){return P(new this.constructor(this),this.e+1,3)},q.greaterThan=q.gt=function(n){return this.cmp(n)>0},q.greaterThanOrEqualTo=q.gte=function(n){var e=this.cmp(n);return 1==e||0===e},q.hyperbolicCosine=q.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?(n=Math.ceil(r/3),e=Math.pow(4,-n).toString()):(n=16,e=\"2.3283064365386962890625e-10\"),s=W(o,1,s.times(e),new o(1),!0);for(var c,f=n,h=new o(8);f--;)c=s.times(s),s=u.minus(c.times(h.minus(c.times(h))));return P(s,o.precision=i,o.rounding=t,!0)},q.hyperbolicSine=q.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=W(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=W(s,2,r=r.times(Math.pow(5,-n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},q.hyperbolicTangent=q.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},q.inverseCosine=q.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?_(i,r,s):new i(0):new i(NaN):e.isZero()?_(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=_(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},q.inverseHyperbolicCosine=q.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},q.inverseHyperbolicSine=q.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},q.inverseHyperbolicTangent=q.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},q.inverseSine=q.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=_(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},q.inverseTangent=q.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=y)return(o=_(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=y)return(o=_(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/x+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/x),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},q.isFinite=function(){return!!this.d},q.isInteger=q.isInt=function(){return!!this.d&&g(this.e/x)>this.d.length-2},q.isNaN=function(){return!this.s},q.isNegative=q.isNeg=function(){return this.s<0},q.isPositive=q.isPos=function(){return this.s>0},q.isZero=function(){return!!this.d&&0===this.d[0]},q.lessThan=q.lt=function(n){return this.cmp(n)<0},q.lessThanOrEqualTo=q.lte=function(n){return this.cmp(n)<1},q.logarithm=q.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=B(this,u=a+5),t=e?U(f,u+10):B(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=B(this,u+=10),t=e?U(f,u+10):B(n,u),c=Z(o,t,u,1),!s){+O(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},q.minus=q.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,w=p.constructor;if(n=new w(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new w(n.d||p.s!==n.s?p:NaN):n=new w(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=w.precision,c=w.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new w(3===c?-0:0);n=new w(p)}return h?P(n,u,c):n}if(i=g(n.e/x),a=g(p.e/x),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/x),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=E-1;--f[r],f[t]+=E}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new w(3===c?-0:0)},q.modulo=q.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},q.naturalExponential=q.exp=function(){return H(this)},q.naturalLogarithm=q.ln=function(){return B(this)},q.negated=q.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},q.plus=q.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=g(d.e/x),t=g(n.e/x),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/x))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/E|0,f[r]%=E;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},q.precision=q.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(d+n);return i.d?(e=k(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},q.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},q.sine=q.sin=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return W(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(Math.pow(5,-i)),e=W(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(r,J(r,i)),r.precision=n,r.rounding=e,P(t>2?i.neg():i,n,e,!0)):new r(NaN)},q.squareRoot=q.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=O(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=g((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"1e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),O(s.d).slice(0,i)===(e=O(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},q.tangent=q.tan=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+10,r.rounding=1,(i=i.sin()).s=1,i=Z(i,new r(1).minus(i.times(i)).sqrt(),n+10,0),r.precision=n,r.rounding=e,P(2==t||4==t?i.neg():i,n,e,!0)):new r(NaN)},q.times=q.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=g(a.e/x)+g(n.e/x),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%E|0,e=u/E|0;s[r]=(s[r]+e)%E|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},q.toBinary=function(n,e){return z(this,2,n,e)},q.toDecimalPlaces=q.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,s),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},q.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},q.toFixed=function(n,e){var i,t,r=this,o=r.constructor;return void 0===n?i=R(r):(F(n,0,s),void 0===e?e=o.rounding:F(e,0,8),i=R(t=P(new o(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},q.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,l,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=k(m)-g.e-1)%x,e.d[0]=w(10,o<0?x+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(d+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(O(m)),a=v.precision,v.precision=s=m.length*x*2;l=Z(u,e,0,1,1),1!=(r=i.plus(l.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(l.times(r)),c=r,r=e,e=u.minus(l.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},q.toHexadecimal=q.toHex=function(n,e){return z(this,16,n,e)},q.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},q.toNumber=function(){return+this},q.toOctal=function(n,e){return z(this,8,n,e)},q.toPower=q.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=g(n.e/x))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=T(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:g(f*(Math.log(\"0.\"+O(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=H(n.times(B(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+O((r=P(H(n.times(B(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},q.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},q.toSignificantDigits=q.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,s),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},q.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},q.truncated=q.trunc=function(){return P(new this.constructor(this),this.e+1,1)},q.valueOf=q.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var h,a,d,l,p,w,m,v,N,b,M,y,q,O,F,A,D,Z,R,L,U=r.constructor,_=r.s==s.s?1:-1,k=r.d,S=s.d;if(!(k&&k[0]&&S&&S[0]))return new U(r.s&&s.s&&(k?!S||k[0]!=S[0]:S)?k&&0==k[0]||!S?0*_:_/0:NaN);for(f?(p=1,a=r.e-s.e):(f=E,p=x,a=g(r.e/p)-g(s.e/p)),R=S.length,D=k.length,b=(N=new U(_)).d=[],d=0;S[d]==(k[d]||0);d++);if(S[d]>(k[d]||0)&&a--,null==o?(O=o=U.precision,u=U.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),w=!0;else{if(O=O/p+2|0,d=0,1==R){for(l=0,S=S[0],O++;(d<D||l)&&O--;d++)F=l*f+(k[d]||0),b[d]=F/S|0,l=F%S|0;w=l||d<D}else{for((l=f/(S[0]+1)|0)>1&&(S=n(S,l,f),k=n(k,l,f),R=S.length,D=k.length),A=R,y=(M=k.slice(0,R)).length;y<R;)M[y++]=0;(L=S.slice()).unshift(0),Z=S[0],S[1]>=f/2&&++Z;do{l=0,(h=e(S,M,R,y))<0?(q=M[0],R!=y&&(q=q*f+(M[1]||0)),(l=q/Z|0)>1?(l>=f&&(l=f-1),1==(h=e(m=n(S,l,f),M,v=m.length,y=M.length))&&(l--,t(m,R<v?L:S,v,f))):(0==l&&(h=l=1),m=S.slice()),(v=m.length)<y&&m.unshift(0),t(M,m,y,f),-1==h&&(h=e(S,M,R,y=M.length))<1&&(l++,t(M,R<y?L:S,y,f)),y=M.length):0===h&&(l++,M=[0]),b[d++]=l,h&&M[0]?M[y++]=k[A]||0:(M=[k[A]],y=1)}while((A++<D||void 0!==M[0])&&O--);w=void 0!==M[0]}b[0]||b.shift()}if(1==p)N.e=a,i=w;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+a*p-1,P(N,c?o+N.e+1:o,u,w)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=x,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/x))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=x)-x+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=x)-x+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(x-e%x)%x),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,x-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==E&&(d[0]=1));break}if(d[l]+=u,d[l]!=E)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return V(n);var t,r=n.e,s=O(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+S(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+S(-r-1)+s,i&&(t=i-o)>0&&(s+=S(t))):r>=o?(s+=S(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+S(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=S(t))),s}function L(n,e){var i=n[0];for(e*=x;i>=10;i/=10)e++;return e}function U(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(l);return P(new n(u),e,1,!0)}function _(n,e,i){if(e>y)throw Error(l);return P(new n(c),e,i,!0)}function k(n){var e=n.length-1,i=e*x+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function S(n){for(var e=\"\";n--;)e+=\"0\";return e}function T(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/x+4);for(h=!1;;){if(i%2&&G((s=s.times(e)).d,o)&&(r=!0),0===(i=g(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}G((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function C(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function H(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),O((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===O(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function B(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,w=g.d,m=g.constructor,v=m.rounding,N=m.precision;if(g.s<0||!w||!w[0]||!g.e&&1==w[0]&&1==w.length)return new m(w&&!w[0]?-1/0:1!=g.s?NaN:w?0:g);if(null==e?(h=!1,a=N):a=e,m.precision=a+=10,t=(i=O(w)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=U(m,a+2,N).times(s+\"\"),g=B(new m(t+\".\"+i.slice(1)),a-10).plus(f),m.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=O((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new m(\"0.\"+i),s++):g=new m(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),O((f=c.plus(Z(o,new m(r),a,1))).d).slice(0,a)===O(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(U(m,a+2,N).times(s+\"\"))),c=Z(c,new m(p),a,1),null!=e)return m.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,m.precision=N,v,h=!0);m.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function V(n){return String(n.s*n.s/0)}function j(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%x,i<0&&(t+=x),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=x;t<r;)n.d.push(+e.slice(t,t+=x));e=e.slice(t),t=x-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function $(n,i){var t,r,s,o,u,c,f,a,l;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(v.test(i))t=16,i=i.toLowerCase();else if(m.test(i))t=2;else{if(!N.test(i))throw Error(d+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=T(r,new r(t),o,2*o)),o=l=(a=D(i,t,E)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,l),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?Math.pow(2,f):e.pow(2,f))),h=!0,n)}function W(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/x);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function J(n,e){var i,r=e.s<0,s=_(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return t=r?4:1,e;if((i=e.divToInt(s)).isZero())t=r?3:2;else{if((e=e.minus(i.times(s))).lte(o))return t=I(i)?r?2:3:r?4:1,e;t=I(i)?r?1:4:r?3:2}return e.minus(s).abs()}function z(n,e,t,r){var u,c,f,h,a,d,l,p,g,w=n.constructor,m=void 0!==t;if(m?(F(t,1,s),void 0===r?r=w.rounding:F(r,0,8)):(t=w.precision,r=w.rounding),n.isFinite()){for(m?(u=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):u=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new w(1)).e=l.length-f,g.d=D(R(g),10,u),g.e=g.d.length),c=a=(p=D(l,10,u)).length;0==p[--a];)p.pop();if(p[0]){if(f<0?c--:((n=new w(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,u)).d,c=n.e,d=i),f=p[t],h=u/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>h||f===h&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>u-1;)p[t]=0,t||(++c,p.unshift(1));for(a=p.length;!p[a-1];--a);for(f=0,l=\"\";f<a;f++)l+=o.charAt(p[f]);if(m){if(a>1)if(16==e||8==e){for(f=16==e?4:3,--a;a%f;a++)l+=\"0\";for(a=(p=D(l,u,e)).length;!p[a-1];--a);for(f=1,l=\"1.\";f<a;f++)l+=o.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>a)for(c-=a;c--;)l+=\"0\";else c<a&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=m?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=V(n);return n.s<0?\"-\"+l:l}function G(n,e){if(n.length>e)return n.length=e,!0}function K(n){return new this(n).abs()}function Q(n){return new this(n).acos()}function X(n){return new this(n).acosh()}function Y(n,e){return new this(n).plus(e)}function nn(n){return new this(n).asin()}function en(n){return new this(n).asinh()}function tn(n){return new this(n).atan()}function rn(n){return new this(n).atanh()}function sn(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?_(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=_(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=_(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=_(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function on(n){return new this(n).cbrt()}function un(n){return P(n=new this(n),n.e+1,2)}function cn(n){if(!n||\"object\"!=typeof n)throw Error(a+\"Object expected\");var e,i,t,o=!0===n.defaults,u=[\"precision\",1,s,\"rounding\",0,8,\"toExpNeg\",-r,0,\"toExpPos\",0,r,\"maxE\",0,r,\"minE\",-r,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!(g(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(d+i+\": \"+t);this[i]=t}if(i=\"crypto\",o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(d+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(p);this[i]=!0}else this[i]=!1}return this}function fn(n){return new this(n).cos()}function hn(n){return new this(n).cosh()}function an(n,e){return new this(n).div(e)}function dn(n){return new this(n).exp()}function ln(n){return P(n=new this(n),n.e+1,3)}function pn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function gn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function wn(n){return new this(n).ln()}function mn(n,e){return new this(n).log(e)}function vn(n){return new this(n).log(2)}function Nn(n){return new this(n).log(10)}function bn(){return C(this,arguments,\"lt\")}function En(){return C(this,arguments,\"gt\")}function xn(n,e){return new this(n).mod(e)}function Mn(n,e){return new this(n).mul(e)}function yn(n,e){return new this(n).pow(e)}function qn(n){var e,i,t,r,o=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,s),t=Math.ceil(n/x),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));o<t;)(r=e[o])>=429e7?e[o]=crypto.getRandomValues(new Uint32Array(1))[0]:c[o++]=r%1e7;else{if(!crypto.randomBytes)throw Error(p);for(e=crypto.randomBytes(t*=4);o<t;)(r=e[o]+(e[o+1]<<8)+(e[o+2]<<16)+((127&e[o+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,o):(c.push(r%1e7),o+=4);o=t/4}else for(;o<t;)c[o++]=1e7*Math.random()|0;for(t=c[--o],n%=x,t&&n&&(r=w(10,x-n),c[o]=(t/r|0)*r);0===c[o];o--)c.pop();if(o<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=x)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<x&&(i-=x-t)}return u.e=i,u.d=c,u}function On(n){return P(n=new this(n),n.e+1,this.rounding)}function Fn(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function An(n){return new this(n).sin()}function Dn(n){return new this(n).sinh()}function Zn(n){return new this(n).sqrt()}function Pn(n,e){return new this(n).sub(e)}function Rn(n){return new this(n).tan()}function Ln(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):j(r,n.toString())}if(\"string\"!==t)throw Error(d+n);return 45===n.charCodeAt(0)?(n=n.slice(1),r.s=-1):r.s=1,b.test(n)?j(r,n):$(r,n)}if(s.prototype=q,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=cn,s.clone=n,s.isDecimal=gn,s.abs=K,s.acos=Q,s.acosh=X,s.add=Y,s.asin=nn,s.asinh=en,s.atan=tn,s.atanh=rn,s.atan2=sn,s.cbrt=on,s.ceil=un,s.cos=fn,s.cosh=hn,s.div=an,s.exp=dn,s.floor=ln,s.hypot=pn,s.ln=wn,s.log=mn,s.log10=Nn,s.log2=vn,s.max=bn,s.min=En,s.mod=xn,s.mul=Mn,s.pow=yn,s.random=qn,s.round=On,s.sign=Fn,s.sin=An,s.sinh=Dn,s.sqrt=Zn,s.sub=Pn,s.tan=Rn,s.tanh=Ln,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(f)).default=e.Decimal=e,u=new e(u),c=new e(c),e}()\n//    bigDec: require('decimal.js')\n});\n\nif ((typeof module) !== 'undefined') {\n    module.exports = nerdamer;\n};\n"]},"metadata":{},"sourceType":"script"}