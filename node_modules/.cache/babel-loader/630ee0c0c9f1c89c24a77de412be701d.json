{"ast":null,"code":"var _jsxFileName = \"/Users/nadol/Desktop/reactjs/my-app/src/Bisection.js\";\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\n\nclass Bisection extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      result: null\n    };\n    this.elements = {};\n    this.cal = this.cal.bind(this);\n  }\n\n  render() {\n    const {\n      result\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"BISECTION\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Equation :\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.equation,\n      onChange: this.handleChange,\n      placeholder: \"Enter Equation\",\n      defaultValue: '2x+1',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"L\"), \" :\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.xl,\n      onChange: this.handleChange,\n      placeholder: \"Enter Xl\",\n      defaultValue: '2',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"R\"), \" :\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.xr,\n      onChange: this.handleChange,\n      placeholder: \"Enter Xr\",\n      defaultValue: '1',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      value: \"Submit\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, result), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Iteration\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"M\"), \"(old)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"L\")), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"R\")), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"L\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"R\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"M\"), \"(new)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"M\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Error\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"0\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"0\"))))));\n  }\n\n  clear(event) {\n    event.preventDefault();\n    this.setState({\n      Arr: []\n    });\n    this.setState({\n      xl: \"\"\n    });\n    this.setState({\n      xr: \"\"\n    });\n    this.setState({\n      E: \"\"\n    });\n    this.setState({\n      submitted: true\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    this.setState({\n      submitted: true\n    });\n    this.setState({\n      Arr: []\n    });\n  }\n\n  cal() {\n    var data = {\n      xl: 0,\n      xr: 0,\n      xm: 0,\n      err: \"\",\n      fxl: 0,\n      fxr: 0,\n      fxm: 0,\n      count: 1\n    };\n    const xl = parseInt(this.elements.xl.value, 10);\n    const xr = parseInt(this.elements.xr.value, 10);\n    const x_old = xr;\n    const xm = 0;\n    const n = 0;\n    const check = parseFloat(0.000000);\n    const result = 0;\n\n    do {\n      this.result = this.findxm(xl, xr);\n      this.check = Math.abs((xm - x_old) / xm).toFixed(8);\n      this.result = 1; // console.log(check);\n      // n++;\n      // console.log(n);\n      // // Create an empty <tr> element and add it to the 1st position of the table:\n      // var row = this.table.insertRow(n);\n      // // Insert new cells (<td> elements) at the 1st and 2nd position of the \"new\" <tr> element:\n      // var cell1 = row.insertCell(0);\n      // var cell2 = row.insertCell(1);\n      // var cell3 = row.insertCell(2);\n      // var cell4 = row.insertCell(3);\n      // var cell5 = row.insertCell(4);\n      // // Add some text to the new cells:\n      // cell1.innerHTML = n;\n      // cell2.innerHTML = xl;\n      // cell3.innerHTML = xr;\n      // cell4.innerHTML = xm;\n      // cell5.innerHTML = check;\n\n      if (parseFloat(xl) < parseFloat(xr)) {\n        if (this.funcal(xl) < this.funcal(xr)) {\n          if (this.funcal(xm) > 0) {\n            xr = xm;\n          } else if (this.funcal(xm) < 0) {\n            xl = xm;\n          }\n        } else if (this.funcal(xl) > this.funcal(xr)) {\n          if (this.funcal(xm) < 0) {\n            xr = xm;\n          } else if (this.funcal(xm) > 0) {\n            xl = xm;\n          }\n        }\n      } // const x_old = xm\n\n    } while (check > 0.00001);\n\n    this.setState({\n      result: result\n    });\n  }\n\n  findxm(xl, xr) {\n    return (xl + xr) / 2;\n  }\n\n  funcal(X) {\n    const equation = parseInt(this.elements.equation.value, 10); // expr = math.compile(expression);\n    // let scope = {x:parseFloat(X)};\n    // return expr.eval(scope);\n  }\n\n}\n\nexport default Bisection; // constructor() {\n//     super()\n//     this.state = {\n//         result: null,\n//     }\n//     this.elements = {}\n//     this.onPlus = this.onPlus.bind(this);\n// }\n// render() {\n//     const { result } = this.state\n//     return (\n//         <div>\n//         <Header/>\n//         <Sidebar />\n//         <div className=\"content\">\n//             <form>\n//             <h1>Bisection</h1>\n//             <p>Enter Input</p>\n//             equation : <input type=\"text\" defaultValue={ '' } ref={ (el) => this.elements.equation = el } /><br></br><br></br>\n//             X<sub>L</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.firstValue = el } /><br></br><br></br>\n//             X<sub>R</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.secondValue = el } /><br></br><br></br>\n//             <button type=\"button\" onClick={ this.onPlus }>Click</button>\n//             <p className='result'>{ result }</p>\n//             </form>\n//         </div>\n//         </div>\n//     );\n// }\n// onPlus() {\n//     const firstValue = parseInt(this.elements.firstValue.value, 10)\n//     const secondValue = parseInt(this.elements.secondValue.value, 10)\n//     const resultPlus = this.plus(firstValue, secondValue)\n//     const x_old = secondValue;\n//     const n = 0;\n//const xm = 0;\n//const check = parseFloat(0.000000);\n// do{\n//const xm = this.findxm(firstValue, secondValue)\n//const rr = this.funcal(firstValue)\n// check = Math.abs((xm-x_old)/xm).toFixed(8);\n// console.log(check);\n// n++;\n// console.log(n);\n// if(parseFloat(firstValue)<parseFloat(secondValue)){\n//     if(this.funcal(firstValue)<this.funcal(secondValue)){\n//             if(this.funcal(xm)>0){\n//                     secondValue = xm\n//             }\n//             else if(this.funcal(xm)<0){\n//                     firstValue = xm\n//             }\n//     }\n//     else if(this.funcal(firstValue)>this.funcal(secondValue)){\n//             if(this.funcal(xm)<0){\n//                     secondValue = xm\n//             }\n//             else if(this.funcal(xm)>0){\n//                     firstValue = xm\n//             }\n//     }\n// }\n//x_old = xm\n// }while(check>0.00001)\n//     this.setState({\n//         result: resultPlus\n//     });\n// }\n// plus(firstValue, secondValue) {\n//     return firstValue + secondValue\n// }\n// findxm(firstValue, secondValue) {\n//     return (firstValue + secondValue) / 2\n// }\n// funcal(X) {\n//     const equation = parseInt(this.elements.equation.value, 10)\n//     //const expr = Math.compile(equation);\n//     // const scope = {x:parseFloat(X)};\n//     const expr = \"2x+1\";\n//     return expr.eval(X);\n// }\n// }\n// export default Bisection;","map":{"version":3,"sources":["/Users/nadol/Desktop/reactjs/my-app/src/Bisection.js"],"names":["React","Component","Header","Sidebar","Bisection","constructor","state","result","elements","cal","bind","render","equation","handleChange","xl","xr","handleSubmit","clear","event","preventDefault","setState","Arr","E","submitted","target","name","value","data","xm","err","fxl","fxr","fxm","count","parseInt","x_old","n","check","parseFloat","findxm","Math","abs","toFixed","funcal","X"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Header from './Header';\nimport Sidebar from './Sidebar';\n\n\nclass Bisection extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            result: null,\n        }\n        this.elements = {}\n        this.cal = this.cal.bind(this);\n    }\n\n    render() {\n        const { result } = this.state\n        return (\n            <div>\n                <Header/>\n                <Sidebar />\n                <div className=\"content\">\n                    <h1>BISECTION</h1><br></br>\n                        <h3>Equation :</h3>\n                        <input type=\"text\" value={this.state.equation} onChange={this.handleChange} placeholder=\"Enter Equation\" defaultValue={ '2x+1' }></input><br></br>\n                        <h3>X<sub>L</sub> :</h3>\n                        <input type=\"text\" value={this.state.xl} onChange={this.handleChange} placeholder=\"Enter Xl\" defaultValue={ '2' }></input><br></br>\n                        <h3>X<sub>R</sub> :</h3>\n                        <input type=\"text\" value={this.state.xr} onChange={this.handleChange} placeholder=\"Enter Xr\" defaultValue={ '1' }></input><br></br><br></br>\n                        <button type=\"submit\" value=\"Submit\" onSubmit={this.handleSubmit}>Submit</button><br></br><br></br><br></br><br></br>\n\n                        <p>{ result }</p>\n\n                        <center><table>\n                            <tr>\n                                <th>Iteration</th>\n                                <th>X<sub>M</sub>(old)</th>\n                                <th>X<sub>L</sub></th>\n                                <th>X<sub>R</sub></th>\n                                <th>F(X<sub>L</sub>)</th>\n                                <th>F(X<sub>R</sub>)</th>\n                                <th>X<sub>M</sub>(new)</th>\n                                <th>F(X<sub>M</sub>)</th>\n                                <th>Error</th>\n                            </tr>\n                            <tr>\n                                <td>0</td>\n                                <td>0</td>\n                                <td>0</td>\n                            </tr>\n                            <tr>\n                                <td>0</td>\n                                <td>0</td>\n                                <td>0</td>\n                            </tr>\n                        </table></center>\n\n                        \n                </div>\n\n            </div>\n\n        )\n    }\n\n    clear(event){\n        event.preventDefault();\n        this.setState({Arr:[]});\n        this.setState({xl:\"\"});\n        this.setState({xr:\"\"});\n        this.setState({E:\"\"});\n        this.setState({submitted:true});\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n        this.setState({submitted:true});\n        this.setState({Arr:[]});\n    }\n\n    cal() {\n        var data={xl:0,xr:0,xm:0,err:\"\",fxl:0,fxr:0,fxm:0,count:1};\n        const xl = parseInt(this.elements.xl.value, 10)\n        const xr = parseInt(this.elements.xr.value, 10)\n        const x_old = xr;\n        const xm = 0;\n        const n = 0;\n        const check = parseFloat(0.000000);\n        const result = 0;\n\n        do{\n            this.result = this.findxm(xl, xr);\n            this.check = Math.abs((xm-x_old)/xm).toFixed(8);\n            this.result = 1;\n            // console.log(check);\n            // n++;\n            // console.log(n);\n            // // Create an empty <tr> element and add it to the 1st position of the table:\n            // var row = this.table.insertRow(n);\n\n            // // Insert new cells (<td> elements) at the 1st and 2nd position of the \"new\" <tr> element:\n            // var cell1 = row.insertCell(0);\n            // var cell2 = row.insertCell(1);\n            // var cell3 = row.insertCell(2);\n            // var cell4 = row.insertCell(3);\n            // var cell5 = row.insertCell(4);\n\n            // // Add some text to the new cells:\n            // cell1.innerHTML = n;\n            // cell2.innerHTML = xl;\n            // cell3.innerHTML = xr;\n            // cell4.innerHTML = xm;\n            // cell5.innerHTML = check;\n            if(parseFloat(xl)<parseFloat(xr)){\n                if(this.funcal(xl)<this.funcal(xr)){\n                        if(this.funcal(xm)>0){\n                                xr = xm\n                        }\n                        else if(this.funcal(xm)<0){\n                                xl = xm\n                        }\n                }\n                else if(this.funcal(xl)>this.funcal(xr)){\n                        if(this.funcal(xm)<0){\n                                xr = xm\n                        }\n                        else if(this.funcal(xm)>0){\n                                xl = xm\n                        }\n                }\n            }\n                // const x_old = xm\n        }while(check>0.00001)        \n\n        this.setState({\n            result: result\n        });\n    }\n\n    findxm(xl,xr) {\n        return (xl+xr)/2\n    }\n\n    funcal(X) {\n        const equation = parseInt(this.elements.equation.value, 10)\n        // expr = math.compile(expression);\n        // let scope = {x:parseFloat(X)};\n        // return expr.eval(scope);\n    }\n\n    \n    \n}\n\nexport default Bisection;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         result: null,\n    //     }\n    //     this.elements = {}\n    //     this.onPlus = this.onPlus.bind(this);\n    // }\n\n    \n    // render() {\n    //     const { result } = this.state\n    //     return (\n    //         <div>\n    //         <Header/>\n    //         <Sidebar />\n    //         <div className=\"content\">\n    //             <form>\n    //             <h1>Bisection</h1>\n    //             <p>Enter Input</p>\n    //             equation : <input type=\"text\" defaultValue={ '' } ref={ (el) => this.elements.equation = el } /><br></br><br></br>\n    //             X<sub>L</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.firstValue = el } /><br></br><br></br>\n    //             X<sub>R</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.secondValue = el } /><br></br><br></br>\n    //             <button type=\"button\" onClick={ this.onPlus }>Click</button>\n    //             <p className='result'>{ result }</p>\n    //             </form>\n    //         </div>\n    //         </div>\n    //     );\n    // }\n\n    // onPlus() {\n    //     const firstValue = parseInt(this.elements.firstValue.value, 10)\n    //     const secondValue = parseInt(this.elements.secondValue.value, 10)\n    //     const resultPlus = this.plus(firstValue, secondValue)\n    //     const x_old = secondValue;\n    //     const n = 0;\n\n        //const xm = 0;\n        \n        //const check = parseFloat(0.000000);\n        // do{\n            //const xm = this.findxm(firstValue, secondValue)\n            //const rr = this.funcal(firstValue)\n            // check = Math.abs((xm-x_old)/xm).toFixed(8);\n            // console.log(check);\n            // n++;\n            // console.log(n);\n\n            // if(parseFloat(firstValue)<parseFloat(secondValue)){\n            //     if(this.funcal(firstValue)<this.funcal(secondValue)){\n            //             if(this.funcal(xm)>0){\n            //                     secondValue = xm\n            //             }\n            //             else if(this.funcal(xm)<0){\n            //                     firstValue = xm\n            //             }\n            //     }\n            //     else if(this.funcal(firstValue)>this.funcal(secondValue)){\n            //             if(this.funcal(xm)<0){\n            //                     secondValue = xm\n            //             }\n            //             else if(this.funcal(xm)>0){\n            //                     firstValue = xm\n            //             }\n            //     }\n            // }\n            //x_old = xm\n        // }while(check>0.00001)\n\n    //     this.setState({\n    //         result: resultPlus\n    //     });\n    // }\n\n    // plus(firstValue, secondValue) {\n    //     return firstValue + secondValue\n    // }\n\n    // findxm(firstValue, secondValue) {\n    //     return (firstValue + secondValue) / 2\n    // }\n\n    // funcal(X) {\n    //     const equation = parseInt(this.elements.equation.value, 10)\n    //     //const expr = Math.compile(equation);\n    //     // const scope = {x:parseFloat(X)};\n    //     const expr = \"2x+1\";\n    //     return expr.eval(X);\n    // }\n\n    \n\n// }\n\n// export default Bisection;"]},"metadata":{},"sourceType":"module"}