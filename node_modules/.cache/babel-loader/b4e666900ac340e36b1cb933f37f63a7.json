{"ast":null,"code":"var _jsxFileName = \"/Users/nadol/Desktop/reactjs/my-app/src/Bisection.js\";\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\nimport * as math from 'mathjs';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nvar X, Y;\n\nclass Bisection extends React.Component {\n  constructor(props) {\n    super(props);\n    X = [];\n    Y = [];\n    this.state = {\n      Arr: [],\n      xl: \"\",\n      xr: \"\",\n      equation: \"\",\n      submitted: true\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.BisectionMethod = this.BisectionMethod.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    this.setState({\n      submitted: true\n    });\n    this.setState({\n      Arr: []\n    });\n  }\n\n  handleSubmit(event) {\n    const data = [{\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100\n    }];\n    let str = this.state.equation;\n    let c = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === \"x\" || str[i] === \"X\") {\n        c++;\n      }\n    }\n\n    if (str.length !== 0 && c !== 0 && this.state.submitted && this.state.xl !== \"\" && this.state.xr !== \"\") {\n      this.BisectionMethod();\n      this.setState({\n        submitted: false\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  BisectionMethod(event) {\n    X = [];\n    Y = [];\n\n    var func = x => {\n      let scope = {\n        x: x\n      };\n      let code = math.compile(this.state.equation);\n      return code.eval(scope);\n    };\n\n    var err = (x0, x1) => {\n      return Math.abs((x1 - x0) / x1) * 100;\n    };\n\n    var arr;\n    var data = {\n      xl: 0,\n      xr: 0,\n      xm: 0,\n      err: \"\",\n      fxl: 0,\n      fxr: 0,\n      fxm: 0,\n      count: 1\n    };\n    var t = true;\n    var xOld = 0;\n    data.xl = parseFloat(this.state.xl);\n    data.xr = parseFloat(this.state.xr);\n\n    while (t) {\n      data.xm = (data.xl + data.xr) / 2;\n      data.fxl = func(data.xl).toFixed(6);\n      data.fxr = func(data.xr).toFixed(6);\n      data.fxm = func(data.xm).toFixed(6);\n      data.err = err(xOld, data.xm);\n      arr = this.state.Arr;\n      arr.push({\n        xl: data.xl,\n        xr: data.xr,\n        xm: data.xm,\n        err: data.err,\n        fxl: data.fxl,\n        fxr: data.fxr,\n        fxm: data.fxm,\n        count: data.count\n      });\n\n      if (func(data.xm) === 0 || data.count === 15) {\n        t = false;\n      } else if (func(data.xl) * func(data.xm) < 0) {\n        data.xr = data.xm;\n      } else if (func(data.xl) * func(data.xm) > 0) {\n        data.xl = data.xm;\n      }\n\n      data.count++;\n      xOld = data.xm;\n    }\n\n    for (let i = this.state.xl; i <= this.state.xr; i++) {\n      X.push(i);\n      Y.push(func(i));\n    }\n  }\n\n  render() {\n    const DataRow = props => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, props.data.count), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, props.data.xl), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, props.data.xr), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, props.data.xm), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, props.data.fxl), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, props.data.fxr), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, props.data.fxm), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, props.data.err));\n    };\n\n    let rows = this.state.Arr.map(x => {\n      return React.createElement(DataRow, {\n        key: x.count,\n        data: x,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"F\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"BISECTION\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Equation :\"), React.createElement(\"input\", {\n      name: \"equation\",\n      type: \"text\",\n      value: this.state.equation,\n      onChange: this.handleChange,\n      placeholder: \"Enter Equation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"L\"), \" :\"), React.createElement(\"input\", {\n      name: \"xl\",\n      type: \"text\",\n      step: \"any\",\n      value: this.state.xl,\n      onChange: this.handleChange,\n      placeholder: \"Enter Xl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"R\"), \" :\"), React.createElement(\"input\", {\n      name: \"xr\",\n      type: \"number\",\n      step: \"any\",\n      value: this.state.xr,\n      onChange: this.handleChange,\n      placeholder: \"Enter Xr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), this.state.submitted ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"T\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Iteration\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"L\"), \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"R\"), \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"M\"), \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"L\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"R\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"F(X\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"M\"), \")\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Error\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, rows))))), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Chart\"), React.createElement(LineChart, {\n      width: 500,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      dataKey: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }))));\n  } // cal() {\n  //     var data={xl:0,xr:0,xm:0,err:\"\",fxl:0,fxr:0,fxm:0,count:1};\n  //     const xl = parseInt(this.elements.xl.value, 10)\n  //     const xr = parseInt(this.elements.xr.value, 10)\n  //     const x_old = xr;\n  //     const xm = 0;\n  //     const n = 0;\n  //     const check = parseFloat(0.000000);\n  //     const result = 0;\n  //     do{\n  //         this.result = this.findxm(xl, xr);\n  //         this.check = Math.abs((xm-x_old)/xm).toFixed(8);\n  //         this.result = 1;\n  //         // console.log(check);\n  //         // n++;\n  //         // console.log(n);\n  //         // // Create an empty <tr> element and add it to the 1st position of the table:\n  //         // var row = this.table.insertRow(n);\n  //         // // Insert new cells (<td> elements) at the 1st and 2nd position of the \"new\" <tr> element:\n  //         // var cell1 = row.insertCell(0);\n  //         // var cell2 = row.insertCell(1);\n  //         // var cell3 = row.insertCell(2);\n  //         // var cell4 = row.insertCell(3);\n  //         // var cell5 = row.insertCell(4);\n  //         // // Add some text to the new cells:\n  //         // cell1.innerHTML = n;\n  //         // cell2.innerHTML = xl;\n  //         // cell3.innerHTML = xr;\n  //         // cell4.innerHTML = xm;\n  //         // cell5.innerHTML = check;\n  //         if(parseFloat(xl)<parseFloat(xr)){\n  //             if(this.funcal(xl)<this.funcal(xr)){\n  //                     if(this.funcal(xm)>0){\n  //                             xr = xm\n  //                     }\n  //                     else if(this.funcal(xm)<0){\n  //                             xl = xm\n  //                     }\n  //             }\n  //             else if(this.funcal(xl)>this.funcal(xr)){\n  //                     if(this.funcal(xm)<0){\n  //                             xr = xm\n  //                     }\n  //                     else if(this.funcal(xm)>0){\n  //                             xl = xm\n  //                     }\n  //             }\n  //         }\n  //             // const x_old = xm\n  //     }while(check>0.00001)        \n  //     this.setState({\n  //         result: result\n  //     });\n  // }\n  // findxm(xl,xr) {\n  //     return (xl+xr)/2\n  // }\n  // funcal(X) {\n  //     const equation = parseInt(this.elements.equation.value, 10)\n  //     // expr = math.compile(expression);\n  //     // let scope = {x:parseFloat(X)};\n  //     // return expr.eval(scope);\n  // }\n\n\n}\n\nexport default Bisection; // constructor() {\n//     super()\n//     this.state = {\n//         result: null,\n//     }\n//     this.elements = {}\n//     this.onPlus = this.onPlus.bind(this);\n// }\n// render() {\n//     const { result } = this.state\n//     return (\n//         <div>\n//         <Header/>\n//         <Sidebar />\n//         <div className=\"content\">\n//             <form>\n//             <h1>Bisection</h1>\n//             <p>Enter Input</p>\n//             equation : <input type=\"text\" defaultValue={ '' } ref={ (el) => this.elements.equation = el } /><br></br><br></br>\n//             X<sub>L</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.firstValue = el } /><br></br><br></br>\n//             X<sub>R</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.secondValue = el } /><br></br><br></br>\n//             <button type=\"button\" onClick={ this.onPlus }>Click</button>\n//             <p className='result'>{ result }</p>\n//             </form>\n//         </div>\n//         </div>\n//     );\n// }\n// onPlus() {\n//     const firstValue = parseInt(this.elements.firstValue.value, 10)\n//     const secondValue = parseInt(this.elements.secondValue.value, 10)\n//     const resultPlus = this.plus(firstValue, secondValue)\n//     const x_old = secondValue;\n//     const n = 0;\n//const xm = 0;\n//const check = parseFloat(0.000000);\n// do{\n//const xm = this.findxm(firstValue, secondValue)\n//const rr = this.funcal(firstValue)\n// check = Math.abs((xm-x_old)/xm).toFixed(8);\n// console.log(check);\n// n++;\n// console.log(n);\n// if(parseFloat(firstValue)<parseFloat(secondValue)){\n//     if(this.funcal(firstValue)<this.funcal(secondValue)){\n//             if(this.funcal(xm)>0){\n//                     secondValue = xm\n//             }\n//             else if(this.funcal(xm)<0){\n//                     firstValue = xm\n//             }\n//     }\n//     else if(this.funcal(firstValue)>this.funcal(secondValue)){\n//             if(this.funcal(xm)<0){\n//                     secondValue = xm\n//             }\n//             else if(this.funcal(xm)>0){\n//                     firstValue = xm\n//             }\n//     }\n// }\n//x_old = xm\n// }while(check>0.00001)\n//     this.setState({\n//         result: resultPlus\n//     });\n// }\n// plus(firstValue, secondValue) {\n//     return firstValue + secondValue\n// }\n// findxm(firstValue, secondValue) {\n//     return (firstValue + secondValue) / 2\n// }\n// funcal(X) {\n//     const equation = parseInt(this.elements.equation.value, 10)\n//     //const expr = Math.compile(equation);\n//     // const scope = {x:parseFloat(X)};\n//     const expr = \"2x+1\";\n//     return expr.eval(X);\n// }\n// }\n// export default Bisection;","map":{"version":3,"sources":["/Users/nadol/Desktop/reactjs/my-app/src/Bisection.js"],"names":["React","Component","Header","Sidebar","math","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","X","Y","Bisection","constructor","props","state","Arr","xl","xr","equation","submitted","handleSubmit","bind","handleChange","BisectionMethod","event","setState","target","name","value","data","uv","pv","amt","str","c","i","length","preventDefault","func","x","scope","code","compile","eval","err","x0","x1","Math","abs","arr","xm","fxl","fxr","fxm","count","t","xOld","parseFloat","toFixed","push","render","DataRow","rows","map","top","right","left","bottom","r"],"mappings":"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AhMmC,CAoMpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAxQoC;;AA4QxC,eAAezD,SAAf,C,CAyBI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEI;AAEA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEJ;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIJ;AAEA","sourcesContent":["import React, { Component } from 'react'\nimport Header from './Header';\nimport Sidebar from './Sidebar';\nimport * as math from 'mathjs';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nvar X,Y;\nclass Bisection extends React.Component {\n    co\n    constructor(props) {\n        super(props);\n        X=[];\n        Y=[];\n        this.state={Arr:[],xl:\"\",xr:\"\",equation:\"\",submitted:true};\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.BisectionMethod=this.BisectionMethod.bind(this);\n    }\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n        this.setState({submitted:true});\n        this.setState({Arr:[]});\n    }\n    handleSubmit(event) {\n      const data = [\n        {\n            name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n        },\n        {\n            name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n        },\n        {\n            name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n        },\n        {\n            name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n        },\n        {\n            name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n        },\n        {\n            name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n        },\n        {\n            name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n        },\n    ];\n        let str=this.state.equation;\n        let c=0;\n        for(let i=0;i<str.length;i++){\n          if(str[i]===\"x\"||str[i]===\"X\"){\n            c++;\n          }\n        }\n        if((str.length!==0)&&(c!==0)&&this.state.submitted&&this.state.xl!==\"\"&&this.state.xr!==\"\"){\n          this.BisectionMethod();\n          this.setState({submitted:false});\n        }\n        event.preventDefault();\n      }\n      BisectionMethod(event){\n        X=[];\n        Y=[];\n          var func=(x)=>{\n              let scope={x:x}\n              let code=math.compile(this.state.equation);\n              return code.eval(scope);\n            };\n          var err=(x0,x1)=>{return Math.abs((x1-x0)/x1)*100};\n          var arr;\n          var data={xl:0,xr:0,xm:0,err:\"\",fxl:0,fxr:0,fxm:0,count:1};\n          var t=true;\n          var xOld=0;\n          data.xl=parseFloat(this.state.xl);\n          data.xr=parseFloat(this.state.xr);\n          while(t){\n            data.xm=(data.xl+data.xr)/2;\n            data.fxl=(func(data.xl)).toFixed(6);\n            data.fxr=(func(data.xr)).toFixed(6);\n            data.fxm=(func(data.xm)).toFixed(6);\n            data.err=err(xOld,data.xm);\n            arr=this.state.Arr;\n            arr.push({xl:data.xl,xr:data.xr,xm:data.xm,err:data.err,fxl:data.fxl,fxr:data.fxr,fxm:data.fxm,count:data.count});\n            if(func(data.xm)===0||data.count===15){\n              t=false;\n            }\n            else if(func(data.xl)*func(data.xm)<0){\n              data.xr=data.xm;\n            }\n            else if(func(data.xl)*func(data.xm)>0){\n              data.xl= data.xm;\n            }\n            data.count++;\n            xOld=data.xm;\n          }\n          for(let i=this.state.xl;i<=this.state.xr;i++){\n            X.push(i);\n            Y.push(func(i));\n          }\n      }\n\n    render() {\n        const DataRow=(props)=>{return (<tr><td>{props.data.count}</td>\n                                            <td>{props.data.xl}</td>\n                                            <td>{props.data.xr}</td>\n                                            <td>{props.data.xm}</td>\n                                            <td>{props.data.fxl}</td>\n                                            <td>{props.data.fxr}</td>\n                                            <td>{props.data.fxm}</td>\n                                            <td>{props.data.err}</td></tr>);}\n        let rows=this.state.Arr.map(x =>{return <DataRow key={x.count} data={x}/>});\n        return (\n            <div>\n                <Header/>\n                <Sidebar />\n                <div className=\"content\">\n                <form id=\"F\" onSubmit={this.handleSubmit}>\n                    <h1>BISECTION</h1><br></br>\n                        <h3>Equation :</h3>\n                        <input name=\"equation\" type=\"text\" value={this.state.equation} onChange={this.handleChange} placeholder=\"Enter Equation\"></input><br></br>\n                        <h3>X<sub>L</sub> :</h3>\n                        <input name=\"xl\" type=\"text\" step=\"any\" value={this.state.xl} onChange={this.handleChange} placeholder=\"Enter Xl\"></input><br></br>\n                        <h3>X<sub>R</sub> :</h3>\n                        <input name=\"xr\" type=\"number\" step=\"any\" value={this.state.xr} onChange={this.handleChange} placeholder=\"Enter Xr\"></input><br></br><br></br>\n                        <button type=\"submit\" value=\"Submit\">Submit</button><br></br><br></br><br></br><br></br>\n                </form>\n\n                        {(this.state.submitted)\n                        ? <div></div>\n                        : <div><div id=\"T\">\n                            <center><table>\n                            <thead>\n                              <tr><th>Iteration</th>\n                                  <th>X<sub>L</sub> </th>\n                                  <th>X<sub>R</sub> </th>\n                                  <th>X<sub>M</sub> </th>\n                                  <th>F(X<sub>L</sub>)</th>\n                                  <th>F(X<sub>R</sub>)</th>\n                                  <th>F(X<sub>M</sub>)</th>\n                                  <th>Error</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {rows}\n                            </tbody>\n                        </table></center>\n                        </div>\n                        </div>\n                        }\n\n                        <h2 >Chart</h2>\n                        <LineChart\n                            width={500}\n                            height={300}\n                            data={data}\n                            margin={{\n                                top: 5, right: 30, left: 20, bottom: 5,\n                            }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n                        </LineChart>\n                    \n                        {/* <center><table>\n                            <tr>\n                                <th>Iteration</th>\n                                <th>X<sub>M</sub>(old)</th>\n                                <th>X<sub>L</sub></th>\n                                <th>X<sub>R</sub></th>\n                                <th>F(X<sub>L</sub>)</th>\n                                <th>F(X<sub>R</sub>)</th>\n                                <th>X<sub>M</sub>(new)</th>\n                                <th>F(X<sub>M</sub>)</th>\n                                <th>Error</th>\n                            </tr>\n                            <tbody>\n                              {rows}\n                            </tbody> */}\n                            {/* <tr>\n                                <td>{this.state.xl}</td>\n                                <td>{rows}</td>\n                                <td>0</td>\n                            </tr>\n                            <tr>\n                                <td>0</td>\n                                <td>0</td>\n                                <td>0</td>\n                            </tr> */}\n                        {/* </table></center> */}\n\n                </div>\n\n            </div>\n        )\n    }\n\n    \n\n    // cal() {\n    //     var data={xl:0,xr:0,xm:0,err:\"\",fxl:0,fxr:0,fxm:0,count:1};\n    //     const xl = parseInt(this.elements.xl.value, 10)\n    //     const xr = parseInt(this.elements.xr.value, 10)\n    //     const x_old = xr;\n    //     const xm = 0;\n    //     const n = 0;\n    //     const check = parseFloat(0.000000);\n    //     const result = 0;\n\n    //     do{\n    //         this.result = this.findxm(xl, xr);\n    //         this.check = Math.abs((xm-x_old)/xm).toFixed(8);\n    //         this.result = 1;\n    //         // console.log(check);\n    //         // n++;\n    //         // console.log(n);\n    //         // // Create an empty <tr> element and add it to the 1st position of the table:\n    //         // var row = this.table.insertRow(n);\n\n    //         // // Insert new cells (<td> elements) at the 1st and 2nd position of the \"new\" <tr> element:\n    //         // var cell1 = row.insertCell(0);\n    //         // var cell2 = row.insertCell(1);\n    //         // var cell3 = row.insertCell(2);\n    //         // var cell4 = row.insertCell(3);\n    //         // var cell5 = row.insertCell(4);\n\n    //         // // Add some text to the new cells:\n    //         // cell1.innerHTML = n;\n    //         // cell2.innerHTML = xl;\n    //         // cell3.innerHTML = xr;\n    //         // cell4.innerHTML = xm;\n    //         // cell5.innerHTML = check;\n    //         if(parseFloat(xl)<parseFloat(xr)){\n    //             if(this.funcal(xl)<this.funcal(xr)){\n    //                     if(this.funcal(xm)>0){\n    //                             xr = xm\n    //                     }\n    //                     else if(this.funcal(xm)<0){\n    //                             xl = xm\n    //                     }\n    //             }\n    //             else if(this.funcal(xl)>this.funcal(xr)){\n    //                     if(this.funcal(xm)<0){\n    //                             xr = xm\n    //                     }\n    //                     else if(this.funcal(xm)>0){\n    //                             xl = xm\n    //                     }\n    //             }\n    //         }\n    //             // const x_old = xm\n    //     }while(check>0.00001)        \n\n    //     this.setState({\n    //         result: result\n    //     });\n    // }\n\n    // findxm(xl,xr) {\n    //     return (xl+xr)/2\n    // }\n\n    // funcal(X) {\n    //     const equation = parseInt(this.elements.equation.value, 10)\n    //     // expr = math.compile(expression);\n    //     // let scope = {x:parseFloat(X)};\n    //     // return expr.eval(scope);\n    // }\n\n}\n\nexport default Bisection;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         result: null,\n    //     }\n    //     this.elements = {}\n    //     this.onPlus = this.onPlus.bind(this);\n    // }\n\n    \n    // render() {\n    //     const { result } = this.state\n    //     return (\n    //         <div>\n    //         <Header/>\n    //         <Sidebar />\n    //         <div className=\"content\">\n    //             <form>\n    //             <h1>Bisection</h1>\n    //             <p>Enter Input</p>\n    //             equation : <input type=\"text\" defaultValue={ '' } ref={ (el) => this.elements.equation = el } /><br></br><br></br>\n    //             X<sub>L</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.firstValue = el } /><br></br><br></br>\n    //             X<sub>R</sub> : <input type=\"number\" defaultValue={ '' } ref={ (el) => this.elements.secondValue = el } /><br></br><br></br>\n    //             <button type=\"button\" onClick={ this.onPlus }>Click</button>\n    //             <p className='result'>{ result }</p>\n    //             </form>\n    //         </div>\n    //         </div>\n    //     );\n    // }\n\n    // onPlus() {\n    //     const firstValue = parseInt(this.elements.firstValue.value, 10)\n    //     const secondValue = parseInt(this.elements.secondValue.value, 10)\n    //     const resultPlus = this.plus(firstValue, secondValue)\n    //     const x_old = secondValue;\n    //     const n = 0;\n\n        //const xm = 0;\n        \n        //const check = parseFloat(0.000000);\n        // do{\n            //const xm = this.findxm(firstValue, secondValue)\n            //const rr = this.funcal(firstValue)\n            // check = Math.abs((xm-x_old)/xm).toFixed(8);\n            // console.log(check);\n            // n++;\n            // console.log(n);\n\n            // if(parseFloat(firstValue)<parseFloat(secondValue)){\n            //     if(this.funcal(firstValue)<this.funcal(secondValue)){\n            //             if(this.funcal(xm)>0){\n            //                     secondValue = xm\n            //             }\n            //             else if(this.funcal(xm)<0){\n            //                     firstValue = xm\n            //             }\n            //     }\n            //     else if(this.funcal(firstValue)>this.funcal(secondValue)){\n            //             if(this.funcal(xm)<0){\n            //                     secondValue = xm\n            //             }\n            //             else if(this.funcal(xm)>0){\n            //                     firstValue = xm\n            //             }\n            //     }\n            // }\n            //x_old = xm\n        // }while(check>0.00001)\n\n    //     this.setState({\n    //         result: resultPlus\n    //     });\n    // }\n\n    // plus(firstValue, secondValue) {\n    //     return firstValue + secondValue\n    // }\n\n    // findxm(firstValue, secondValue) {\n    //     return (firstValue + secondValue) / 2\n    // }\n\n    // funcal(X) {\n    //     const equation = parseInt(this.elements.equation.value, 10)\n    //     //const expr = Math.compile(equation);\n    //     // const scope = {x:parseFloat(X)};\n    //     const expr = \"2x+1\";\n    //     return expr.eval(X);\n    // }\n\n    \n\n// }\n\n// export default Bisection;"]},"metadata":{},"sourceType":"module"}