{"ast":null,"code":"import { factory } from '../../utils/factory'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport var createSpeedOfLight =\n/* #__PURE__ */\nunitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant =\n/* #__PURE__ */\nunitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant =\n/* #__PURE__ */\nunitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant =\n/* #__PURE__ */\nunitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport var createMagneticConstant =\n/* #__PURE__ */\nunitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant =\n/* #__PURE__ */\nunitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance =\n/* #__PURE__ */\nunitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb =\n/* #__PURE__ */\nunitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge =\n/* #__PURE__ */\nunitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton =\n/* #__PURE__ */\nunitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum =\n/* #__PURE__ */\nunitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum =\n/* #__PURE__ */\nunitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum =\n/* #__PURE__ */\nunitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton =\n/* #__PURE__ */\nunitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing =\n/* #__PURE__ */\nunitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson =\n/* #__PURE__ */\nunitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport var createBohrRadius =\n/* #__PURE__ */\nunitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius =\n/* #__PURE__ */\nunitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass =\n/* #__PURE__ */\nunitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling =\n/* #__PURE__ */\nunitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy =\n/* #__PURE__ */\nunitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass =\n/* #__PURE__ */\nunitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass =\n/* #__PURE__ */\nunitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass =\n/* #__PURE__ */\nunitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation =\n/* #__PURE__ */\nunitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg =\n/* #__PURE__ */\nunitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection =\n/* #__PURE__ */\nunitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport var createAtomicMass =\n/* #__PURE__ */\nunitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro =\n/* #__PURE__ */\nunitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann =\n/* #__PURE__ */\nunitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday =\n/* #__PURE__ */\nunitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation =\n/* #__PURE__ */\nunitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport var createLoschmidt =\n/* #__PURE__ */\nunitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant =\n/* #__PURE__ */\nunitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant =\n/* #__PURE__ */\nunitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume =\n/* #__PURE__ */\nunitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation =\n/* #__PURE__ */\nunitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann =\n/* #__PURE__ */\nunitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement =\n/* #__PURE__ */\nunitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport var createMolarMass =\n/* #__PURE__ */\nunitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 =\n/* #__PURE__ */\nunitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity =\n/* #__PURE__ */\nunitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport var createPlanckLength =\n/* #__PURE__ */\nunitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass =\n/* #__PURE__ */\nunitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime =\n/* #__PURE__ */\nunitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge =\n/* #__PURE__ */\nunitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature =\n/* #__PURE__ */\nunitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, function (_ref) {\n    var config = _ref.config,\n        Unit = _ref.Unit,\n        BigNumber = _ref.BigNumber; // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n        BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","map":{"version":3,"sources":["/Users/nadol/Desktop/reactjs/my-app/node_modules/mathjs/es/type/unit/physicalConstants.js"],"names":["factory","createSpeedOfLight","unitFactory","createGravitationConstant","createPlanckConstant","createReducedPlanckConstant","createMagneticConstant","createElectricConstant","createVacuumImpedance","createCoulomb","createElementaryCharge","createBohrMagneton","createConductanceQuantum","createInverseConductanceQuantum","createMagneticFluxQuantum","createNuclearMagneton","createKlitzing","createJosephson","createBohrRadius","createClassicalElectronRadius","createElectronMass","createFermiCoupling","createFineStructure","numberFactory","createHartreeEnergy","createProtonMass","createDeuteronMass","createNeutronMass","createQuantumOfCirculation","createRydberg","createThomsonCrossSection","createWeakMixingAngle","createEfimovFactor","createAtomicMass","createAvogadro","createBoltzmann","createFaraday","createFirstRadiation","createLoschmidt","createGasConstant","createMolarPlanckConstant","createMolarVolume","createSackurTetrode","createSecondRadiation","createStefanBoltzmann","createWienDisplacement","createMolarMass","createMolarMassC12","createGravity","createPlanckLength","createPlanckMass","createPlanckTime","createPlanckCharge","createPlanckTemperature","name","valueStr","unitStr","dependencies","_ref","config","Unit","BigNumber","value","number","parseFloat","unit","fixPrefix","_ref2"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport var createSpeedOfLight =\n/* #__PURE__ */\nunitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant =\n/* #__PURE__ */\nunitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant =\n/* #__PURE__ */\nunitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant =\n/* #__PURE__ */\nunitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport var createMagneticConstant =\n/* #__PURE__ */\nunitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant =\n/* #__PURE__ */\nunitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance =\n/* #__PURE__ */\nunitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb =\n/* #__PURE__ */\nunitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge =\n/* #__PURE__ */\nunitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton =\n/* #__PURE__ */\nunitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum =\n/* #__PURE__ */\nunitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum =\n/* #__PURE__ */\nunitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum =\n/* #__PURE__ */\nunitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton =\n/* #__PURE__ */\nunitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing =\n/* #__PURE__ */\nunitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson =\n/* #__PURE__ */\nunitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport var createBohrRadius =\n/* #__PURE__ */\nunitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius =\n/* #__PURE__ */\nunitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass =\n/* #__PURE__ */\nunitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling =\n/* #__PURE__ */\nunitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy =\n/* #__PURE__ */\nunitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass =\n/* #__PURE__ */\nunitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass =\n/* #__PURE__ */\nunitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass =\n/* #__PURE__ */\nunitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation =\n/* #__PURE__ */\nunitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg =\n/* #__PURE__ */\nunitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection =\n/* #__PURE__ */\nunitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport var createAtomicMass =\n/* #__PURE__ */\nunitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro =\n/* #__PURE__ */\nunitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann =\n/* #__PURE__ */\nunitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday =\n/* #__PURE__ */\nunitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation =\n/* #__PURE__ */\nunitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport var createLoschmidt =\n/* #__PURE__ */\nunitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant =\n/* #__PURE__ */\nunitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant =\n/* #__PURE__ */\nunitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume =\n/* #__PURE__ */\nunitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation =\n/* #__PURE__ */\nunitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann =\n/* #__PURE__ */\nunitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement =\n/* #__PURE__ */\nunitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport var createMolarMass =\n/* #__PURE__ */\nunitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 =\n/* #__PURE__ */\nunitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity =\n/* #__PURE__ */\nunitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport var createPlanckLength =\n/* #__PURE__ */\nunitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass =\n/* #__PURE__ */\nunitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime =\n/* #__PURE__ */\nunitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge =\n/* #__PURE__ */\nunitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature =\n/* #__PURE__ */\nunitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, function (_ref) {\n    var config = _ref.config,\n        Unit = _ref.Unit,\n        BigNumber = _ref.BigNumber;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n        BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}"]},"metadata":{},"sourceType":"module"}