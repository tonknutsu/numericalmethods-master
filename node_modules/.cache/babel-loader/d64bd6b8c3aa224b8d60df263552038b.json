{"ast":null,"code":"import { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nimport { format } from '../../utils/string';\nvar name = 'eigs';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\nexport var createEigs =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      equal = _ref.equal,\n      abs = _ref.abs,\n      atan = _ref.atan,\n      cos = _ref.cos,\n      sin = _ref.sin,\n      multiplyScalar = _ref.multiplyScalar,\n      inv = _ref.inv,\n      bignumber = _ref.bignumber,\n      multiply = _ref.multiply,\n      add = _ref.add;\n  /**\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\n   * of elements are not supported. Input matrix or 2D array should contain all elements\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\n   * Eigenvectors are always of 'number' type.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x)\n   *\n   * Examples:\n   *\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\n   *     E[0] == UTxHxU[0][0]  // returns true\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix).\n   */\n\n  var eigs = typed('eigs', {\n    Array: function Array(x) {\n      // check array size\n      var mat = matrix(x);\n      var size = mat.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      } // use dense 2D matrix implementation\n\n\n      var ans = checkAndSubmit(mat, size[0]);\n      return {\n        values: ans[0],\n        vectors: ans[1]\n      };\n    },\n    Matrix: function Matrix(x) {\n      // use dense 2D array implementation\n      // dense matrix\n      var size = x.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n\n      var ans = checkAndSubmit(x, size[0]);\n      return {\n        values: matrix(ans[0]),\n        vectors: matrix(ans[1])\n      };\n    }\n  }); // Is the matrix\n  // symmetric ?\n\n  function isSymmetric(x, n) {\n    for (var i = 0; i < n; i++) {\n      for (var j = i; j < n; j++) {\n        // not symmtric\n        if (!equal(x[i][j], x[j][i])) {\n          throw new TypeError('Input matrix is not symmetric');\n        }\n      }\n    }\n  } // check input for possible problems\n  // and perform diagonalization efficiently for\n  // specific type of number\n\n\n  function checkAndSubmit(x, n) {\n    var type = x.datatype(); // type check\n\n    if (type === undefined) {\n      type = x.getDataType();\n    }\n\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\n      if (type === 'mixed') {\n        throw new TypeError('Mixed matrix element type is not supported');\n      } else {\n        throw new TypeError('Matrix element type not supported (' + type + ')');\n      }\n    } else {\n      isSymmetric(x.toArray(), n);\n    } // perform efficient calculation for 'numbers'\n\n\n    if (type === 'number') {\n      return diag(x.toArray());\n    } else if (type === 'Fraction') {\n      var xArr = x.toArray(); // convert fraction to numbers\n\n      for (var i = 0; i < n; i++) {\n        for (var j = i; j < n; j++) {\n          xArr[i][j] = xArr[i][j].valueOf();\n          xArr[j][i] = xArr[i][j];\n        }\n      }\n\n      return diag(x.toArray());\n    } else if (type === 'BigNumber') {\n      return diagBig(x.toArray());\n    }\n  } // diagonalization implementation for number (efficient)\n\n\n  function diag(x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;\n    var N = x.length;\n    var e0 = Math.abs(precision / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAij(x);\n\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n\n    return sorting(clone(Ei), clone(Sij));\n  } // diagonalization implementation for bigNumber\n\n\n  function diagBig(x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;\n    var N = x.length;\n    var e0 = abs(precision / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAijBig(x);\n\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    } // return [clone(Ei), clone(Sij)]\n\n\n    return sorting(clone(Ei), clone(Sij));\n  } // get angle\n\n\n  function getTheta(aii, ajj, aij) {\n    var th = 0;\n    var denom = ajj - aii;\n\n    if (Math.abs(denom) <= 1E-14) {\n      th = Math.PI / 4.0;\n    } else {\n      th = 0.5 * Math.atan(2.0 * aij / (ajj - aii));\n    }\n\n    return th;\n  } // get angle\n\n\n  function getThetaBig(aii, ajj, aij) {\n    var th = 0;\n    var denom = subtract(ajj, aii);\n\n    if (abs(denom) <= 1E-14) {\n      th = Math.PI / 4.0;\n    } else {\n      th = multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));\n    }\n\n    return th;\n  } // update eigvec\n\n\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n\n    return Sij;\n  } // update eigvec for overlap\n\n\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n\n    return Sij;\n  } // update matrix\n\n\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); // 2cs Hij\n\n    var csHij = multiply(2, c, s, Hij[i][j]); //  Aii\n\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n\n    return Hij;\n  } // update matrix\n\n\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); //  Aii\n\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n\n    return Hij;\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // sort results\n\n\n  function sorting(E, S) {\n    var N = E.length;\n    var Ef = Array(N);\n    var Sf = Array(N);\n\n    for (var k = 0; k < N; k++) {\n      Sf[k] = Array(N);\n    }\n\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n\n      for (var j = 0; j < E.length; j++) {\n        if (E[j] < minE) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n\n      Ef[i] = E.splice(minID, 1)[0];\n\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        Sf[_k5][i] = S[_k5][minID];\n\n        S[_k5].splice(minID, 1);\n      }\n    }\n\n    return [clone(Ef), clone(Sf)];\n  }\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n\n\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n\n    return array;\n  }\n\n  return eigs;\n});","map":{"version":3,"sources":["C:/Users/tonknutsu/Downloads/numericalmethods-master/numericalmethods-master/node_modules/mathjs/es/function/matrix/eigs.js"],"names":["clone","factory","format","name","dependencies","createEigs","_ref","typed","matrix","addScalar","subtract","equal","abs","atan","cos","sin","multiplyScalar","inv","bignumber","multiply","add","eigs","Array","x","mat","size","length","RangeError","ans","checkAndSubmit","values","vectors","Matrix","isSymmetric","n","i","j","TypeError","type","datatype","undefined","getDataType","toArray","diag","xArr","valueOf","diagBig","precision","arguments","N","e0","Math","psi","Sij","createArray","Vab","getAij","_i","getTheta","x1","Sij1","Ei","_i2","sorting","getAijBig","_i3","getThetaBig","x1Big","Sij1Big","_i4","aii","ajj","aij","th","denom","PI","theta","c","s","Ski","Skj","k","_k","_k2","Hij","c2","s2","Aki","Akj","csHij","Aii","Ajj","_k3","_k4","Mij","maxMij","maxIJ","E","S","Ef","Sf","minID","minE","splice","_k5","value","array"],"mappings":"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","sourcesContent":["import { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nimport { format } from '../../utils/string';\nvar name = 'eigs';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\nexport var createEigs =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      equal = _ref.equal,\n      abs = _ref.abs,\n      atan = _ref.atan,\n      cos = _ref.cos,\n      sin = _ref.sin,\n      multiplyScalar = _ref.multiplyScalar,\n      inv = _ref.inv,\n      bignumber = _ref.bignumber,\n      multiply = _ref.multiply,\n      add = _ref.add;\n\n  /**\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\n   * of elements are not supported. Input matrix or 2D array should contain all elements\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\n   * Eigenvectors are always of 'number' type.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x)\n   *\n   * Examples:\n   *\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\n   *     E[0] == UTxHxU[0][0]  // returns true\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix).\n   */\n  var eigs = typed('eigs', {\n    Array: function Array(x) {\n      // check array size\n      var mat = matrix(x);\n      var size = mat.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      } // use dense 2D matrix implementation\n\n\n      var ans = checkAndSubmit(mat, size[0]);\n      return {\n        values: ans[0],\n        vectors: ans[1]\n      };\n    },\n    Matrix: function Matrix(x) {\n      // use dense 2D array implementation\n      // dense matrix\n      var size = x.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n\n      var ans = checkAndSubmit(x, size[0]);\n      return {\n        values: matrix(ans[0]),\n        vectors: matrix(ans[1])\n      };\n    }\n  }); // Is the matrix\n  // symmetric ?\n\n  function isSymmetric(x, n) {\n    for (var i = 0; i < n; i++) {\n      for (var j = i; j < n; j++) {\n        // not symmtric\n        if (!equal(x[i][j], x[j][i])) {\n          throw new TypeError('Input matrix is not symmetric');\n        }\n      }\n    }\n  } // check input for possible problems\n  // and perform diagonalization efficiently for\n  // specific type of number\n\n\n  function checkAndSubmit(x, n) {\n    var type = x.datatype(); // type check\n\n    if (type === undefined) {\n      type = x.getDataType();\n    }\n\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\n      if (type === 'mixed') {\n        throw new TypeError('Mixed matrix element type is not supported');\n      } else {\n        throw new TypeError('Matrix element type not supported (' + type + ')');\n      }\n    } else {\n      isSymmetric(x.toArray(), n);\n    } // perform efficient calculation for 'numbers'\n\n\n    if (type === 'number') {\n      return diag(x.toArray());\n    } else if (type === 'Fraction') {\n      var xArr = x.toArray(); // convert fraction to numbers\n\n      for (var i = 0; i < n; i++) {\n        for (var j = i; j < n; j++) {\n          xArr[i][j] = xArr[i][j].valueOf();\n          xArr[j][i] = xArr[i][j];\n        }\n      }\n\n      return diag(x.toArray());\n    } else if (type === 'BigNumber') {\n      return diagBig(x.toArray());\n    }\n  } // diagonalization implementation for number (efficient)\n\n\n  function diag(x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;\n    var N = x.length;\n    var e0 = Math.abs(precision / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAij(x);\n\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n\n    return sorting(clone(Ei), clone(Sij));\n  } // diagonalization implementation for bigNumber\n\n\n  function diagBig(x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1E-12;\n    var N = x.length;\n    var e0 = abs(precision / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAijBig(x);\n\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    } // return [clone(Ei), clone(Sij)]\n\n\n    return sorting(clone(Ei), clone(Sij));\n  } // get angle\n\n\n  function getTheta(aii, ajj, aij) {\n    var th = 0;\n    var denom = ajj - aii;\n\n    if (Math.abs(denom) <= 1E-14) {\n      th = Math.PI / 4.0;\n    } else {\n      th = 0.5 * Math.atan(2.0 * aij / (ajj - aii));\n    }\n\n    return th;\n  } // get angle\n\n\n  function getThetaBig(aii, ajj, aij) {\n    var th = 0;\n    var denom = subtract(ajj, aii);\n\n    if (abs(denom) <= 1E-14) {\n      th = Math.PI / 4.0;\n    } else {\n      th = multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));\n    }\n\n    return th;\n  } // update eigvec\n\n\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n\n    return Sij;\n  } // update eigvec for overlap\n\n\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n\n    return Sij;\n  } // update matrix\n\n\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); // 2cs Hij\n\n    var csHij = multiply(2, c, s, Hij[i][j]); //  Aii\n\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n\n    return Hij;\n  } // update matrix\n\n\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); //  Aii\n\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n\n    return Hij;\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // sort results\n\n\n  function sorting(E, S) {\n    var N = E.length;\n    var Ef = Array(N);\n    var Sf = Array(N);\n\n    for (var k = 0; k < N; k++) {\n      Sf[k] = Array(N);\n    }\n\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n\n      for (var j = 0; j < E.length; j++) {\n        if (E[j] < minE) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n\n      Ef[i] = E.splice(minID, 1)[0];\n\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        Sf[_k5][i] = S[_k5][minID];\n\n        S[_k5].splice(minID, 1);\n      }\n    }\n\n    return [clone(Ef), clone(Sf)];\n  }\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n\n\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n\n    return array;\n  }\n\n  return eigs;\n});"]},"metadata":{},"sourceType":"module"}